
testSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e68  08005e68  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e70  08005e70  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08005e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200000b0  08005f28  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005f28  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010565  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee8  00000000  00000000  00030645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00033428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f14  00000000  00000000  00034290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a66  00000000  00000000  000361a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a76  00000000  00000000  00047c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004584  00000000  00000000  000d86d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dc4 	.word	0x08005dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08005dc4 	.word	0x08005dc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <delay+0x30>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000dd2:	bf00      	nop
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <delay+0x30>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3f9      	bcc.n	8000dd4 <delay+0x14>
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000120 	.word	0x20000120
 8000df4:	00000000 	.word	0x00000000

08000df8 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d155      	bne.n	8000eb4 <HAL_TIM_IC_CaptureCallback+0xbc>
{
if (Is_First_Captured==0) // if the first value is not captured
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d117      	bne.n	8000e40 <HAL_TIM_IC_CaptureCallback+0x48>
{
TIM2->CNT = 0;
 8000e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
Is_First_Captured = 1; // set the first captured as true
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
// Now change the polarity to falling edge
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 020a 	bic.w	r2, r2, #10
 8000e2c:	621a      	str	r2, [r3, #32]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0202 	orr.w	r2, r2, #2
 8000e3c:	621a      	str	r2, [r3, #32]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);

}
}

}
 8000e3e:	e039      	b.n	8000eb4 <HAL_TIM_IC_CaptureCallback+0xbc>
else if (Is_First_Captured==1)  // if the first is already captured
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d135      	bne.n	8000eb4 <HAL_TIM_IC_CaptureCallback+0xbc>
Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000e48:	2100      	movs	r1, #0
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f002 ffea 	bl	8003e24 <HAL_TIM_ReadCapturedValue>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e54:	6013      	str	r3, [r2, #0]
Distance = Difference * .034/2;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb5a 	bl	8000514 <__aeabi_ui2d>
 8000e60:	a317      	add	r3, pc, #92	; (adr r3, 8000ec0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff fbcf 	bl	8000608 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7a:	f7ff fcef 	bl	800085c <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff fdf9 	bl	8000a7c <__aeabi_d2uiz>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000e90:	701a      	strb	r2, [r3, #0]
Is_First_Captured = 0; // set it back to false
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a1a      	ldr	r2, [r3, #32]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 020a 	bic.w	r2, r2, #10
 8000ea6:	621a      	str	r2, [r3, #32]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6a12      	ldr	r2, [r2, #32]
 8000eb2:	621a      	str	r2, [r3, #32]
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	b020c49c 	.word	0xb020c49c
 8000ec4:	3fa16872 	.word	0x3fa16872
 8000ec8:	200001f4 	.word	0x200001f4
 8000ecc:	200001f0 	.word	0x200001f0
 8000ed0:	200001f5 	.word	0x200001f5

08000ed4 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HCSR04_Read+0x38>)
 8000ee0:	f001 f8c4 	bl	800206c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f7ff ff6b 	bl	8000dc0 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <HCSR04_Read+0x38>)
 8000ef2:	f001 f8bb 	bl	800206c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HCSR04_Read+0x3c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HCSR04_Read+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0202 	orr.w	r2, r2, #2
 8000f04:	60da      	str	r2, [r3, #12]
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	20000120 	.word	0x20000120
 8000f14:	00000000 	.word	0x00000000

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0a6      	sub	sp, #152	; 0x98
 8000f1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fce7 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f939 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 fa77 	bl	8001418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2a:	f000 fa21 	bl	8001370 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f2e:	f000 f99b 	bl	8001268 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f32:	f000 f9c7 	bl	80012c4 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000f36:	f000 fa45 	bl	80013c4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4886      	ldr	r0, [pc, #536]	; (8001158 <main+0x240>)
 8000f3e:	f002 fcb3 	bl	80038a8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)&rec, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	4985      	ldr	r1, [pc, #532]	; (800115c <main+0x244>)
 8000f46:	4886      	ldr	r0, [pc, #536]	; (8001160 <main+0x248>)
 8000f48:	f003 fafd 	bl	8004546 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     HAL_StatusTypeDef status;
         status = HAL_I2C_IsDeviceReady(&hi2c1, (0x5A<<1), 4, 100);
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	2204      	movs	r2, #4
 8000f50:	21b4      	movs	r1, #180	; 0xb4
 8000f52:	4884      	ldr	r0, [pc, #528]	; (8001164 <main+0x24c>)
 8000f54:	f001 fc0e 	bl	8002774 <HAL_I2C_IsDeviceReady>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
         if(status==HAL_OK){
 8000f5e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <main+0x6a>
       	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2120      	movs	r1, #32
 8000f6a:	487f      	ldr	r0, [pc, #508]	; (8001168 <main+0x250>)
 8000f6c:	f001 f87e 	bl	800206c <HAL_GPIO_WritePin>
       	  HAL_Delay(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f000 fd2e 	bl	80019d4 <HAL_Delay>
       	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	487a      	ldr	r0, [pc, #488]	; (8001168 <main+0x250>)
 8000f7e:	f001 f875 	bl	800206c <HAL_GPIO_WritePin>
         }
  while (1)
  {
	  HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x06, 1, (uint8_t *)data_read, 2, 100);
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2302      	movs	r3, #2
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2206      	movs	r2, #6
 8000f94:	21b4      	movs	r1, #180	; 0xb4
 8000f96:	4873      	ldr	r0, [pc, #460]	; (8001164 <main+0x24c>)
 8000f98:	f001 f9c6 	bl	8002328 <HAL_I2C_Mem_Read>

	  	  	  aux = (int16_t) ((data_read[1] << 8) | data_read[0]);
 8000f9c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	  	  	  ambient_temperature = aux * 0.02 - 273.15;
 8000fb0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fabd 	bl	8000534 <__aeabi_i2d>
 8000fba:	a363      	add	r3, pc, #396	; (adr r3, 8001148 <main+0x230>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb22 	bl	8000608 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	a360      	add	r3, pc, #384	; (adr r3, 8001150 <main+0x238>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff f961 	bl	8000298 <__aeabi_dsub>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fd25 	bl	8000a2c <__aeabi_d2iz>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	  	  	  HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	; 0x64
 8000fea:	f000 fcf3 	bl	80019d4 <HAL_Delay>

	  	  	  HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x07, 1, (uint8_t *)data_read1, 2, 100);
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2207      	movs	r2, #7
 8001000:	21b4      	movs	r1, #180	; 0xb4
 8001002:	4858      	ldr	r0, [pc, #352]	; (8001164 <main+0x24c>)
 8001004:	f001 f990 	bl	8002328 <HAL_I2C_Mem_Read>

	  	  	  aux1 = (int16_t) ((data_read1[1] << 8) | data_read1[0]);
 8001008:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  	  	  ambient_temperature1 = aux1 * 0.02 - 273.15;
 800101c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa87 	bl	8000534 <__aeabi_i2d>
 8001026:	a348      	add	r3, pc, #288	; (adr r3, 8001148 <main+0x230>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff faec 	bl	8000608 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	a345      	add	r3, pc, #276	; (adr r3, 8001150 <main+0x238>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff f92b 	bl	8000298 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fcef 	bl	8000a2c <__aeabi_d2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	  	  	  HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f000 fcbd 	bl	80019d4 <HAL_Delay>

	  	  	  sprintf(data,"\f Ambient = %d \n\r", ambient_temperature);
 800105a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800105e:	461a      	mov	r2, r3
 8001060:	4942      	ldr	r1, [pc, #264]	; (800116c <main+0x254>)
 8001062:	4843      	ldr	r0, [pc, #268]	; (8001170 <main+0x258>)
 8001064:	f004 fa40 	bl	80054e8 <siprintf>

	  	  	  sprintf(data1,"\f\t Object = %d \n\r", ambient_temperature1);
 8001068:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800106c:	461a      	mov	r2, r3
 800106e:	4941      	ldr	r1, [pc, #260]	; (8001174 <main+0x25c>)
 8001070:	4841      	ldr	r0, [pc, #260]	; (8001178 <main+0x260>)
 8001072:	f004 fa39 	bl	80054e8 <siprintf>

	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8001076:	483e      	ldr	r0, [pc, #248]	; (8001170 <main+0x258>)
 8001078:	f7ff f8b2 	bl	80001e0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	493a      	ldr	r1, [pc, #232]	; (8001170 <main+0x258>)
 8001086:	483d      	ldr	r0, [pc, #244]	; (800117c <main+0x264>)
 8001088:	f003 f9cb 	bl	8004422 <HAL_UART_Transmit>
	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), 1000);
 800108c:	483a      	ldr	r0, [pc, #232]	; (8001178 <main+0x260>)
 800108e:	f7ff f8a7 	bl	80001e0 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	4937      	ldr	r1, [pc, #220]	; (8001178 <main+0x260>)
 800109c:	4837      	ldr	r0, [pc, #220]	; (800117c <main+0x264>)
 800109e:	f003 f9c0 	bl	8004422 <HAL_UART_Transmit>


	  //HAL_UART_Transmit(&huart6, senddata, strlen(senddata), 100);
	  HCSR04_Read();
 80010a2:	f7ff ff17 	bl	8000ed4 <HCSR04_Read>
	  char buffer[100];
	  //sprintf(buffer, "%d%d%d cm \r\n", (Distance/100) + 48, ((Distance/10)%10) +48, (Distance%10)+48);
	  sprintf(buffer, "%d cm \r\n", Distance - 9);
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <main+0x268>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f1a3 0209 	sub.w	r2, r3, #9
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4934      	ldr	r1, [pc, #208]	; (8001184 <main+0x26c>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fa18 	bl	80054e8 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f890 	bl	80001e0 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	1d39      	adds	r1, r7, #4
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	482c      	ldr	r0, [pc, #176]	; (800117c <main+0x264>)
 80010ca:	f003 f9aa 	bl	8004422 <HAL_UART_Transmit>
	  if (Distance - 9 < 0) {
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <main+0x268>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d803      	bhi.n	80010de <main+0x1c6>
		  state = 0;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <main+0x270>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e006      	b.n	80010ec <main+0x1d4>
	  }
	  else if (Distance - 9 <= 40) {
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <main+0x268>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b31      	cmp	r3, #49	; 0x31
 80010e4:	d802      	bhi.n	80010ec <main+0x1d4>
		  state = 1;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <main+0x270>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
	  }
	  sprintf(buffer, "%d\r\n", state);
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <main+0x270>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4926      	ldr	r1, [pc, #152]	; (800118c <main+0x274>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 f9f7 	bl	80054e8 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f86f 	bl	80001e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	1d39      	adds	r1, r7, #4
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <main+0x264>)
 800110c:	f003 f989 	bl	8004422 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8001110:	20c8      	movs	r0, #200	; 0xc8
 8001112:	f000 fc5f 	bl	80019d4 <HAL_Delay>
	  sprintf(senddata_2, "%d", state);
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <main+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	491c      	ldr	r1, [pc, #112]	; (8001190 <main+0x278>)
 800111e:	481d      	ldr	r0, [pc, #116]	; (8001194 <main+0x27c>)
 8001120:	f004 f9e2 	bl	80054e8 <siprintf>
	  HAL_UART_Transmit(&huart6, senddata_2, strlen(senddata_2), 100);
 8001124:	481b      	ldr	r0, [pc, #108]	; (8001194 <main+0x27c>)
 8001126:	f7ff f85b 	bl	80001e0 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	4918      	ldr	r1, [pc, #96]	; (8001194 <main+0x27c>)
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <main+0x248>)
 8001134:	f003 f975 	bl	8004422 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113c:	f000 fc4a 	bl	80019d4 <HAL_Delay>
  {
 8001140:	e71f      	b.n	8000f82 <main+0x6a>
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	47ae147b 	.word	0x47ae147b
 800114c:	3f947ae1 	.word	0x3f947ae1
 8001150:	66666666 	.word	0x66666666
 8001154:	40711266 	.word	0x40711266
 8001158:	20000120 	.word	0x20000120
 800115c:	20000260 	.word	0x20000260
 8001160:	200001ac 	.word	0x200001ac
 8001164:	200000cc 	.word	0x200000cc
 8001168:	40020000 	.word	0x40020000
 800116c:	08005ddc 	.word	0x08005ddc
 8001170:	20000000 	.word	0x20000000
 8001174:	08005df0 	.word	0x08005df0
 8001178:	20000020 	.word	0x20000020
 800117c:	20000168 	.word	0x20000168
 8001180:	200001f5 	.word	0x200001f5
 8001184:	08005e04 	.word	0x08005e04
 8001188:	200001f8 	.word	0x200001f8
 800118c:	08005e10 	.word	0x08005e10
 8001190:	08005e18 	.word	0x08005e18
 8001194:	200001fc 	.word	0x200001fc

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 f996 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <SystemClock_Config+0xc8>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <SystemClock_Config+0xc8>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemClock_Config+0xc8>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <SystemClock_Config+0xcc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <SystemClock_Config+0xcc>)
 80011e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <SystemClock_Config+0xcc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800120c:	2348      	movs	r3, #72	; 0x48
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fe5b 	bl	8002ed8 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001228:	f000 f966 	bl	80014f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f002 f8bd 	bl	80033c8 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001254:	f000 f950 	bl	80014f8 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	; 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_I2C1_Init+0x50>)
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <MX_I2C1_Init+0x54>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_I2C1_Init+0x50>)
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x58>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_I2C1_Init+0x50>)
 8001286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_I2C1_Init+0x50>)
 80012a6:	f000 fefb 	bl	80020a0 <HAL_I2C_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b0:	f000 f922 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	40005400 	.word	0x40005400
 80012c0:	000186a0 	.word	0x000186a0

080012c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM1_Init+0xa4>)
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <MX_TIM1_Init+0xa8>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_TIM1_Init+0xa4>)
 80012e8:	2247      	movs	r2, #71	; 0x47
 80012ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM1_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM1_Init+0xa4>)
 80012f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM1_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM1_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM1_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <MX_TIM1_Init+0xa4>)
 800130e:	f002 fa7b 	bl	8003808 <HAL_TIM_IC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001318:	f000 f8ee 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <MX_TIM1_Init+0xa4>)
 800132c:	f002 ffaa 	bl	8004284 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001336:	f000 f8df 	bl	80014f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800133e:	2301      	movs	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM1_Init+0xa4>)
 8001352:	f002 fccb 	bl	8003cec <HAL_TIM_IC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800135c:	f000 f8cc 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000120 	.word	0x20000120
 800136c:	40010000 	.word	0x40010000

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f002 ffee 	bl	8004388 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 f8a1 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000168 	.word	0x20000168
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_USART6_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART6_UART_Init+0x4c>)
 80013fc:	f002 ffc4 	bl	8004388 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f000 f877 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001ac 	.word	0x200001ac
 8001414:	40011400 	.word	0x40011400

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2d      	ldr	r2, [pc, #180]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MX_GPIO_Init+0xd4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <MX_GPIO_Init+0xd4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <MX_GPIO_Init+0xd4>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_GPIO_Init+0xd4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_GPIO_Init+0xd8>)
 80014a6:	f000 fde1 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_GPIO_Init+0xdc>)
 80014c2:	f000 fc4f 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80014c6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0xd8>)
 80014e0:	f000 fc40 	bl	8001d64 <HAL_GPIO_Init>

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020800 	.word	0x40020800

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001542:	2006      	movs	r0, #6
 8001544:	f000 fb3a 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_I2C_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_I2C_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a2:	2304      	movs	r3, #4
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <HAL_I2C_MspInit+0x8c>)
 80015ae:	f000 fbd9 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_TIM_IC_MspInit+0x94>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d134      	bne.n	8001670 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_TIM_IC_MspInit+0x98>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001650:	2301      	movs	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <HAL_TIM_IC_MspInit+0x9c>)
 800165c:	f000 fb82 	bl	8001d64 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	201b      	movs	r0, #27
 8001666:	f000 fab4 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800166a:	201b      	movs	r0, #27
 800166c:	f000 facd 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_UART_MspInit+0xf8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12c      	bne.n	8001700 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_UART_MspInit+0xfc>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ee:	2307      	movs	r3, #7
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4822      	ldr	r0, [pc, #136]	; (8001784 <HAL_UART_MspInit+0x100>)
 80016fa:	f000 fb33 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016fe:	e038      	b.n	8001772 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <HAL_UART_MspInit+0x104>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d133      	bne.n	8001772 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0xfc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_UART_MspInit+0xfc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001752:	2308      	movs	r3, #8
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <HAL_UART_MspInit+0x108>)
 800175e:	f000 fb01 	bl	8001d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	2047      	movs	r0, #71	; 0x47
 8001768:	f000 fa33 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800176c:	2047      	movs	r0, #71	; 0x47
 800176e:	f000 fa4c 	bl	8001c0a <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004400 	.word	0x40004400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40011400 	.word	0x40011400
 800178c:	40020800 	.word	0x40020800

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8da 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM1_CC_IRQHandler+0x10>)
 80017ea:	f002 f977 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000120 	.word	0x20000120

080017f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USART6_IRQHandler+0x10>)
 80017fe:	f002 fed3 	bl	80045a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001ac 	.word	0x200001ac

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fe22 	bl	8005484 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	20000264 	.word	0x20000264
 8001874:	20000280 	.word	0x20000280

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffd7 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 fde1 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fb23 	bl	8000f18 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80018e0:	08005e78 	.word	0x08005e78
  ldr r2, =_sbss
 80018e4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80018e8:	2000027c 	.word	0x2000027c

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f94f 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fdee 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f967 	bl	8001c26 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f92f 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000040 	.word	0x20000040
 800198c:	20000048 	.word	0x20000048
 8001990:	20000044 	.word	0x20000044

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000048 	.word	0x20000048
 80019b8:	20000268 	.word	0x20000268

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000268 	.word	0x20000268

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000048 	.word	0x20000048

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff feb6 	bl	80019bc <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d008      	beq.n	8001c70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e052      	b.n	8001d16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0216 	bic.w	r2, r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <HAL_DMA_Abort+0x62>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e013      	b.n	8001cea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff fe7b 	bl	80019bc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d90c      	bls.n	8001cea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e015      	b.n	8001d16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e4      	bne.n	8001cc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d004      	beq.n	8001d3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00c      	b.n	8001d56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2205      	movs	r2, #5
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e159      	b.n	8002034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8148 	bne.w	800202e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a2 	beq.w	800202e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x202>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1fe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	; (800205c <HAL_GPIO_Init+0x2f8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1fa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <HAL_GPIO_Init+0x2fc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1f6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_GPIO_Init+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1f2>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f aea2 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e12b      	b.n	800230a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fa44 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002104:	f001 fb58 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a81      	ldr	r2, [pc, #516]	; (8002314 <HAL_I2C_Init+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d807      	bhi.n	8002124 <HAL_I2C_Init+0x84>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a80      	ldr	r2, [pc, #512]	; (8002318 <HAL_I2C_Init+0x278>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e006      	b.n	8002132 <HAL_I2C_Init+0x92>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a7d      	ldr	r2, [pc, #500]	; (800231c <HAL_I2C_Init+0x27c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0e7      	b.n	800230a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a78      	ldr	r2, [pc, #480]	; (8002320 <HAL_I2C_Init+0x280>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a6a      	ldr	r2, [pc, #424]	; (8002314 <HAL_I2C_Init+0x274>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d802      	bhi.n	8002174 <HAL_I2C_Init+0xd4>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	e009      	b.n	8002188 <HAL_I2C_Init+0xe8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	4a69      	ldr	r2, [pc, #420]	; (8002324 <HAL_I2C_Init+0x284>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	430b      	orrs	r3, r1
 800218e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800219a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	495c      	ldr	r1, [pc, #368]	; (8002314 <HAL_I2C_Init+0x274>)
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d819      	bhi.n	80021dc <HAL_I2C_Init+0x13c>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e59      	subs	r1, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_I2C_Init+0x138>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e59      	subs	r1, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d6:	e051      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021d8:	2304      	movs	r3, #4
 80021da:	e04f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_I2C_Init+0x168>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e012      	b.n	800222e <HAL_I2C_Init+0x18e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x196>
 8002232:	2301      	movs	r3, #1
 8002234:	e022      	b.n	800227c <HAL_I2C_Init+0x1dc>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10e      	bne.n	800225c <HAL_I2C_Init+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e58      	subs	r0, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	440b      	add	r3, r1
 800224c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	e00f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6809      	ldr	r1, [r1, #0]
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6911      	ldr	r1, [r2, #16]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	000186a0 	.word	0x000186a0
 8002318:	001e847f 	.word	0x001e847f
 800231c:	003d08ff 	.word	0x003d08ff
 8002320:	431bde83 	.word	0x431bde83
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff fb3b 	bl	80019bc <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	f040 8208 	bne.w	8002766 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2319      	movs	r3, #25
 800235c:	2201      	movs	r2, #1
 800235e:	497b      	ldr	r1, [pc, #492]	; (800254c <HAL_I2C_Mem_Read+0x224>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc1d 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	e1fb      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Read+0x56>
 800237a:	2302      	movs	r3, #2
 800237c:	e1f4      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d007      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2222      	movs	r2, #34	; 0x22
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_I2C_Mem_Read+0x228>)
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e6:	88f8      	ldrh	r0, [r7, #6]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4603      	mov	r3, r0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 faea 	bl	80029d0 <I2C_RequestMemoryRead>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e1b0      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b00      	cmp	r3, #0
 800240c:	d113      	bne.n	8002436 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e184      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	2b01      	cmp	r3, #1
 800243c:	d11b      	bne.n	8002476 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e164      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	2b02      	cmp	r3, #2
 800247c:	d11b      	bne.n	80024b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	e144      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024cc:	e138      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	f200 80f1 	bhi.w	80026ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d123      	bne.n	8002528 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fc72 	bl	8002dce <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e139      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002526:	e10b      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b02      	cmp	r3, #2
 800252e:	d14e      	bne.n	80025ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	2200      	movs	r2, #0
 8002538:	4906      	ldr	r1, [pc, #24]	; (8002554 <HAL_I2C_Mem_Read+0x22c>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fb30 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e10e      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
 800254a:	bf00      	nop
 800254c:	00100002 	.word	0x00100002
 8002550:	ffff0000 	.word	0xffff0000
 8002554:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025cc:	e0b8      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	2200      	movs	r2, #0
 80025d6:	4966      	ldr	r1, [pc, #408]	; (8002770 <HAL_I2C_Mem_Read+0x448>)
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fae1 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0bf      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2200      	movs	r2, #0
 8002632:	494f      	ldr	r1, [pc, #316]	; (8002770 <HAL_I2C_Mem_Read+0x448>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fab3 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e091      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b8:	e042      	b.n	8002740 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fb85 	bl	8002dce <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e04c      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b04      	cmp	r3, #4
 800270c:	d118      	bne.n	8002740 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aec2 	bne.w	80024ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00010004 	.word	0x00010004

08002774 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff f91a 	bl	80019bc <HAL_GetTick>
 8002788:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	f040 8111 	bne.w	80029be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2319      	movs	r3, #25
 80027a2:	2201      	movs	r2, #1
 80027a4:	4988      	ldr	r1, [pc, #544]	; (80029c8 <HAL_I2C_IsDeviceReady+0x254>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f9fa 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	e104      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_I2C_IsDeviceReady+0x50>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0fd      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d007      	beq.n	80027ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2224      	movs	r2, #36	; 0x24
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a70      	ldr	r2, [pc, #448]	; (80029cc <HAL_I2C_IsDeviceReady+0x258>)
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f9b8 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002844:	d103      	bne.n	800284e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0b6      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002860:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff f8ab 	bl	80019bc <HAL_GetTick>
 8002866:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	bf0c      	ite	eq
 800288e:	2301      	moveq	r3, #1
 8002890:	2300      	movne	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002896:	e025      	b.n	80028e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7ff f890 	bl	80019bc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <HAL_I2C_IsDeviceReady+0x13a>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22a0      	movs	r2, #160	; 0xa0
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2ba0      	cmp	r3, #160	; 0xa0
 80028ee:	d005      	beq.n	80028fc <HAL_I2C_IsDeviceReady+0x188>
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <HAL_I2C_IsDeviceReady+0x188>
 80028f6:	7dbb      	ldrb	r3, [r7, #22]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0cd      	beq.n	8002898 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d129      	bne.n	8002966 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002920:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2319      	movs	r3, #25
 800293e:	2201      	movs	r2, #1
 8002940:	4921      	ldr	r1, [pc, #132]	; (80029c8 <HAL_I2C_IsDeviceReady+0x254>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f92c 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e036      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e02c      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002974:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800297e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2319      	movs	r3, #25
 8002986:	2201      	movs	r2, #1
 8002988:	490f      	ldr	r1, [pc, #60]	; (80029c8 <HAL_I2C_IsDeviceReady+0x254>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f908 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e012      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3301      	adds	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f4ff af32 	bcc.w	800280e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00100002 	.word	0x00100002
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8c2 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a30:	d103      	bne.n	8002a3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0aa      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	6a3a      	ldr	r2, [r7, #32]
 8002a52:	4952      	ldr	r1, [pc, #328]	; (8002b9c <I2C_RequestMemoryRead+0x1cc>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f8fa 	bl	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e097      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f964 	bl	8002d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e076      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aac:	893b      	ldrh	r3, [r7, #8]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	e021      	b.n	8002afc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f93e 	bl	8002d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d107      	bne.n	8002aee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e050      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af2:	893b      	ldrh	r3, [r7, #8]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f923 	bl	8002d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d107      	bne.n	8002b24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e035      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f82b 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d103      	bne.n	8002b68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e013      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b6c:	897b      	ldrh	r3, [r7, #10]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	4906      	ldr	r1, [pc, #24]	; (8002b9c <I2C_RequestMemoryRead+0x1cc>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f863 	bl	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00010002 	.word	0x00010002

08002ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	e025      	b.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d021      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7fe feff 	bl	80019bc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e023      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10d      	bne.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	e00c      	b.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d0b6      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c5c:	e051      	b.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d123      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e046      	b.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d021      	beq.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe fe7d 	bl	80019bc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d116      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e020      	b.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10c      	bne.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e00b      	b.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d18d      	bne.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d58:	e02d      	b.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f88d 	bl	8002e7a <I2C_IsAcknowledgeFailed>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e02d      	b.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d021      	beq.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fe fe23 	bl	80019bc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e007      	b.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d1ca      	bne.n	8002d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dda:	e042      	b.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d119      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0210 	mvn.w	r2, #16
 8002df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e029      	b.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe fdcd 	bl	80019bc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d1b5      	bne.n	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d11b      	bne.n	8002eca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e267      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d075      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b85      	ldr	r3, [pc, #532]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d112      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b82      	ldr	r3, [pc, #520]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1a:	d10b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	4b7e      	ldr	r3, [pc, #504]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d05b      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x108>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d157      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e242      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_OscConfig+0x74>
 8002f3e:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x98>
 8002f56:	4b70      	ldr	r3, [pc, #448]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6f      	ldr	r2, [pc, #444]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b6d      	ldr	r3, [pc, #436]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6c      	ldr	r2, [pc, #432]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0xb0>
 8002f70:	4b69      	ldr	r3, [pc, #420]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a68      	ldr	r2, [pc, #416]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fd14 	bl	80019bc <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fd10 	bl	80019bc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e207      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0xc0>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fd00 	bl	80019bc <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fcfc 	bl	80019bc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1f3      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	4b51      	ldr	r3, [pc, #324]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xe8>
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d063      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003002:	2b08      	cmp	r3, #8
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b44      	ldr	r3, [pc, #272]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x152>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1c7      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4937      	ldr	r1, [pc, #220]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	e03a      	b.n	80030b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_OscConfig+0x244>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe fcb5 	bl	80019bc <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe fcb1 	bl	80019bc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1a8      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4925      	ldr	r1, [pc, #148]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_OscConfig+0x244>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fc94 	bl	80019bc <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fc90 	bl	80019bc <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e187      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d036      	beq.n	8003130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x248>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fc74 	bl	80019bc <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fc70 	bl	80019bc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e167      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x240>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x200>
 80030f6:	e01b      	b.n	8003130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x248>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fc5d 	bl	80019bc <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e00e      	b.n	8003124 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe fc59 	bl	80019bc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d907      	bls.n	8003124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e150      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8097 	beq.w	800326c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b7d      	ldr	r3, [pc, #500]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b77      	ldr	r3, [pc, #476]	; (800334c <HAL_RCC_OscConfig+0x474>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b74      	ldr	r3, [pc, #464]	; (800334c <HAL_RCC_OscConfig+0x474>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a73      	ldr	r2, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x474>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe fc19 	bl	80019bc <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe fc15 	bl	80019bc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e10c      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_OscConfig+0x474>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2ea>
 80031b4:	4b64      	ldr	r3, [pc, #400]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a63      	ldr	r2, [pc, #396]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x324>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x30c>
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a5e      	ldr	r2, [pc, #376]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a5b      	ldr	r2, [pc, #364]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0x324>
 80031e4:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a57      	ldr	r2, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fbda 	bl	80019bc <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe fbd6 	bl	80019bc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0cb      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ee      	beq.n	800320c <HAL_RCC_OscConfig+0x334>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe fbc4 	bl	80019bc <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fbc0 	bl	80019bc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0b5      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a38      	ldr	r2, [pc, #224]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a1 	beq.w	80033b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d05c      	beq.n	800333c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d141      	bne.n	800330e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b31      	ldr	r3, [pc, #196]	; (8003350 <HAL_RCC_OscConfig+0x478>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fb94 	bl	80019bc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fb90 	bl	80019bc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e087      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	491b      	ldr	r1, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x478>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe fb69 	bl	80019bc <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fb65 	bl	80019bc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e05c      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x416>
 800330c:	e054      	b.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCC_OscConfig+0x478>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fb52 	bl	80019bc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fb4e 	bl	80019bc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e045      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x470>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x444>
 800333a:	e03d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e038      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
 8003350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x4ec>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d028      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d121      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d11a      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338c:	4293      	cmp	r3, r2
 800338e:	d111      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0cc      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d90c      	bls.n	8003404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0b8      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800341c:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a58      	ldr	r2, [pc, #352]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800343e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	494d      	ldr	r1, [pc, #308]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d044      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d119      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e07f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	2b03      	cmp	r3, #3
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e067      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4934      	ldr	r1, [pc, #208]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7fe fa80 	bl	80019bc <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe fa7c 	bl	80019bc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e04f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d20c      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e032      	b.n	8003576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4916      	ldr	r1, [pc, #88]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	490e      	ldr	r1, [pc, #56]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800354e:	f000 f821 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	490a      	ldr	r1, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	5ccb      	ldrb	r3, [r1, r3]
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe f9e0 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023c00 	.word	0x40023c00
 8003584:	40023800 	.word	0x40023800
 8003588:	08005e1c 	.word	0x08005e1c
 800358c:	20000040 	.word	0x20000040
 8003590:	20000044 	.word	0x20000044

08003594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003598:	b094      	sub	sp, #80	; 0x50
 800359a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	2300      	movs	r3, #0
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a4:	2300      	movs	r3, #0
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ac:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d00d      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x40>
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	f200 80e1 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x34>
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x3a>
 80035c6:	e0db      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c8:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035cc:	e0db      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_GetSysClockFreq+0x208>)
 80035d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d2:	e0d8      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035de:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	2200      	movs	r2, #0
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003606:	4622      	mov	r2, r4
 8003608:	462b      	mov	r3, r5
 800360a:	f04f 0000 	mov.w	r0, #0
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	0159      	lsls	r1, r3, #5
 8003614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003618:	0150      	lsls	r0, r2, #5
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4621      	mov	r1, r4
 8003620:	1a51      	subs	r1, r2, r1
 8003622:	6139      	str	r1, [r7, #16]
 8003624:	4629      	mov	r1, r5
 8003626:	eb63 0301 	sbc.w	r3, r3, r1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003638:	4659      	mov	r1, fp
 800363a:	018b      	lsls	r3, r1, #6
 800363c:	4651      	mov	r1, sl
 800363e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003642:	4651      	mov	r1, sl
 8003644:	018a      	lsls	r2, r1, #6
 8003646:	4651      	mov	r1, sl
 8003648:	ebb2 0801 	subs.w	r8, r2, r1
 800364c:	4659      	mov	r1, fp
 800364e:	eb63 0901 	sbc.w	r9, r3, r1
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800365e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003666:	4690      	mov	r8, r2
 8003668:	4699      	mov	r9, r3
 800366a:	4623      	mov	r3, r4
 800366c:	eb18 0303 	adds.w	r3, r8, r3
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	462b      	mov	r3, r5
 8003674:	eb49 0303 	adc.w	r3, r9, r3
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003686:	4629      	mov	r1, r5
 8003688:	024b      	lsls	r3, r1, #9
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003690:	4621      	mov	r1, r4
 8003692:	024a      	lsls	r2, r1, #9
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
 800369e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a4:	f7fd fa0a 	bl	8000abc <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b0:	e058      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	2200      	movs	r2, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	4611      	mov	r1, r2
 80036be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	0159      	lsls	r1, r3, #5
 80036da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036de:	0150      	lsls	r0, r2, #5
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4641      	mov	r1, r8
 80036e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ea:	4649      	mov	r1, r9
 80036ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003704:	ebb2 040a 	subs.w	r4, r2, sl
 8003708:	eb63 050b 	sbc.w	r5, r3, fp
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	464b      	mov	r3, r9
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374e:	2200      	movs	r2, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	61fa      	str	r2, [r7, #28]
 8003754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003758:	f7fd f9b0 	bl	8000abc <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4613      	mov	r3, r2
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377e:	e002      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003788:	4618      	mov	r0, r3
 800378a:	3750      	adds	r7, #80	; 0x50
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	00f42400 	.word	0x00f42400
 800379c:	007a1200 	.word	0x007a1200

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000040 	.word	0x20000040

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037bc:	f7ff fff0 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0a9b      	lsrs	r3, r3, #10
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08005e2c 	.word	0x08005e2c

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e4:	f7ff ffdc 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0b5b      	lsrs	r3, r3, #13
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	08005e2c 	.word	0x08005e2c

08003808 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e041      	b.n	800389e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fed8 	bl	80015e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fb58 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_IC_Start_IT+0x1e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e013      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_IC_Start_IT+0x2e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_IC_Start_IT+0x3e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e003      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_TIM_IC_Start_IT+0x58>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e013      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d104      	bne.n	8003910 <HAL_TIM_IC_Start_IT+0x68>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e00b      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d104      	bne.n	8003920 <HAL_TIM_IC_Start_IT+0x78>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e003      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003926:	b2db      	uxtb	r3, r3
 8003928:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003930:	7b7b      	ldrb	r3, [r7, #13]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0c2      	b.n	8003ac0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_IC_Start_IT+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003948:	e013      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_IC_Start_IT+0xb2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	e00b      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_IC_Start_IT+0xc2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003968:	e003      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xda>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003980:	e013      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xea>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	e00b      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0xfa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a0:	e003      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d841      	bhi.n	8003a34 <HAL_TIM_IC_Start_IT+0x18c>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_TIM_IC_Start_IT+0x110>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a35 	.word	0x08003a35
 80039c4:	08003a35 	.word	0x08003a35
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	08003a35 	.word	0x08003a35
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003a35 	.word	0x08003a35
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003a35 	.word	0x08003a35
 80039e8:	08003a23 	.word	0x08003a23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0202 	orr.w	r2, r2, #2
 80039fa:	60da      	str	r2, [r3, #12]
      break;
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0204 	orr.w	r2, r2, #4
 8003a0c:	60da      	str	r2, [r3, #12]
      break;
 8003a0e:	e014      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	60da      	str	r2, [r3, #12]
      break;
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0210 	orr.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d13e      	bne.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fbf5 	bl	8004238 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_TIM_IC_Start_IT+0x220>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d013      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a19      	ldr	r2, [pc, #100]	; (8003acc <HAL_TIM_IC_Start_IT+0x224>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_TIM_IC_Start_IT+0x228>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_TIM_IC_Start_IT+0x22c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_TIM_IC_Start_IT+0x230>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d010      	beq.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	e007      	b.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40014000 	.word	0x40014000

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f96a 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9ca 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9d1 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd f940 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9a0 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f9a7 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd f916 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f976 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f97d 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd f8ec 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f94c 	bl	8003ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f953 	bl	8003ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f926 	bl	8003eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb74 	bl	8004374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f918 	bl	8003ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0220 	mvn.w	r2, #32
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fb3e 	bl	8004360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e088      	b.n	8003e1c <HAL_TIM_IC_ConfigChannel+0x130>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f000 f968 	bl	8003ffc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020c 	bic.w	r2, r2, #12
 8003d3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6999      	ldr	r1, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	619a      	str	r2, [r3, #24]
 8003d4e:	e060      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d11c      	bne.n	8003d90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f000 f9b1 	bl	80040cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6999      	ldr	r1, [r3, #24]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e040      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 f9ce 	bl	8004146 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020c 	bic.w	r2, r2, #12
 8003db8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	e021      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d11c      	bne.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 f9eb 	bl	80041be <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003df6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69d9      	ldr	r1, [r3, #28]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
 8003e0c:	e001      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d831      	bhi.n	8003e9c <HAL_TIM_ReadCapturedValue+0x78>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003e9d 	.word	0x08003e9d
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e9d 	.word	0x08003e9d
 8003e58:	08003e9d 	.word	0x08003e9d
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e9d 	.word	0x08003e9d
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003e9d 	.word	0x08003e9d
 8003e70:	08003e93 	.word	0x08003e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	60fb      	str	r3, [r7, #12]

      break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	60fb      	str	r3, [r7, #12]

      break;
 8003e86:	e00a      	b.n	8003e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	60fb      	str	r3, [r7, #12]

      break;
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	60fb      	str	r3, [r7, #12]

      break;
 8003e9a:	e000      	b.n	8003e9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e9c:	bf00      	nop
  }

  return tmpreg;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a34      	ldr	r2, [pc, #208]	; (8003fe0 <TIM_Base_SetConfig+0xe4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00f      	beq.n	8003f34 <TIM_Base_SetConfig+0x38>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d00b      	beq.n	8003f34 <TIM_Base_SetConfig+0x38>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a31      	ldr	r2, [pc, #196]	; (8003fe4 <TIM_Base_SetConfig+0xe8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_Base_SetConfig+0x38>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a30      	ldr	r2, [pc, #192]	; (8003fe8 <TIM_Base_SetConfig+0xec>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0x38>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <TIM_Base_SetConfig+0xf0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d108      	bne.n	8003f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <TIM_Base_SetConfig+0xe4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01b      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d017      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <TIM_Base_SetConfig+0xe8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <TIM_Base_SetConfig+0xec>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00f      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a20      	ldr	r2, [pc, #128]	; (8003fec <TIM_Base_SetConfig+0xf0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <TIM_Base_SetConfig+0xf4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <TIM_Base_SetConfig+0xf8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <TIM_Base_SetConfig+0xfc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <TIM_Base_SetConfig+0xe4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800

08003ffc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <TIM_TI1_SetConfig+0xbc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_TI1_SetConfig+0x56>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d00f      	beq.n	8004052 <TIM_TI1_SetConfig+0x56>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a21      	ldr	r2, [pc, #132]	; (80040bc <TIM_TI1_SetConfig+0xc0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_TI1_SetConfig+0x56>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <TIM_TI1_SetConfig+0xc4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_TI1_SetConfig+0x56>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <TIM_TI1_SetConfig+0xc8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_TI1_SetConfig+0x56>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <TIM_TI1_SetConfig+0xcc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <TIM_TI1_SetConfig+0x5a>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <TIM_TI1_SetConfig+0x5c>
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e003      	b.n	8004076 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	b2db      	uxtb	r3, r3
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f023 030a 	bic.w	r3, r3, #10
 8004090:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 030a 	and.w	r3, r3, #10
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40014000 	.word	0x40014000

080040cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800410a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	031b      	lsls	r3, r3, #12
 8004110:	b29b      	uxth	r3, r3
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	b2db      	uxtb	r3, r3
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004196:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	b29b      	uxth	r3, r3
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	031b      	lsls	r3, r3, #12
 8004216:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2201      	movs	r2, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	43db      	mvns	r3, r3
 800425a:	401a      	ands	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004298:	2302      	movs	r3, #2
 800429a:	e050      	b.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d013      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000

08004360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e03f      	b.n	800441a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f968 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fde5 	bl	8004f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08a      	sub	sp, #40	; 0x28
 8004426:	af02      	add	r7, sp, #8
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	d17c      	bne.n	800453c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_Transmit+0x2c>
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e075      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UART_Transmit+0x3e>
 800445c:	2302      	movs	r3, #2
 800445e:	e06e      	b.n	800453e <HAL_UART_Transmit+0x11c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2221      	movs	r2, #33	; 0x21
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004476:	f7fd faa1 	bl	80019bc <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d108      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e003      	b.n	80044ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b4:	e02a      	b.n	800450c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fb29 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e036      	b.n	800453e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3302      	adds	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e007      	b.n	80044fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cf      	bne.n	80044b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 faf9 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	4613      	mov	r3, r2
 8004552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b20      	cmp	r3, #32
 800455e:	d11d      	bne.n	800459c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Receive_IT+0x26>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e016      	b.n	800459e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_UART_Receive_IT+0x38>
 800457a:	2302      	movs	r3, #2
 800457c:	e00f      	b.n	800459e <HAL_UART_Receive_IT+0x58>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	461a      	mov	r2, r3
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fb2e 	bl	8004bf4 <UART_Start_Receive_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	e000      	b.n	800459e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b0ba      	sub	sp, #232	; 0xe8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_UART_IRQHandler+0x66>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fc0d 	bl	8004e26 <UART_Receive_IT>
      return;
 800460c:	e256      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800460e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80de 	beq.w	80047d4 <HAL_UART_IRQHandler+0x22c>
 8004618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80d1 	beq.w	80047d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <HAL_UART_IRQHandler+0xae>
 800463e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_UART_IRQHandler+0xd2>
 8004662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0202 	orr.w	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0xf6>
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <HAL_UART_IRQHandler+0x126>
 80046aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f043 0208 	orr.w	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 81ed 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_UART_IRQHandler+0x14e>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb98 	bl	8004e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <HAL_UART_IRQHandler+0x17a>
 800471a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04f      	beq.n	80047c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 faa0 	bl	8004c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d141      	bne.n	80047ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3314      	adds	r3, #20
 800473c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800474c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800476e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800477a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1d9      	bne.n	8004736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	4a7d      	ldr	r2, [pc, #500]	; (8004984 <HAL_UART_IRQHandler+0x3dc>)
 8004790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd fac1 	bl	8001d1e <HAL_DMA_Abort_IT>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e00e      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f99a 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e00a      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f996 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e006      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f992 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ce:	e170      	b.n	8004ab2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	bf00      	nop
    return;
 80047d2:	e16e      	b.n	8004ab2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 814a 	bne.w	8004a72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8143 	beq.w	8004a72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 813c 	beq.w	8004a72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	f040 80b4 	bne.w	8004988 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800482c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8140 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800483a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483e:	429a      	cmp	r2, r3
 8004840:	f080 8139 	bcs.w	8004ab6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800484a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	f000 8088 	beq.w	800496a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800489e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1d9      	bne.n	800485a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e1      	bne.n	80048a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800490c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e3      	bne.n	80048e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800494c:	65ba      	str	r2, [r7, #88]	; 0x58
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e3      	bne.n	8004928 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd f96a 	bl	8001c3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004972:	b29b      	uxth	r3, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8c0 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004980:	e099      	b.n	8004ab6 <HAL_UART_IRQHandler+0x50e>
 8004982:	bf00      	nop
 8004984:	08004d2f 	.word	0x08004d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 808b 	beq.w	8004aba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8086 	beq.w	8004aba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049d2:	647a      	str	r2, [r7, #68]	; 0x44
 80049d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	623b      	str	r3, [r7, #32]
   return(result);
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e3      	bne.n	80049e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a50:	61fa      	str	r2, [r7, #28]
 8004a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e3      	bne.n	8004a2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f848 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a70:	e023      	b.n	8004aba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_UART_IRQHandler+0x4ea>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f963 	bl	8004d56 <UART_Transmit_IT>
    return;
 8004a90:	e014      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <HAL_UART_IRQHandler+0x514>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9a3 	bl	8004df6 <UART_EndTransmit_IT>
    return;
 8004ab0:	e004      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
    return;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
      return;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
      return;
 8004aba:	bf00      	nop
  }
}
 8004abc:	37e8      	adds	r7, #232	; 0xe8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop

08004ac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b090      	sub	sp, #64	; 0x40
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b28:	e050      	b.n	8004bcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d04c      	beq.n	8004bcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b38:	f7fc ff40 	bl	80019bc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d241      	bcs.n	8004bcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b68:	637a      	str	r2, [r7, #52]	; 0x34
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9c:	623a      	str	r2, [r7, #32]
 8004b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	6a3a      	ldr	r2, [r7, #32]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e00f      	b.n	8004bec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d09f      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3740      	adds	r7, #64	; 0x40
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2222      	movs	r2, #34	; 0x22
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0220 	orr.w	r2, r2, #32
 8004c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b095      	sub	sp, #84	; 0x54
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c90:	643a      	str	r2, [r7, #64]	; 0x40
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d119      	bne.n	8004d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d00:	61ba      	str	r2, [r7, #24]
 8004d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d22:	bf00      	nop
 8004d24:	3754      	adds	r7, #84	; 0x54
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff fecf 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b21      	cmp	r3, #33	; 0x21
 8004d68:	d13e      	bne.n	8004de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	d114      	bne.n	8004d9e <UART_Transmit_IT+0x48>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d110      	bne.n	8004d9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]
 8004d9c:	e008      	b.n	8004db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6211      	str	r1, [r2, #32]
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fe54 	bl	8004ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b08c      	sub	sp, #48	; 0x30
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b22      	cmp	r3, #34	; 0x22
 8004e38:	f040 80ab 	bne.w	8004f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e44:	d117      	bne.n	8004e76 <UART_Receive_IT+0x50>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	1c9a      	adds	r2, r3, #2
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
 8004e74:	e026      	b.n	8004ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d007      	beq.n	8004e9a <UART_Receive_IT+0x74>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <UART_Receive_IT+0x82>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e008      	b.n	8004eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d15a      	bne.n	8004f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0220 	bic.w	r2, r2, #32
 8004ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d135      	bne.n	8004f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f023 0310 	bic.w	r3, r3, #16
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	623a      	str	r2, [r7, #32]
 8004f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	69f9      	ldr	r1, [r7, #28]
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d10a      	bne.n	8004f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fdbf 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
 8004f82:	e002      	b.n	8004f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fda7 	bl	8004ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e002      	b.n	8004f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e000      	b.n	8004f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3730      	adds	r7, #48	; 0x30
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa0:	b0c0      	sub	sp, #256	; 0x100
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	ea40 0301 	orr.w	r3, r0, r1
 8004fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ff4:	f021 010c 	bic.w	r1, r1, #12
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005002:	430b      	orrs	r3, r1
 8005004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	6999      	ldr	r1, [r3, #24]
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	ea40 0301 	orr.w	r3, r0, r1
 8005022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b8f      	ldr	r3, [pc, #572]	; (8005268 <UART_SetConfig+0x2cc>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d005      	beq.n	800503c <UART_SetConfig+0xa0>
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b8d      	ldr	r3, [pc, #564]	; (800526c <UART_SetConfig+0x2d0>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d104      	bne.n	8005046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fe fbd0 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8005040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005044:	e003      	b.n	800504e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005046:	f7fe fbb7 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 800504a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	f040 810c 	bne.w	8005274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800505c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005060:	2200      	movs	r2, #0
 8005062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800506a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	1891      	adds	r1, r2, r2
 8005074:	65b9      	str	r1, [r7, #88]	; 0x58
 8005076:	415b      	adcs	r3, r3
 8005078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800507e:	4621      	mov	r1, r4
 8005080:	eb12 0801 	adds.w	r8, r2, r1
 8005084:	4629      	mov	r1, r5
 8005086:	eb43 0901 	adc.w	r9, r3, r1
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800509e:	4690      	mov	r8, r2
 80050a0:	4699      	mov	r9, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	eb18 0303 	adds.w	r3, r8, r3
 80050a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050ac:	462b      	mov	r3, r5
 80050ae:	eb49 0303 	adc.w	r3, r9, r3
 80050b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050ca:	460b      	mov	r3, r1
 80050cc:	18db      	adds	r3, r3, r3
 80050ce:	653b      	str	r3, [r7, #80]	; 0x50
 80050d0:	4613      	mov	r3, r2
 80050d2:	eb42 0303 	adc.w	r3, r2, r3
 80050d6:	657b      	str	r3, [r7, #84]	; 0x54
 80050d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050e0:	f7fb fcec 	bl	8000abc <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b61      	ldr	r3, [pc, #388]	; (8005270 <UART_SetConfig+0x2d4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	011c      	lsls	r4, r3, #4
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	64b9      	str	r1, [r7, #72]	; 0x48
 800510c:	415b      	adcs	r3, r3
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005114:	4641      	mov	r1, r8
 8005116:	eb12 0a01 	adds.w	sl, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0b01 	adc.w	fp, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800512c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005134:	4692      	mov	sl, r2
 8005136:	469b      	mov	fp, r3
 8005138:	4643      	mov	r3, r8
 800513a:	eb1a 0303 	adds.w	r3, sl, r3
 800513e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005142:	464b      	mov	r3, r9
 8005144:	eb4b 0303 	adc.w	r3, fp, r3
 8005148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800515c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005160:	460b      	mov	r3, r1
 8005162:	18db      	adds	r3, r3, r3
 8005164:	643b      	str	r3, [r7, #64]	; 0x40
 8005166:	4613      	mov	r3, r2
 8005168:	eb42 0303 	adc.w	r3, r2, r3
 800516c:	647b      	str	r3, [r7, #68]	; 0x44
 800516e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005176:	f7fb fca1 	bl	8000abc <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4611      	mov	r1, r2
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <UART_SetConfig+0x2d4>)
 8005182:	fba3 2301 	umull	r2, r3, r3, r1
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2264      	movs	r2, #100	; 0x64
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	1acb      	subs	r3, r1, r3
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <UART_SetConfig+0x2d4>)
 8005198:	fba3 2302 	umull	r2, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051a4:	441c      	add	r4, r3
 80051a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	63b9      	str	r1, [r7, #56]	; 0x38
 80051c0:	415b      	adcs	r3, r3
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6339      	str	r1, [r7, #48]	; 0x30
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051fc:	464b      	mov	r3, r9
 80051fe:	460a      	mov	r2, r1
 8005200:	eb42 0303 	adc.w	r3, r2, r3
 8005204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800521c:	460b      	mov	r3, r1
 800521e:	18db      	adds	r3, r3, r3
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	4613      	mov	r3, r2
 8005224:	eb42 0303 	adc.w	r3, r2, r3
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800522a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800522e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005232:	f7fb fc43 	bl	8000abc <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <UART_SetConfig+0x2d4>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	; 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	3332      	adds	r3, #50	; 0x32
 800524e:	4a08      	ldr	r2, [pc, #32]	; (8005270 <UART_SetConfig+0x2d4>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 0207 	and.w	r2, r3, #7
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4422      	add	r2, r4
 8005262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005264:	e105      	b.n	8005472 <UART_SetConfig+0x4d6>
 8005266:	bf00      	nop
 8005268:	40011000 	.word	0x40011000
 800526c:	40011400 	.word	0x40011400
 8005270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800527e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005286:	4642      	mov	r2, r8
 8005288:	464b      	mov	r3, r9
 800528a:	1891      	adds	r1, r2, r2
 800528c:	6239      	str	r1, [r7, #32]
 800528e:	415b      	adcs	r3, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005296:	4641      	mov	r1, r8
 8005298:	1854      	adds	r4, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb43 0501 	adc.w	r5, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	00eb      	lsls	r3, r5, #3
 80052aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ae:	00e2      	lsls	r2, r4, #3
 80052b0:	4614      	mov	r4, r2
 80052b2:	461d      	mov	r5, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	18e3      	adds	r3, r4, r3
 80052b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052bc:	464b      	mov	r3, r9
 80052be:	eb45 0303 	adc.w	r3, r5, r3
 80052c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052e2:	4629      	mov	r1, r5
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	4621      	mov	r1, r4
 80052e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ec:	4621      	mov	r1, r4
 80052ee:	008a      	lsls	r2, r1, #2
 80052f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052f4:	f7fb fbe2 	bl	8000abc <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b60      	ldr	r3, [pc, #384]	; (8005480 <UART_SetConfig+0x4e4>)
 80052fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	011c      	lsls	r4, r3, #4
 8005306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	61b9      	str	r1, [r7, #24]
 8005320:	415b      	adcs	r3, r3
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	6139      	str	r1, [r7, #16]
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800535c:	464b      	mov	r3, r9
 800535e:	460a      	mov	r2, r1
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	67bb      	str	r3, [r7, #120]	; 0x78
 8005372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005380:	4649      	mov	r1, r9
 8005382:	008b      	lsls	r3, r1, #2
 8005384:	4641      	mov	r1, r8
 8005386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538a:	4641      	mov	r1, r8
 800538c:	008a      	lsls	r2, r1, #2
 800538e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005392:	f7fb fb93 	bl	8000abc <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4b39      	ldr	r3, [pc, #228]	; (8005480 <UART_SetConfig+0x4e4>)
 800539c:	fba3 1302 	umull	r1, r3, r3, r2
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	3332      	adds	r3, #50	; 0x32
 80053ae:	4a34      	ldr	r2, [pc, #208]	; (8005480 <UART_SetConfig+0x4e4>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ba:	441c      	add	r4, r3
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	673b      	str	r3, [r7, #112]	; 0x70
 80053c4:	677a      	str	r2, [r7, #116]	; 0x74
 80053c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053ca:	4642      	mov	r2, r8
 80053cc:	464b      	mov	r3, r9
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	415b      	adcs	r3, r3
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053da:	4641      	mov	r1, r8
 80053dc:	1851      	adds	r1, r2, r1
 80053de:	6039      	str	r1, [r7, #0]
 80053e0:	4649      	mov	r1, r9
 80053e2:	414b      	adcs	r3, r1
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053f2:	4659      	mov	r1, fp
 80053f4:	00cb      	lsls	r3, r1, #3
 80053f6:	4651      	mov	r1, sl
 80053f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053fc:	4651      	mov	r1, sl
 80053fe:	00ca      	lsls	r2, r1, #3
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	4603      	mov	r3, r0
 8005406:	4642      	mov	r2, r8
 8005408:	189b      	adds	r3, r3, r2
 800540a:	66bb      	str	r3, [r7, #104]	; 0x68
 800540c:	464b      	mov	r3, r9
 800540e:	460a      	mov	r2, r1
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	663b      	str	r3, [r7, #96]	; 0x60
 8005420:	667a      	str	r2, [r7, #100]	; 0x64
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800542e:	4649      	mov	r1, r9
 8005430:	008b      	lsls	r3, r1, #2
 8005432:	4641      	mov	r1, r8
 8005434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005438:	4641      	mov	r1, r8
 800543a:	008a      	lsls	r2, r1, #2
 800543c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005440:	f7fb fb3c 	bl	8000abc <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <UART_SetConfig+0x4e4>)
 800544a:	fba3 1302 	umull	r1, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	; 0x32
 800545c:	4a08      	ldr	r2, [pc, #32]	; (8005480 <UART_SetConfig+0x4e4>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 020f 	and.w	r2, r3, #15
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4422      	add	r2, r4
 8005470:	609a      	str	r2, [r3, #8]
}
 8005472:	bf00      	nop
 8005474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005478:	46bd      	mov	sp, r7
 800547a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547e:	bf00      	nop
 8005480:	51eb851f 	.word	0x51eb851f

08005484 <__errno>:
 8005484:	4b01      	ldr	r3, [pc, #4]	; (800548c <__errno+0x8>)
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	2000004c 	.word	0x2000004c

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	; (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	; (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	; (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 fc8e 	bl	8005dc4 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08005e70 	.word	0x08005e70
 80054cc:	08005e70 	.word	0x08005e70
 80054d0:	08005e70 	.word	0x08005e70
 80054d4:	08005e74 	.word	0x08005e74

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <siprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b500      	push	{lr}
 80054ec:	b09c      	sub	sp, #112	; 0x70
 80054ee:	ab1d      	add	r3, sp, #116	; 0x74
 80054f0:	9002      	str	r0, [sp, #8]
 80054f2:	9006      	str	r0, [sp, #24]
 80054f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054f8:	4809      	ldr	r0, [pc, #36]	; (8005520 <siprintf+0x38>)
 80054fa:	9107      	str	r1, [sp, #28]
 80054fc:	9104      	str	r1, [sp, #16]
 80054fe:	4909      	ldr	r1, [pc, #36]	; (8005524 <siprintf+0x3c>)
 8005500:	f853 2b04 	ldr.w	r2, [r3], #4
 8005504:	9105      	str	r1, [sp, #20]
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	a902      	add	r1, sp, #8
 800550c:	f000 f868 	bl	80055e0 <_svfiprintf_r>
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	b01c      	add	sp, #112	; 0x70
 8005518:	f85d eb04 	ldr.w	lr, [sp], #4
 800551c:	b003      	add	sp, #12
 800551e:	4770      	bx	lr
 8005520:	2000004c 	.word	0x2000004c
 8005524:	ffff0208 	.word	0xffff0208

08005528 <__ssputs_r>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	688e      	ldr	r6, [r1, #8]
 800552e:	429e      	cmp	r6, r3
 8005530:	4682      	mov	sl, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4690      	mov	r8, r2
 8005536:	461f      	mov	r7, r3
 8005538:	d838      	bhi.n	80055ac <__ssputs_r+0x84>
 800553a:	898a      	ldrh	r2, [r1, #12]
 800553c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005540:	d032      	beq.n	80055a8 <__ssputs_r+0x80>
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	6909      	ldr	r1, [r1, #16]
 8005546:	eba5 0901 	sub.w	r9, r5, r1
 800554a:	6965      	ldr	r5, [r4, #20]
 800554c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005554:	3301      	adds	r3, #1
 8005556:	444b      	add	r3, r9
 8005558:	106d      	asrs	r5, r5, #1
 800555a:	429d      	cmp	r5, r3
 800555c:	bf38      	it	cc
 800555e:	461d      	movcc	r5, r3
 8005560:	0553      	lsls	r3, r2, #21
 8005562:	d531      	bpl.n	80055c8 <__ssputs_r+0xa0>
 8005564:	4629      	mov	r1, r5
 8005566:	f000 fb63 	bl	8005c30 <_malloc_r>
 800556a:	4606      	mov	r6, r0
 800556c:	b950      	cbnz	r0, 8005584 <__ssputs_r+0x5c>
 800556e:	230c      	movs	r3, #12
 8005570:	f8ca 3000 	str.w	r3, [sl]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	6921      	ldr	r1, [r4, #16]
 8005586:	464a      	mov	r2, r9
 8005588:	f000 fabe 	bl	8005b08 <memcpy>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	6126      	str	r6, [r4, #16]
 800559a:	6165      	str	r5, [r4, #20]
 800559c:	444e      	add	r6, r9
 800559e:	eba5 0509 	sub.w	r5, r5, r9
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	463e      	mov	r6, r7
 80055a8:	42be      	cmp	r6, r7
 80055aa:	d900      	bls.n	80055ae <__ssputs_r+0x86>
 80055ac:	463e      	mov	r6, r7
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	4632      	mov	r2, r6
 80055b2:	4641      	mov	r1, r8
 80055b4:	f000 fab6 	bl	8005b24 <memmove>
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	1b9b      	subs	r3, r3, r6
 80055bc:	60a3      	str	r3, [r4, #8]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	4433      	add	r3, r6
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e7db      	b.n	8005580 <__ssputs_r+0x58>
 80055c8:	462a      	mov	r2, r5
 80055ca:	f000 fba5 	bl	8005d18 <_realloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e1      	bne.n	8005598 <__ssputs_r+0x70>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	4650      	mov	r0, sl
 80055d8:	f000 fabe 	bl	8005b58 <_free_r>
 80055dc:	e7c7      	b.n	800556e <__ssputs_r+0x46>
	...

080055e0 <_svfiprintf_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4698      	mov	r8, r3
 80055e6:	898b      	ldrh	r3, [r1, #12]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4607      	mov	r7, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	d50e      	bpl.n	8005612 <_svfiprintf_r+0x32>
 80055f4:	690b      	ldr	r3, [r1, #16]
 80055f6:	b963      	cbnz	r3, 8005612 <_svfiprintf_r+0x32>
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	f000 fb19 	bl	8005c30 <_malloc_r>
 80055fe:	6028      	str	r0, [r5, #0]
 8005600:	6128      	str	r0, [r5, #16]
 8005602:	b920      	cbnz	r0, 800560e <_svfiprintf_r+0x2e>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e0d1      	b.n	80057b2 <_svfiprintf_r+0x1d2>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	616b      	str	r3, [r5, #20]
 8005612:	2300      	movs	r3, #0
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	2320      	movs	r3, #32
 8005618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005620:	2330      	movs	r3, #48	; 0x30
 8005622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057cc <_svfiprintf_r+0x1ec>
 8005626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	4623      	mov	r3, r4
 8005630:	469a      	mov	sl, r3
 8005632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005636:	b10a      	cbz	r2, 800563c <_svfiprintf_r+0x5c>
 8005638:	2a25      	cmp	r2, #37	; 0x25
 800563a:	d1f9      	bne.n	8005630 <_svfiprintf_r+0x50>
 800563c:	ebba 0b04 	subs.w	fp, sl, r4
 8005640:	d00b      	beq.n	800565a <_svfiprintf_r+0x7a>
 8005642:	465b      	mov	r3, fp
 8005644:	4622      	mov	r2, r4
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ff6d 	bl	8005528 <__ssputs_r>
 800564e:	3001      	adds	r0, #1
 8005650:	f000 80aa 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005656:	445a      	add	r2, fp
 8005658:	9209      	str	r2, [sp, #36]	; 0x24
 800565a:	f89a 3000 	ldrb.w	r3, [sl]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80a2 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005664:	2300      	movs	r3, #0
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566e:	f10a 0a01 	add.w	sl, sl, #1
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	9307      	str	r3, [sp, #28]
 8005676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567a:	931a      	str	r3, [sp, #104]	; 0x68
 800567c:	4654      	mov	r4, sl
 800567e:	2205      	movs	r2, #5
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4851      	ldr	r0, [pc, #324]	; (80057cc <_svfiprintf_r+0x1ec>)
 8005686:	f7fa fdb3 	bl	80001f0 <memchr>
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	b9d8      	cbnz	r0, 80056c6 <_svfiprintf_r+0xe6>
 800568e:	06d0      	lsls	r0, r2, #27
 8005690:	bf44      	itt	mi
 8005692:	2320      	movmi	r3, #32
 8005694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005698:	0711      	lsls	r1, r2, #28
 800569a:	bf44      	itt	mi
 800569c:	232b      	movmi	r3, #43	; 0x2b
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a2:	f89a 3000 	ldrb.w	r3, [sl]
 80056a6:	2b2a      	cmp	r3, #42	; 0x2a
 80056a8:	d015      	beq.n	80056d6 <_svfiprintf_r+0xf6>
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	4654      	mov	r4, sl
 80056ae:	2000      	movs	r0, #0
 80056b0:	f04f 0c0a 	mov.w	ip, #10
 80056b4:	4621      	mov	r1, r4
 80056b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ba:	3b30      	subs	r3, #48	; 0x30
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d94e      	bls.n	800575e <_svfiprintf_r+0x17e>
 80056c0:	b1b0      	cbz	r0, 80056f0 <_svfiprintf_r+0x110>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e014      	b.n	80056f0 <_svfiprintf_r+0x110>
 80056c6:	eba0 0308 	sub.w	r3, r0, r8
 80056ca:	fa09 f303 	lsl.w	r3, r9, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	46a2      	mov	sl, r4
 80056d4:	e7d2      	b.n	800567c <_svfiprintf_r+0x9c>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	9103      	str	r1, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfbb      	ittet	lt
 80056e2:	425b      	neglt	r3, r3
 80056e4:	f042 0202 	orrlt.w	r2, r2, #2
 80056e8:	9307      	strge	r3, [sp, #28]
 80056ea:	9307      	strlt	r3, [sp, #28]
 80056ec:	bfb8      	it	lt
 80056ee:	9204      	strlt	r2, [sp, #16]
 80056f0:	7823      	ldrb	r3, [r4, #0]
 80056f2:	2b2e      	cmp	r3, #46	; 0x2e
 80056f4:	d10c      	bne.n	8005710 <_svfiprintf_r+0x130>
 80056f6:	7863      	ldrb	r3, [r4, #1]
 80056f8:	2b2a      	cmp	r3, #42	; 0x2a
 80056fa:	d135      	bne.n	8005768 <_svfiprintf_r+0x188>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9203      	str	r2, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfb8      	it	lt
 8005708:	f04f 33ff 	movlt.w	r3, #4294967295
 800570c:	3402      	adds	r4, #2
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057dc <_svfiprintf_r+0x1fc>
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	2203      	movs	r2, #3
 8005718:	4650      	mov	r0, sl
 800571a:	f7fa fd69 	bl	80001f0 <memchr>
 800571e:	b140      	cbz	r0, 8005732 <_svfiprintf_r+0x152>
 8005720:	2340      	movs	r3, #64	; 0x40
 8005722:	eba0 000a 	sub.w	r0, r0, sl
 8005726:	fa03 f000 	lsl.w	r0, r3, r0
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	4303      	orrs	r3, r0
 800572e:	3401      	adds	r4, #1
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4826      	ldr	r0, [pc, #152]	; (80057d0 <_svfiprintf_r+0x1f0>)
 8005738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573c:	2206      	movs	r2, #6
 800573e:	f7fa fd57 	bl	80001f0 <memchr>
 8005742:	2800      	cmp	r0, #0
 8005744:	d038      	beq.n	80057b8 <_svfiprintf_r+0x1d8>
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <_svfiprintf_r+0x1f4>)
 8005748:	bb1b      	cbnz	r3, 8005792 <_svfiprintf_r+0x1b2>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3307      	adds	r3, #7
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	3308      	adds	r3, #8
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	4433      	add	r3, r6
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	e767      	b.n	800562e <_svfiprintf_r+0x4e>
 800575e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005762:	460c      	mov	r4, r1
 8005764:	2001      	movs	r0, #1
 8005766:	e7a5      	b.n	80056b4 <_svfiprintf_r+0xd4>
 8005768:	2300      	movs	r3, #0
 800576a:	3401      	adds	r4, #1
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 0c0a 	mov.w	ip, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577a:	3a30      	subs	r2, #48	; 0x30
 800577c:	2a09      	cmp	r2, #9
 800577e:	d903      	bls.n	8005788 <_svfiprintf_r+0x1a8>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0c5      	beq.n	8005710 <_svfiprintf_r+0x130>
 8005784:	9105      	str	r1, [sp, #20]
 8005786:	e7c3      	b.n	8005710 <_svfiprintf_r+0x130>
 8005788:	fb0c 2101 	mla	r1, ip, r1, r2
 800578c:	4604      	mov	r4, r0
 800578e:	2301      	movs	r3, #1
 8005790:	e7f0      	b.n	8005774 <_svfiprintf_r+0x194>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_svfiprintf_r+0x1f8>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4638      	mov	r0, r7
 800579e:	f3af 8000 	nop.w
 80057a2:	1c42      	adds	r2, r0, #1
 80057a4:	4606      	mov	r6, r0
 80057a6:	d1d6      	bne.n	8005756 <_svfiprintf_r+0x176>
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	065b      	lsls	r3, r3, #25
 80057ac:	f53f af2c 	bmi.w	8005608 <_svfiprintf_r+0x28>
 80057b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b2:	b01d      	add	sp, #116	; 0x74
 80057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	462a      	mov	r2, r5
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_svfiprintf_r+0x1f8>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4638      	mov	r0, r7
 80057c4:	f000 f87a 	bl	80058bc <_printf_i>
 80057c8:	e7eb      	b.n	80057a2 <_svfiprintf_r+0x1c2>
 80057ca:	bf00      	nop
 80057cc:	08005e34 	.word	0x08005e34
 80057d0:	08005e3e 	.word	0x08005e3e
 80057d4:	00000000 	.word	0x00000000
 80057d8:	08005529 	.word	0x08005529
 80057dc:	08005e3a 	.word	0x08005e3a

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4699      	mov	r9, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bfb8      	it	lt
 80057f4:	4613      	movlt	r3, r2
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057fc:	4607      	mov	r7, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc26      	bgt.n	8005876 <_printf_common+0x96>
 8005828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800582c:	1e13      	subs	r3, r2, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d42b      	bmi.n	8005890 <_printf_common+0xb0>
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	4649      	mov	r1, r9
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d01e      	beq.n	8005884 <_printf_common+0xa4>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	68e5      	ldr	r5, [r4, #12]
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	f003 0306 	and.w	r3, r3, #6
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf08      	it	eq
 8005854:	1aad      	subeq	r5, r5, r2
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	bf0c      	ite	eq
 800585c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005860:	2500      	movne	r5, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfc4      	itt	gt
 8005866:	1a9b      	subgt	r3, r3, r2
 8005868:	18ed      	addgt	r5, r5, r3
 800586a:	2600      	movs	r6, #0
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xc8>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xa8>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xac>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c6      	b.n	800581e <_printf_common+0x3e>
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	2030      	movs	r0, #48	; 0x30
 8005896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589a:	4422      	add	r2, r4
 800589c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a4:	3302      	adds	r3, #2
 80058a6:	e7c7      	b.n	8005838 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa4>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x8e>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	7e0f      	ldrb	r7, [r1, #24]
 80058c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058c4:	2f78      	cmp	r7, #120	; 0x78
 80058c6:	4691      	mov	r9, r2
 80058c8:	4680      	mov	r8, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	469a      	mov	sl, r3
 80058ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d8 	beq.w	8005a8e <_printf_i+0x1d2>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a3 	beq.w	8005a2a <_printf_i+0x16e>
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a101      	add	r1, pc, #4	; (adr r1, 80058fc <_printf_i+0x40>)
 80058f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a75 	.word	0x08005a75
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a57 	.word	0x08005a57
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a97 	.word	0x08005a97
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a5f 	.word	0x08005a5f
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a3      	b.n	8005ab0 <_printf_i+0x1f4>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	6829      	ldr	r1, [r5, #0]
 800596c:	0606      	lsls	r6, r0, #24
 800596e:	f101 0304 	add.w	r3, r1, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	2e00      	cmp	r6, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	4276      	negs	r6, r6
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005986:	230a      	movs	r3, #10
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	680e      	ldr	r6, [r1, #0]
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005992:	bf18      	it	ne
 8005994:	b236      	sxthne	r6, r6
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	6029      	str	r1, [r5, #0]
 80059a0:	0601      	lsls	r1, r0, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681e      	ldr	r6, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0646      	lsls	r6, r0, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881e      	ldrh	r6, [r3, #0]
 80059ae:	4854      	ldr	r0, [pc, #336]	; (8005b00 <_printf_i+0x244>)
 80059b0:	2f6f      	cmp	r7, #111	; 0x6f
 80059b2:	bf0c      	ite	eq
 80059b4:	2308      	moveq	r3, #8
 80059b6:	230a      	movne	r3, #10
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6865      	ldr	r5, [r4, #4]
 80059c0:	60a5      	str	r5, [r4, #8]
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90e      	cbnz	r6, 80059d4 <_printf_i+0x118>
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d04d      	beq.n	8005a70 <_printf_i+0x1b4>
 80059d4:	4615      	mov	r5, r2
 80059d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059da:	fb03 6711 	mls	r7, r3, r1, r6
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059e4:	4637      	mov	r7, r6
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460e      	mov	r6, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x11a>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x14c>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07de      	lsls	r6, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x14c>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	; 0x30
 8005a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a08:	1b52      	subs	r2, r2, r5
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee2 	bl	80057e0 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14c      	bne.n	8005aba <_printf_i+0x1fe>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	4835      	ldr	r0, [pc, #212]	; (8005b00 <_printf_i+0x244>)
 8005a2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a38:	6029      	str	r1, [r5, #0]
 8005a3a:	061d      	lsls	r5, r3, #24
 8005a3c:	d514      	bpl.n	8005a68 <_printf_i+0x1ac>
 8005a3e:	07df      	lsls	r7, r3, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f043 0320 	orrmi.w	r3, r3, #32
 8005a46:	6023      	strmi	r3, [r4, #0]
 8005a48:	b91e      	cbnz	r6, 8005a52 <_printf_i+0x196>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2310      	movs	r3, #16
 8005a54:	e7b0      	b.n	80059b8 <_printf_i+0xfc>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2378      	movs	r3, #120	; 0x78
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	e7e3      	b.n	8005a30 <_printf_i+0x174>
 8005a68:	0659      	lsls	r1, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2b6      	uxthmi	r6, r6
 8005a6e:	e7e6      	b.n	8005a3e <_printf_i+0x182>
 8005a70:	4615      	mov	r5, r2
 8005a72:	e7bb      	b.n	80059ec <_printf_i+0x130>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6826      	ldr	r6, [r4, #0]
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	1d18      	adds	r0, r3, #4
 8005a7c:	6028      	str	r0, [r5, #0]
 8005a7e:	0635      	lsls	r5, r6, #24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0x1cc>
 8005a84:	6019      	str	r1, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <_printf_i+0x1d2>
 8005a88:	0670      	lsls	r0, r6, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0x1c8>
 8005a8c:	8019      	strh	r1, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	4615      	mov	r5, r2
 8005a94:	e7ba      	b.n	8005a0c <_printf_i+0x150>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7fa fba4 	bl	80001f0 <memchr>
 8005aa8:	b108      	cbz	r0, 8005aae <_printf_i+0x1f2>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	e7a8      	b.n	8005a0c <_printf_i+0x150>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ab      	beq.n	8005a20 <_printf_i+0x164>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d413      	bmi.n	8005af6 <_printf_i+0x23a>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	bfb8      	it	lt
 8005ad6:	4618      	movlt	r0, r3
 8005ad8:	e7a4      	b.n	8005a24 <_printf_i+0x168>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4632      	mov	r2, r6
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09b      	beq.n	8005a20 <_printf_i+0x164>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9903      	ldr	r1, [sp, #12]
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf2      	bgt.n	8005ada <_printf_i+0x21e>
 8005af4:	e7eb      	b.n	8005ace <_printf_i+0x212>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f104 0619 	add.w	r6, r4, #25
 8005afc:	e7f5      	b.n	8005aea <_printf_i+0x22e>
 8005afe:	bf00      	nop
 8005b00:	08005e45 	.word	0x08005e45
 8005b04:	08005e56 	.word	0x08005e56

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memmove>:
 8005b24:	4288      	cmp	r0, r1
 8005b26:	b510      	push	{r4, lr}
 8005b28:	eb01 0402 	add.w	r4, r1, r2
 8005b2c:	d902      	bls.n	8005b34 <memmove+0x10>
 8005b2e:	4284      	cmp	r4, r0
 8005b30:	4623      	mov	r3, r4
 8005b32:	d807      	bhi.n	8005b44 <memmove+0x20>
 8005b34:	1e43      	subs	r3, r0, #1
 8005b36:	42a1      	cmp	r1, r4
 8005b38:	d008      	beq.n	8005b4c <memmove+0x28>
 8005b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b42:	e7f8      	b.n	8005b36 <memmove+0x12>
 8005b44:	4402      	add	r2, r0
 8005b46:	4601      	mov	r1, r0
 8005b48:	428a      	cmp	r2, r1
 8005b4a:	d100      	bne.n	8005b4e <memmove+0x2a>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b56:	e7f7      	b.n	8005b48 <memmove+0x24>

08005b58 <_free_r>:
 8005b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d044      	beq.n	8005be8 <_free_r+0x90>
 8005b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b62:	9001      	str	r0, [sp, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f1a1 0404 	sub.w	r4, r1, #4
 8005b6a:	bfb8      	it	lt
 8005b6c:	18e4      	addlt	r4, r4, r3
 8005b6e:	f000 f913 	bl	8005d98 <__malloc_lock>
 8005b72:	4a1e      	ldr	r2, [pc, #120]	; (8005bec <_free_r+0x94>)
 8005b74:	9801      	ldr	r0, [sp, #4]
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	b933      	cbnz	r3, 8005b88 <_free_r+0x30>
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	6014      	str	r4, [r2, #0]
 8005b7e:	b003      	add	sp, #12
 8005b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b84:	f000 b90e 	b.w	8005da4 <__malloc_unlock>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d908      	bls.n	8005b9e <_free_r+0x46>
 8005b8c:	6825      	ldr	r5, [r4, #0]
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	428b      	cmp	r3, r1
 8005b92:	bf01      	itttt	eq
 8005b94:	6819      	ldreq	r1, [r3, #0]
 8005b96:	685b      	ldreq	r3, [r3, #4]
 8005b98:	1949      	addeq	r1, r1, r5
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	e7ed      	b.n	8005b7a <_free_r+0x22>
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_free_r+0x50>
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d9fa      	bls.n	8005b9e <_free_r+0x46>
 8005ba8:	6811      	ldr	r1, [r2, #0]
 8005baa:	1855      	adds	r5, r2, r1
 8005bac:	42a5      	cmp	r5, r4
 8005bae:	d10b      	bne.n	8005bc8 <_free_r+0x70>
 8005bb0:	6824      	ldr	r4, [r4, #0]
 8005bb2:	4421      	add	r1, r4
 8005bb4:	1854      	adds	r4, r2, r1
 8005bb6:	42a3      	cmp	r3, r4
 8005bb8:	6011      	str	r1, [r2, #0]
 8005bba:	d1e0      	bne.n	8005b7e <_free_r+0x26>
 8005bbc:	681c      	ldr	r4, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	6053      	str	r3, [r2, #4]
 8005bc2:	4421      	add	r1, r4
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	e7da      	b.n	8005b7e <_free_r+0x26>
 8005bc8:	d902      	bls.n	8005bd0 <_free_r+0x78>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	6003      	str	r3, [r0, #0]
 8005bce:	e7d6      	b.n	8005b7e <_free_r+0x26>
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	1961      	adds	r1, r4, r5
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	bf04      	itt	eq
 8005bd8:	6819      	ldreq	r1, [r3, #0]
 8005bda:	685b      	ldreq	r3, [r3, #4]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	bf04      	itt	eq
 8005be0:	1949      	addeq	r1, r1, r5
 8005be2:	6021      	streq	r1, [r4, #0]
 8005be4:	6054      	str	r4, [r2, #4]
 8005be6:	e7ca      	b.n	8005b7e <_free_r+0x26>
 8005be8:	b003      	add	sp, #12
 8005bea:	bd30      	pop	{r4, r5, pc}
 8005bec:	2000026c 	.word	0x2000026c

08005bf0 <sbrk_aligned>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0e      	ldr	r6, [pc, #56]	; (8005c2c <sbrk_aligned+0x3c>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	6831      	ldr	r1, [r6, #0]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b911      	cbnz	r1, 8005c02 <sbrk_aligned+0x12>
 8005bfc:	f000 f8bc 	bl	8005d78 <_sbrk_r>
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f8b7 	bl	8005d78 <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d00a      	beq.n	8005c24 <sbrk_aligned+0x34>
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d007      	beq.n	8005c28 <sbrk_aligned+0x38>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 f8ac 	bl	8005d78 <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d101      	bne.n	8005c28 <sbrk_aligned+0x38>
 8005c24:	f04f 34ff 	mov.w	r4, #4294967295
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	20000270 	.word	0x20000270

08005c30 <_malloc_r>:
 8005c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c34:	1ccd      	adds	r5, r1, #3
 8005c36:	f025 0503 	bic.w	r5, r5, #3
 8005c3a:	3508      	adds	r5, #8
 8005c3c:	2d0c      	cmp	r5, #12
 8005c3e:	bf38      	it	cc
 8005c40:	250c      	movcc	r5, #12
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	4607      	mov	r7, r0
 8005c46:	db01      	blt.n	8005c4c <_malloc_r+0x1c>
 8005c48:	42a9      	cmp	r1, r5
 8005c4a:	d905      	bls.n	8005c58 <_malloc_r+0x28>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	2600      	movs	r6, #0
 8005c52:	4630      	mov	r0, r6
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	4e2e      	ldr	r6, [pc, #184]	; (8005d14 <_malloc_r+0xe4>)
 8005c5a:	f000 f89d 	bl	8005d98 <__malloc_lock>
 8005c5e:	6833      	ldr	r3, [r6, #0]
 8005c60:	461c      	mov	r4, r3
 8005c62:	bb34      	cbnz	r4, 8005cb2 <_malloc_r+0x82>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff ffc2 	bl	8005bf0 <sbrk_aligned>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	4604      	mov	r4, r0
 8005c70:	d14d      	bne.n	8005d0e <_malloc_r+0xde>
 8005c72:	6834      	ldr	r4, [r6, #0]
 8005c74:	4626      	mov	r6, r4
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	d140      	bne.n	8005cfc <_malloc_r+0xcc>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4638      	mov	r0, r7
 8005c80:	eb04 0803 	add.w	r8, r4, r3
 8005c84:	f000 f878 	bl	8005d78 <_sbrk_r>
 8005c88:	4580      	cmp	r8, r0
 8005c8a:	d13a      	bne.n	8005d02 <_malloc_r+0xd2>
 8005c8c:	6821      	ldr	r1, [r4, #0]
 8005c8e:	3503      	adds	r5, #3
 8005c90:	1a6d      	subs	r5, r5, r1
 8005c92:	f025 0503 	bic.w	r5, r5, #3
 8005c96:	3508      	adds	r5, #8
 8005c98:	2d0c      	cmp	r5, #12
 8005c9a:	bf38      	it	cc
 8005c9c:	250c      	movcc	r5, #12
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	f7ff ffa5 	bl	8005bf0 <sbrk_aligned>
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d02b      	beq.n	8005d02 <_malloc_r+0xd2>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	442b      	add	r3, r5
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	e00e      	b.n	8005cd0 <_malloc_r+0xa0>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	1b52      	subs	r2, r2, r5
 8005cb6:	d41e      	bmi.n	8005cf6 <_malloc_r+0xc6>
 8005cb8:	2a0b      	cmp	r2, #11
 8005cba:	d916      	bls.n	8005cea <_malloc_r+0xba>
 8005cbc:	1961      	adds	r1, r4, r5
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	bf18      	it	ne
 8005cc4:	6059      	strne	r1, [r3, #4]
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	bf08      	it	eq
 8005cca:	6031      	streq	r1, [r6, #0]
 8005ccc:	5162      	str	r2, [r4, r5]
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f104 060b 	add.w	r6, r4, #11
 8005cd6:	f000 f865 	bl	8005da4 <__malloc_unlock>
 8005cda:	f026 0607 	bic.w	r6, r6, #7
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	1af2      	subs	r2, r6, r3
 8005ce2:	d0b6      	beq.n	8005c52 <_malloc_r+0x22>
 8005ce4:	1b9b      	subs	r3, r3, r6
 8005ce6:	50a3      	str	r3, [r4, r2]
 8005ce8:	e7b3      	b.n	8005c52 <_malloc_r+0x22>
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	bf0c      	ite	eq
 8005cf0:	6032      	streq	r2, [r6, #0]
 8005cf2:	605a      	strne	r2, [r3, #4]
 8005cf4:	e7ec      	b.n	8005cd0 <_malloc_r+0xa0>
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	6864      	ldr	r4, [r4, #4]
 8005cfa:	e7b2      	b.n	8005c62 <_malloc_r+0x32>
 8005cfc:	4634      	mov	r4, r6
 8005cfe:	6876      	ldr	r6, [r6, #4]
 8005d00:	e7b9      	b.n	8005c76 <_malloc_r+0x46>
 8005d02:	230c      	movs	r3, #12
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4638      	mov	r0, r7
 8005d08:	f000 f84c 	bl	8005da4 <__malloc_unlock>
 8005d0c:	e7a1      	b.n	8005c52 <_malloc_r+0x22>
 8005d0e:	6025      	str	r5, [r4, #0]
 8005d10:	e7de      	b.n	8005cd0 <_malloc_r+0xa0>
 8005d12:	bf00      	nop
 8005d14:	2000026c 	.word	0x2000026c

08005d18 <_realloc_r>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4614      	mov	r4, r2
 8005d20:	460e      	mov	r6, r1
 8005d22:	b921      	cbnz	r1, 8005d2e <_realloc_r+0x16>
 8005d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	4611      	mov	r1, r2
 8005d2a:	f7ff bf81 	b.w	8005c30 <_malloc_r>
 8005d2e:	b92a      	cbnz	r2, 8005d3c <_realloc_r+0x24>
 8005d30:	f7ff ff12 	bl	8005b58 <_free_r>
 8005d34:	4625      	mov	r5, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	f000 f838 	bl	8005db0 <_malloc_usable_size_r>
 8005d40:	4284      	cmp	r4, r0
 8005d42:	4607      	mov	r7, r0
 8005d44:	d802      	bhi.n	8005d4c <_realloc_r+0x34>
 8005d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d4a:	d812      	bhi.n	8005d72 <_realloc_r+0x5a>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff ff6e 	bl	8005c30 <_malloc_r>
 8005d54:	4605      	mov	r5, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d0ed      	beq.n	8005d36 <_realloc_r+0x1e>
 8005d5a:	42bc      	cmp	r4, r7
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	4631      	mov	r1, r6
 8005d60:	bf28      	it	cs
 8005d62:	463a      	movcs	r2, r7
 8005d64:	f7ff fed0 	bl	8005b08 <memcpy>
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7ff fef4 	bl	8005b58 <_free_r>
 8005d70:	e7e1      	b.n	8005d36 <_realloc_r+0x1e>
 8005d72:	4635      	mov	r5, r6
 8005d74:	e7df      	b.n	8005d36 <_realloc_r+0x1e>
	...

08005d78 <_sbrk_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_sbrk_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fd42 	bl	800180c <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_sbrk_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_sbrk_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000274 	.word	0x20000274

08005d98 <__malloc_lock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_lock+0x8>)
 8005d9a:	f000 b811 	b.w	8005dc0 <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000278 	.word	0x20000278

08005da4 <__malloc_unlock>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__malloc_unlock+0x8>)
 8005da6:	f000 b80c 	b.w	8005dc2 <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000278 	.word	0x20000278

08005db0 <_malloc_usable_size_r>:
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f18      	subs	r0, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfbc      	itt	lt
 8005dba:	580b      	ldrlt	r3, [r1, r0]
 8005dbc:	18c0      	addlt	r0, r0, r3
 8005dbe:	4770      	bx	lr

08005dc0 <__retarget_lock_acquire_recursive>:
 8005dc0:	4770      	bx	lr

08005dc2 <__retarget_lock_release_recursive>:
 8005dc2:	4770      	bx	lr

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
