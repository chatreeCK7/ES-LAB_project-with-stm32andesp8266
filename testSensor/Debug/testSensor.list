
testSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa0  08005fa0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000007c  08006024  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006024  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eca  00000000  00000000  00030592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00033358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f14  00000000  00000000  000341c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a5b  00000000  00000000  000360d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a42  00000000  00000000  00047b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004584  00000000  00000000  000d85c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ef8 	.word	0x08005ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005ef8 	.word	0x08005ef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <delay+0x30>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000e22:	bf00      	nop
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <delay+0x30>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3f9      	bcc.n	8000e24 <delay+0x14>
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200000ec 	.word	0x200000ec
 8000e44:	00000000 	.word	0x00000000

08000e48 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d155      	bne.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xbc>
{
if (Is_First_Captured==0) // if the first value is not captured
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d117      	bne.n	8000e90 <HAL_TIM_IC_CaptureCallback+0x48>
{
TIM2->CNT = 0;
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
Is_First_Captured = 1; // set the first captured as true
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
// Now change the polarity to falling edge
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a1a      	ldr	r2, [r3, #32]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020a 	bic.w	r2, r2, #10
 8000e7c:	621a      	str	r2, [r3, #32]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a1a      	ldr	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0202 	orr.w	r2, r2, #2
 8000e8c:	621a      	str	r2, [r3, #32]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);

}
}

}
 8000e8e:	e039      	b.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xbc>
else if (Is_First_Captured==1)  // if the first is already captured
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d135      	bne.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xbc>
Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000e98:	2100      	movs	r1, #0
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f003 f85c 	bl	8003f58 <HAL_TIM_ReadCapturedValue>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ea4:	6013      	str	r3, [r2, #0]
Distance = Difference * .034/2;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fb32 	bl	8000514 <__aeabi_ui2d>
 8000eb0:	a317      	add	r3, pc, #92	; (adr r3, 8000f10 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fba7 	bl	8000608 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eca:	f7ff fcc7 	bl	800085c <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fda9 	bl	8000a2c <__aeabi_d2uiz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
Is_First_Captured = 0; // set it back to false
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 020a 	bic.w	r2, r2, #10
 8000ef6:	621a      	str	r2, [r3, #32]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6a12      	ldr	r2, [r2, #32]
 8000f02:	621a      	str	r2, [r3, #32]
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	b020c49c 	.word	0xb020c49c
 8000f14:	3fa16872 	.word	0x3fa16872
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	200001bc 	.word	0x200001bc
 8000f20:	200001c1 	.word	0x200001c1

08000f24 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HCSR04_Read+0x38>)
 8000f30:	f001 f8bc 	bl	80020ac <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f34:	200a      	movs	r0, #10
 8000f36:	f7ff ff6b 	bl	8000e10 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <HCSR04_Read+0x38>)
 8000f42:	f001 f8b3 	bl	80020ac <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HCSR04_Read+0x3c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HCSR04_Read+0x3c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0202 	orr.w	r2, r2, #2
 8000f54:	60da      	str	r2, [r3, #12]
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	200000ec 	.word	0x200000ec

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a0      	sub	sp, #128	; 0x80
 8000f68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fce1 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f933 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 fa71 	bl	8001458 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 fa1b 	bl	80013b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f995 	bl	80012a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f7e:	f000 f9c1 	bl	8001304 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000f82:	f000 fa3f 	bl	8001404 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4881      	ldr	r0, [pc, #516]	; (8001190 <main+0x22c>)
 8000f8a:	f002 fd27 	bl	80039dc <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)&rec, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4980      	ldr	r1, [pc, #512]	; (8001194 <main+0x230>)
 8000f92:	4881      	ldr	r0, [pc, #516]	; (8001198 <main+0x234>)
 8000f94:	f003 fb71 	bl	800467a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Tell TMP102 that we want to read from the temperature register
	      buf[0] = REG_TEMP;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	      ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000f9e:	2390      	movs	r3, #144	; 0x90
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	487b      	ldr	r0, [pc, #492]	; (800119c <main+0x238>)
 8000fb0:	f001 f9da 	bl	8002368 <HAL_I2C_Master_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	      if ( ret != HAL_OK ) {
 8000fba:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <main+0x72>
	        strcpy((char*)buf, "Error Tx\r\n");
 8000fc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc6:	4a76      	ldr	r2, [pc, #472]	; (80011a0 <main+0x23c>)
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	c303      	stmia	r3!, {r0, r1}
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	0c12      	lsrs	r2, r2, #16
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e06b      	b.n	80010ae <main+0x14a>
	      } else {

	        // Read 2 bytes from the temperature register
	        ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000fd6:	2390      	movs	r3, #144	; 0x90
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	486d      	ldr	r0, [pc, #436]	; (800119c <main+0x238>)
 8000fe8:	f001 fabc 	bl	8002564 <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	        if ( ret != HAL_OK ) {
 8000ff2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d009      	beq.n	800100e <main+0xaa>
	          strcpy((char*)buf, "Error Rx\r\n");
 8000ffa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ffe:	4a69      	ldr	r2, [pc, #420]	; (80011a4 <main+0x240>)
 8001000:	ca07      	ldmia	r2, {r0, r1, r2}
 8001002:	c303      	stmia	r3!, {r0, r1}
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	0c12      	lsrs	r2, r2, #16
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e04f      	b.n	80010ae <main+0x14a>
	        } else {

	          //Combine the bytes
	          val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 800100e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	b21a      	sxth	r2, r3
 8001016:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	b2db      	uxtb	r3, r3
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	          // Convert to 2's complement, since temperature can be negative
	          if ( val > 0x7FF ) {
 8001026:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800102a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800102e:	db07      	blt.n	8001040 <main+0xdc>
	            val |= 0xF000;
 8001030:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001034:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001038:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800103c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	          }

	          // Convert to float temperature value (Celsius)
	          temp_c = val * 0.0625;
 8001040:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa75 	bl	8000534 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <main+0x244>)
 8001050:	f7ff fada 	bl	8000608 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fd06 	bl	8000a6c <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	673b      	str	r3, [r7, #112]	; 0x70

	          // Convert temperature to decimal format
	          temp_c *= 100;
 8001064:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001068:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80011ac <main+0x248>
 800106c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001070:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	          sprintf((char*)buf,
	                "%u.%u C\r\n",
	                ((unsigned int)temp_c / 100),
 8001074:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 2a90 	vmov	r2, s15
	          sprintf((char*)buf,
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <main+0x24c>)
 8001082:	fba3 2302 	umull	r2, r3, r3, r2
 8001086:	095a      	lsrs	r2, r3, #5
	                ((unsigned int)temp_c % 100));
 8001088:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800108c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001090:	ee17 1a90 	vmov	r1, s15
	          sprintf((char*)buf,
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <main+0x24c>)
 8001096:	fba3 0301 	umull	r0, r3, r3, r1
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	fb00 f303 	mul.w	r3, r0, r3
 80010a2:	1acb      	subs	r3, r1, r3
 80010a4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80010a8:	4942      	ldr	r1, [pc, #264]	; (80011b4 <main+0x250>)
 80010aa:	f004 fab7 	bl	800561c <siprintf>
	        }
	      }

	      // Send out buffer (temperature or error message)
	      HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80010ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f894 	bl	80001e0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	483c      	ldr	r0, [pc, #240]	; (80011b8 <main+0x254>)
 80010c6:	f003 fa46 	bl	8004556 <HAL_UART_Transmit>

	      // Wait
	      HAL_Delay(500);
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f000 fca1 	bl	8001a14 <HAL_Delay>
	  HAL_UART_Transmit(&huart6, senddata, strlen(senddata), 100);
 80010d2:	483a      	ldr	r0, [pc, #232]	; (80011bc <main+0x258>)
 80010d4:	f7ff f884 	bl	80001e0 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29a      	uxth	r2, r3
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	4937      	ldr	r1, [pc, #220]	; (80011bc <main+0x258>)
 80010e0:	482d      	ldr	r0, [pc, #180]	; (8001198 <main+0x234>)
 80010e2:	f003 fa38 	bl	8004556 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f000 fc93 	bl	8001a14 <HAL_Delay>
	  HCSR04_Read();
 80010ee:	f7ff ff19 	bl	8000f24 <HCSR04_Read>
	  char buffer[100];
	  //sprintf(buffer, "%d%d%d cm \r\n", (Distance/100) + 48, ((Distance/10)%10) +48, (Distance%10)+48);
	  sprintf(buffer, "%d cm \r\n", Distance - 9);
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <main+0x25c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f1a3 0209 	sub.w	r2, r3, #9
 80010fa:	463b      	mov	r3, r7
 80010fc:	4931      	ldr	r1, [pc, #196]	; (80011c4 <main+0x260>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fa8c 	bl	800561c <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 8001104:	463b      	mov	r3, r7
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f86a 	bl	80001e0 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	4639      	mov	r1, r7
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	4828      	ldr	r0, [pc, #160]	; (80011b8 <main+0x254>)
 8001116:	f003 fa1e 	bl	8004556 <HAL_UART_Transmit>
	  if (Distance - 9 < 0) {
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <main+0x25c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d803      	bhi.n	800112a <main+0x1c6>
		  state = 0;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <main+0x264>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e006      	b.n	8001138 <main+0x1d4>
	  }
	  else if (Distance - 9 <= 40) {
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <main+0x25c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b31      	cmp	r3, #49	; 0x31
 8001130:	d802      	bhi.n	8001138 <main+0x1d4>
		  state = 1;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <main+0x264>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
	  }
	  sprintf(buffer, "%d\r\n", state);
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <main+0x264>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	463b      	mov	r3, r7
 800113e:	4923      	ldr	r1, [pc, #140]	; (80011cc <main+0x268>)
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fa6b 	bl	800561c <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f849 	bl	80001e0 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	4639      	mov	r1, r7
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <main+0x254>)
 8001158:	f003 f9fd 	bl	8004556 <HAL_UART_Transmit>
	  HAL_Delay(200);
 800115c:	20c8      	movs	r0, #200	; 0xc8
 800115e:	f000 fc59 	bl	8001a14 <HAL_Delay>
	  sprintf(senddata_2, "%d", state);
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <main+0x264>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4919      	ldr	r1, [pc, #100]	; (80011d0 <main+0x26c>)
 800116a:	481a      	ldr	r0, [pc, #104]	; (80011d4 <main+0x270>)
 800116c:	f004 fa56 	bl	800561c <siprintf>
	  HAL_UART_Transmit(&huart6, senddata_2, strlen(senddata_2), 100);
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <main+0x270>)
 8001172:	f7ff f835 	bl	80001e0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	2364      	movs	r3, #100	; 0x64
 800117c:	4915      	ldr	r1, [pc, #84]	; (80011d4 <main+0x270>)
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <main+0x234>)
 8001180:	f003 f9e9 	bl	8004556 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001188:	f000 fc44 	bl	8001a14 <HAL_Delay>
  {
 800118c:	e704      	b.n	8000f98 <main+0x34>
 800118e:	bf00      	nop
 8001190:	200000ec 	.word	0x200000ec
 8001194:	2000022c 	.word	0x2000022c
 8001198:	20000178 	.word	0x20000178
 800119c:	20000098 	.word	0x20000098
 80011a0:	08005f10 	.word	0x08005f10
 80011a4:	08005f1c 	.word	0x08005f1c
 80011a8:	3fb00000 	.word	0x3fb00000
 80011ac:	42c80000 	.word	0x42c80000
 80011b0:	51eb851f 	.word	0x51eb851f
 80011b4:	08005f28 	.word	0x08005f28
 80011b8:	20000134 	.word	0x20000134
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200001c1 	.word	0x200001c1
 80011c4:	08005f34 	.word	0x08005f34
 80011c8:	200001c4 	.word	0x200001c4
 80011cc:	08005f40 	.word	0x08005f40
 80011d0:	08005f48 	.word	0x08005f48
 80011d4:	200001c8 	.word	0x200001c8

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fa10 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <SystemClock_Config+0xc8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <SystemClock_Config+0xc8>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SystemClock_Config+0xc8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <SystemClock_Config+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <SystemClock_Config+0xcc>)
 8001222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <SystemClock_Config+0xcc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001248:	2304      	movs	r3, #4
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800124c:	2348      	movs	r3, #72	; 0x48
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fed5 	bl	800300c <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001268:	f000 f966 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2102      	movs	r1, #2
 8001288:	4618      	mov	r0, r3
 800128a:	f002 f937 	bl	80034fc <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001294:	f000 f950 	bl	8001538 <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	3750      	adds	r7, #80	; 0x50
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <MX_I2C1_Init+0x54>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_I2C1_Init+0x58>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e6:	f000 fefb 	bl	80020e0 <HAL_I2C_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f000 f922 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000098 	.word	0x20000098
 80012fc:	40005400 	.word	0x40005400
 8001300:	000186a0 	.word	0x000186a0

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <MX_TIM1_Init+0xa8>)
 8001324:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001328:	2247      	movs	r2, #71	; 0x47
 800132a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM1_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001334:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001338:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800134c:	4816      	ldr	r0, [pc, #88]	; (80013a8 <MX_TIM1_Init+0xa4>)
 800134e:	f002 faf5 	bl	800393c <HAL_TIM_IC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001358:	f000 f8ee 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <MX_TIM1_Init+0xa4>)
 800136c:	f003 f824 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001376:	f000 f8df 	bl	8001538 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800137e:	2301      	movs	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_TIM1_Init+0xa4>)
 8001392:	f002 fd45 	bl	8003e20 <HAL_TIM_IC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800139c:	f000 f8cc 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200000ec 	.word	0x200000ec
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <MX_USART2_UART_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e8:	f003 f868 	bl	80044bc <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f8a1 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000134 	.word	0x20000134
 8001400:	40004400 	.word	0x40004400

08001404 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_USART6_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART6_UART_Init+0x4c>)
 800143c:	f003 f83e 	bl	80044bc <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 f877 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000178 	.word	0x20000178
 8001454:	40011400 	.word	0x40011400

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <MX_GPIO_Init+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_GPIO_Init+0xd4>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <MX_GPIO_Init+0xd4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a26      	ldr	r2, [pc, #152]	; (800152c <MX_GPIO_Init+0xd4>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <MX_GPIO_Init+0xd4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_GPIO_Init+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <MX_GPIO_Init+0xd4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_GPIO_Init+0xd4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_GPIO_Init+0xd4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a18      	ldr	r2, [pc, #96]	; (800152c <MX_GPIO_Init+0xd4>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_GPIO_Init+0xd4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <MX_GPIO_Init+0xd8>)
 80014e6:	f000 fde1 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0xdc>)
 8001502:	f000 fc4f 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001506:	f44f 7308 	mov.w	r3, #544	; 0x220
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_GPIO_Init+0xd8>)
 8001520:	f000 fc40 	bl	8001da4 <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001582:	2006      	movs	r0, #6
 8001584:	f000 fb3a 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_I2C_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d8:	2312      	movs	r3, #18
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_I2C_MspInit+0x8c>)
 80015f0:	f000 fbd8 	bl	8001da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_I2C_MspInit+0x88>)
 80015fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_I2C_MspInit+0x88>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40005400 	.word	0x40005400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400

08001624 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_TIM_IC_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d134      	bne.n	80016b0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_TIM_IC_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_TIM_IC_MspInit+0x9c>)
 800169c:	f000 fb82 	bl	8001da4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	201b      	movs	r0, #27
 80016a6:	f000 fab4 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016aa:	201b      	movs	r0, #27
 80016ac:	f000 facd 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_UART_MspInit+0xf8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12c      	bne.n	8001740 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171e:	230c      	movs	r3, #12
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4822      	ldr	r0, [pc, #136]	; (80017c4 <HAL_UART_MspInit+0x100>)
 800173a:	f000 fb33 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800173e:	e038      	b.n	80017b2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0x104>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d133      	bne.n	80017b2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_UART_MspInit+0xfc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001792:	2308      	movs	r3, #8
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <HAL_UART_MspInit+0x108>)
 800179e:	f000 fb01 	bl	8001da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2101      	movs	r1, #1
 80017a6:	2047      	movs	r0, #71	; 0x47
 80017a8:	f000 fa33 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017ac:	2047      	movs	r0, #71	; 0x47
 80017ae:	f000 fa4c 	bl	8001c4a <HAL_NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	; 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40004400 	.word	0x40004400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40011400 	.word	0x40011400
 80017cc:	40020800 	.word	0x40020800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 f8da 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_CC_IRQHandler+0x10>)
 800182a:	f002 f9f1 	bl	8003c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200000ec 	.word	0x200000ec

08001838 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <USART6_IRQHandler+0x10>)
 800183e:	f002 ff4d 	bl	80046dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000178 	.word	0x20000178

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f003 fe9c 	bl	80055b8 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20020000 	.word	0x20020000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000230 	.word	0x20000230
 80018b4:	20000248 	.word	0x20000248

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f8:	4c0b      	ldr	r4, [pc, #44]	; (8001928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001906:	f7ff ffd7 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f003 fe5b 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7ff fb29 	bl	8000f64 <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001920:	08005fa8 	.word	0x08005fa8
  ldr r2, =_sbss
 8001924:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001928:	20000248 	.word	0x20000248

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_Init+0x40>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_Init+0x40>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x40>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f94f 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fdee 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f967 	bl	8001c66 <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f92f 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	20000014 	.word	0x20000014
 80019d0:	20000010 	.word	0x20000010

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000014 	.word	0x20000014
 80019f8:	20000234 	.word	0x20000234

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000234 	.word	0x20000234

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000014 	.word	0x20000014

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff feb6 	bl	80019fc <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d008      	beq.n	8001cb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e052      	b.n	8001d56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0216 	bic.w	r2, r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <HAL_DMA_Abort+0x62>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	e013      	b.n	8001d2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d02:	f7ff fe7b 	bl	80019fc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d90c      	bls.n	8001d2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e015      	b.n	8001d56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e4      	bne.n	8001d02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d004      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e00c      	b.n	8001d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e159      	b.n	8002074 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8148 	bne.w	800206e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a2 	beq.w	800206e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_GPIO_Init+0x2e8>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a56      	ldr	r2, [pc, #344]	; (800208c <HAL_GPIO_Init+0x2e8>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b54      	ldr	r3, [pc, #336]	; (800208c <HAL_GPIO_Init+0x2e8>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x2ec>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a49      	ldr	r2, [pc, #292]	; (8002094 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x202>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x1fe>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_GPIO_Init+0x2f8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x1f6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a45      	ldr	r2, [pc, #276]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x1f2>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e008      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f96:	2307      	movs	r3, #7
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e004      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e002      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f002 0203 	and.w	r2, r2, #3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb8:	4935      	ldr	r1, [pc, #212]	; (8002090 <HAL_GPIO_Init+0x2ec>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002014:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_GPIO_Init+0x304>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203e:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_GPIO_Init+0x304>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	f67f aea2 	bls.w	8001dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40013800 	.word	0x40013800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020400 	.word	0x40020400
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020c00 	.word	0x40020c00
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e12b      	b.n	800234a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fa44 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002144:	f001 fbd2 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8002148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a81      	ldr	r2, [pc, #516]	; (8002354 <HAL_I2C_Init+0x274>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d807      	bhi.n	8002164 <HAL_I2C_Init+0x84>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_I2C_Init+0x278>)
 8002158:	4293      	cmp	r3, r2
 800215a:	bf94      	ite	ls
 800215c:	2301      	movls	r3, #1
 800215e:	2300      	movhi	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e006      	b.n	8002172 <HAL_I2C_Init+0x92>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a7d      	ldr	r2, [pc, #500]	; (800235c <HAL_I2C_Init+0x27c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	bf94      	ite	ls
 800216c:	2301      	movls	r3, #1
 800216e:	2300      	movhi	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0e7      	b.n	800234a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a78      	ldr	r2, [pc, #480]	; (8002360 <HAL_I2C_Init+0x280>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a6a      	ldr	r2, [pc, #424]	; (8002354 <HAL_I2C_Init+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d802      	bhi.n	80021b4 <HAL_I2C_Init+0xd4>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	e009      	b.n	80021c8 <HAL_I2C_Init+0xe8>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_I2C_Init+0x284>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	3301      	adds	r3, #1
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	495c      	ldr	r1, [pc, #368]	; (8002354 <HAL_I2C_Init+0x274>)
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d819      	bhi.n	800221c <HAL_I2C_Init+0x13c>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e59      	subs	r1, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021fc:	400b      	ands	r3, r1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_I2C_Init+0x138>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e59      	subs	r1, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002210:	3301      	adds	r3, #1
 8002212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002216:	e051      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 8002218:	2304      	movs	r3, #4
 800221a:	e04f      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_I2C_Init+0x168>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	440b      	add	r3, r1
 8002232:	fbb0 f3f3 	udiv	r3, r0, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e012      	b.n	800226e <HAL_I2C_Init+0x18e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x196>
 8002272:	2301      	movs	r3, #1
 8002274:	e022      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <HAL_I2C_Init+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e58      	subs	r0, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	440b      	add	r3, r1
 800228c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	e00f      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	6809      	ldr	r1, [r1, #0]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6911      	ldr	r1, [r2, #16]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68d2      	ldr	r2, [r2, #12]
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	000186a0 	.word	0x000186a0
 8002358:	001e847f 	.word	0x001e847f
 800235c:	003d08ff 	.word	0x003d08ff
 8002360:	431bde83 	.word	0x431bde83
 8002364:	10624dd3 	.word	0x10624dd3

08002368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	461a      	mov	r2, r3
 8002374:	460b      	mov	r3, r1
 8002376:	817b      	strh	r3, [r7, #10]
 8002378:	4613      	mov	r3, r2
 800237a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fb3e 	bl	80019fc <HAL_GetTick>
 8002380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	f040 80e0 	bne.w	8002550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	4970      	ldr	r1, [pc, #448]	; (800255c <HAL_I2C_Master_Transmit+0x1f4>)
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fc58 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0d3      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_I2C_Master_Transmit+0x50>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e0cc      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d007      	beq.n	80023de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2221      	movs	r2, #33	; 0x21
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2210      	movs	r2, #16
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	893a      	ldrh	r2, [r7, #8]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_I2C_Master_Transmit+0x1f8>)
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	6a3a      	ldr	r2, [r7, #32]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fac2 	bl	80029b0 <I2C_MasterRequestWrite>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e08d      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800244c:	e066      	b.n	800251c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fcd2 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b04      	cmp	r3, #4
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_I2C_Master_Transmit+0x188>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	6a39      	ldr	r1, [r7, #32]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fcc2 	bl	8002e7e <I2C_WaitOnBTFFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e01a      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d194      	bne.n	800244e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000

08002564 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
 8002574:	4613      	mov	r3, r2
 8002576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fa40 	bl	80019fc <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 820b 	bne.w	80029a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	497c      	ldr	r1, [pc, #496]	; (8002788 <HAL_I2C_Master_Receive+0x224>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb5a 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	e1fe      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x50>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e1f7      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d007      	beq.n	80025da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2222      	movs	r2, #34	; 0x22
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a5c      	ldr	r2, [pc, #368]	; (800278c <HAL_I2C_Master_Receive+0x228>)
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fa46 	bl	8002ab4 <I2C_MasterRequestRead>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1b8      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e18c      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	2b01      	cmp	r3, #1
 8002668:	d11b      	bne.n	80026a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e16c      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d11b      	bne.n	80026e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	e14c      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002708:	e138      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b03      	cmp	r3, #3
 8002710:	f200 80f1 	bhi.w	80028f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d123      	bne.n	8002764 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fbed 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e139      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002762:	e10b      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d14e      	bne.n	800280a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	2200      	movs	r2, #0
 8002774:	4906      	ldr	r1, [pc, #24]	; (8002790 <HAL_I2C_Master_Receive+0x22c>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fa6a 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e10e      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002808:	e0b8      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	2200      	movs	r2, #0
 8002812:	4966      	ldr	r1, [pc, #408]	; (80029ac <HAL_I2C_Master_Receive+0x448>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fa1b 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0bf      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	2200      	movs	r2, #0
 800286e:	494f      	ldr	r1, [pc, #316]	; (80029ac <HAL_I2C_Master_Receive+0x448>)
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f9ed 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e091      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f4:	e042      	b.n	800297c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fb00 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e04c      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d118      	bne.n	800297c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f aec2 	bne.w	800270a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	00010004 	.word	0x00010004

080029b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	460b      	mov	r3, r1
 80029be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d006      	beq.n	80029da <I2C_MasterRequestWrite+0x2a>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d003      	beq.n	80029da <I2C_MasterRequestWrite+0x2a>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d8:	d108      	bne.n	80029ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00b      	b.n	8002a04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	2b12      	cmp	r3, #18
 80029f2:	d107      	bne.n	8002a04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f91d 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2a:	d103      	bne.n	8002a34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e035      	b.n	8002aa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a40:	d108      	bne.n	8002a54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	e01b      	b.n	8002a8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	11db      	asrs	r3, r3, #7
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 0306 	and.w	r3, r3, #6
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f063 030f 	orn	r3, r3, #15
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	490e      	ldr	r1, [pc, #56]	; (8002aac <I2C_MasterRequestWrite+0xfc>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f943 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e010      	b.n	8002aa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <I2C_MasterRequestWrite+0x100>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f933 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00010008 	.word	0x00010008
 8002ab0:	00010002 	.word	0x00010002

08002ab4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d006      	beq.n	8002aee <I2C_MasterRequestRead+0x3a>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d003      	beq.n	8002aee <I2C_MasterRequestRead+0x3a>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00b      	b.n	8002b18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	2b11      	cmp	r3, #17
 8002b06:	d107      	bne.n	8002b18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f893 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3e:	d103      	bne.n	8002b48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e079      	b.n	8002c40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b54:	d108      	bne.n	8002b68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e05f      	b.n	8002c28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	11db      	asrs	r3, r3, #7
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0306 	and.w	r3, r3, #6
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f063 030f 	orn	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4930      	ldr	r1, [pc, #192]	; (8002c48 <I2C_MasterRequestRead+0x194>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8b9 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e054      	b.n	8002c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4929      	ldr	r1, [pc, #164]	; (8002c4c <I2C_MasterRequestRead+0x198>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f8a9 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e044      	b.n	8002c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f831 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d103      	bne.n	8002c0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e017      	b.n	8002c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	11db      	asrs	r3, r3, #7
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0306 	and.w	r3, r3, #6
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f063 030e 	orn	r3, r3, #14
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <I2C_MasterRequestRead+0x198>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f865 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010008 	.word	0x00010008
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c60:	e025      	b.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fec7 	bl	80019fc <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e023      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10d      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	e00c      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d0b6      	beq.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0c:	e051      	b.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1c:	d123      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e046      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fe45 	bl	80019fc <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e020      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d18d      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e08:	e02d      	b.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8ce 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e02d      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d021      	beq.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fdeb 	bl	80019fc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e007      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d1ca      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8a:	e02d      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f88d 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e02d      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d021      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe fdaa 	bl	80019fc <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d1ca      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f0c:	e042      	b.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d119      	bne.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e029      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fe fd54 	bl	80019fc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d1b5      	bne.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d11b      	bne.n	8002ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc9a 	bl	80019fc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fc96 	bl	80019fc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc86 	bl	80019fc <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fc82 	bl	80019fc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe fc3b 	bl	80019fc <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe fc37 	bl	80019fc <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fc1a 	bl	80019fc <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe fc16 	bl	80019fc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fbfa 	bl	80019fc <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe fbf6 	bl	80019fc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fbe3 	bl	80019fc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe fbdf 	bl	80019fc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fb9f 	bl	80019fc <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fb9b 	bl	80019fc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fb60 	bl	80019fc <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fb5c 	bl	80019fc <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe fb4a 	bl	80019fc <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fb46 	bl	80019fc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fb1a 	bl	80019fc <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fb16 	bl	80019fc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe faef 	bl	80019fc <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe faeb 	bl	80019fc <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fad8 	bl	80019fc <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe fad4 	bl	80019fc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fa06 	bl	80019fc <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fa02 	bl	80019fc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f966 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08005f4c 	.word	0x08005f4c
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	20000010 	.word	0x20000010

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b094      	sub	sp, #80	; 0x50
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	647b      	str	r3, [r7, #68]	; 0x44
 80036d4:	2300      	movs	r3, #0
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d8:	2300      	movs	r3, #0
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b79      	ldr	r3, [pc, #484]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80e1 	bhi.w	80038b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e0db      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_GetSysClockFreq+0x204>)
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003700:	e0db      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b73      	ldr	r3, [pc, #460]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003706:	e0d8      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d063      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
 8003728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	2300      	movs	r3, #0
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
 8003736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800373a:	4622      	mov	r2, r4
 800373c:	462b      	mov	r3, r5
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	0159      	lsls	r1, r3, #5
 8003748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374c:	0150      	lsls	r0, r2, #5
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4621      	mov	r1, r4
 8003754:	1a51      	subs	r1, r2, r1
 8003756:	6139      	str	r1, [r7, #16]
 8003758:	4629      	mov	r1, r5
 800375a:	eb63 0301 	sbc.w	r3, r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	018b      	lsls	r3, r1, #6
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003776:	4651      	mov	r1, sl
 8003778:	018a      	lsls	r2, r1, #6
 800377a:	4651      	mov	r1, sl
 800377c:	ebb2 0801 	subs.w	r8, r2, r1
 8003780:	4659      	mov	r1, fp
 8003782:	eb63 0901 	sbc.w	r9, r3, r1
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379a:	4690      	mov	r8, r2
 800379c:	4699      	mov	r9, r3
 800379e:	4623      	mov	r3, r4
 80037a0:	eb18 0303 	adds.w	r3, r8, r3
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	462b      	mov	r3, r5
 80037a8:	eb49 0303 	adc.w	r3, r9, r3
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ba:	4629      	mov	r1, r5
 80037bc:	024b      	lsls	r3, r1, #9
 80037be:	4621      	mov	r1, r4
 80037c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037c4:	4621      	mov	r1, r4
 80037c6:	024a      	lsls	r2, r1, #9
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ce:	2200      	movs	r2, #0
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037d8:	f7fd f998 	bl	8000b0c <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4613      	mov	r3, r2
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	e058      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	2200      	movs	r2, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	4611      	mov	r1, r2
 80037f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	f04f 0000 	mov.w	r0, #0
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	0159      	lsls	r1, r3, #5
 800380e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003812:	0150      	lsls	r0, r2, #5
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4641      	mov	r1, r8
 800381a:	ebb2 0a01 	subs.w	sl, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb63 0b01 	sbc.w	fp, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003838:	ebb2 040a 	subs.w	r4, r2, sl
 800383c:	eb63 050b 	sbc.w	r5, r3, fp
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	00eb      	lsls	r3, r5, #3
 800384a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384e:	00e2      	lsls	r2, r4, #3
 8003850:	4614      	mov	r4, r2
 8003852:	461d      	mov	r5, r3
 8003854:	4643      	mov	r3, r8
 8003856:	18e3      	adds	r3, r4, r3
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	464b      	mov	r3, r9
 800385c:	eb45 0303 	adc.w	r3, r5, r3
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386e:	4629      	mov	r1, r5
 8003870:	028b      	lsls	r3, r1, #10
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003878:	4621      	mov	r1, r4
 800387a:	028a      	lsls	r2, r1, #10
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003882:	2200      	movs	r2, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	61fa      	str	r2, [r7, #28]
 8003888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388c:	f7fd f93e 	bl	8000b0c <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4613      	mov	r3, r2
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetSysClockFreq+0x204>)
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3750      	adds	r7, #80	; 0x50
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	007a1200 	.word	0x007a1200

080038d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	2000000c 	.word	0x2000000c

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a9b      	lsrs	r3, r3, #10
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	08005f5c 	.word	0x08005f5c

08003914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003918:	f7ff ffdc 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0b5b      	lsrs	r3, r3, #13
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08005f5c 	.word	0x08005f5c

0800393c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e041      	b.n	80039d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fe5e 	bl	8001624 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 fb58 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start_IT+0x1e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_IC_Start_IT+0x46>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start_IT+0x2e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_IC_Start_IT+0x46>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_IC_Start_IT+0x3e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_IC_Start_IT+0x46>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_IC_Start_IT+0x58>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e013      	b.n	8003a5c <HAL_TIM_IC_Start_IT+0x80>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_IC_Start_IT+0x68>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e00b      	b.n	8003a5c <HAL_TIM_IC_Start_IT+0x80>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_IC_Start_IT+0x78>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e003      	b.n	8003a5c <HAL_TIM_IC_Start_IT+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5e:	7bbb      	ldrb	r3, [r7, #14]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d102      	bne.n	8003a6a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a64:	7b7b      	ldrb	r3, [r7, #13]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0c2      	b.n	8003bf4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_IC_Start_IT+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a7c:	e013      	b.n	8003aa6 <HAL_TIM_IC_Start_IT+0xca>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start_IT+0xb2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	e00b      	b.n	8003aa6 <HAL_TIM_IC_Start_IT+0xca>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Start_IT+0xc2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	e003      	b.n	8003aa6 <HAL_TIM_IC_Start_IT+0xca>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_IC_Start_IT+0xda>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	e013      	b.n	8003ade <HAL_TIM_IC_Start_IT+0x102>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_IC_Start_IT+0xea>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	e00b      	b.n	8003ade <HAL_TIM_IC_Start_IT+0x102>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_IC_Start_IT+0xfa>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad4:	e003      	b.n	8003ade <HAL_TIM_IC_Start_IT+0x102>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d841      	bhi.n	8003b68 <HAL_TIM_IC_Start_IT+0x18c>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <HAL_TIM_IC_Start_IT+0x110>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b21 	.word	0x08003b21
 8003af0:	08003b69 	.word	0x08003b69
 8003af4:	08003b69 	.word	0x08003b69
 8003af8:	08003b69 	.word	0x08003b69
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b69 	.word	0x08003b69
 8003b04:	08003b69 	.word	0x08003b69
 8003b08:	08003b69 	.word	0x08003b69
 8003b0c:	08003b45 	.word	0x08003b45
 8003b10:	08003b69 	.word	0x08003b69
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003b69 	.word	0x08003b69
 8003b1c:	08003b57 	.word	0x08003b57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0202 	orr.w	r2, r2, #2
 8003b2e:	60da      	str	r2, [r3, #12]
      break;
 8003b30:	e01d      	b.n	8003b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0204 	orr.w	r2, r2, #4
 8003b40:	60da      	str	r2, [r3, #12]
      break;
 8003b42:	e014      	b.n	8003b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	60da      	str	r2, [r3, #12]
      break;
 8003b54:	e00b      	b.n	8003b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0210 	orr.w	r2, r2, #16
 8003b64:	60da      	str	r2, [r3, #12]
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13e      	bne.n	8003bf2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fbf5 	bl	800436c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_TIM_IC_Start_IT+0x220>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x1e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x1e2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_TIM_IC_Start_IT+0x224>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x1e2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_TIM_IC_Start_IT+0x228>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x1e2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_TIM_IC_Start_IT+0x22c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x1e2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <HAL_TIM_IC_Start_IT+0x230>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d010      	beq.n	8003bf2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be0:	e007      	b.n	8003bf2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40014000 	.word	0x40014000

08003c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0202 	mvn.w	r2, #2
 8003c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd f8f8 	bl	8000e48 <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9ca 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9d1 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0204 	mvn.w	r2, #4
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd f8ce 	bl	8000e48 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9a0 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f9a7 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0208 	mvn.w	r2, #8
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd f8a4 	bl	8000e48 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f976 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f97d 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0210 	mvn.w	r2, #16
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd f87a 	bl	8000e48 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f94c 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f953 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0201 	mvn.w	r2, #1
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f926 	bl	8003fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fb74 	bl	80044a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f918 	bl	800401c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0220 	mvn.w	r2, #32
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb3e 	bl	8004494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e088      	b.n	8003f50 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f000 f968 	bl	8004130 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 020c 	bic.w	r2, r2, #12
 8003e6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
 8003e82:	e060      	b.n	8003f46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d11c      	bne.n	8003ec4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 f9b1 	bl	8004200 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003eac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6999      	ldr	r1, [r3, #24]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
 8003ec2:	e040      	b.n	8003f46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11b      	bne.n	8003f02 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f000 f9ce 	bl	800427a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 020c 	bic.w	r2, r2, #12
 8003eec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69d9      	ldr	r1, [r3, #28]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]
 8003f00:	e021      	b.n	8003f46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d11c      	bne.n	8003f42 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f000 f9eb 	bl	80042f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f2a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69d9      	ldr	r1, [r3, #28]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021a      	lsls	r2, r3, #8
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]
 8003f40:	e001      	b.n	8003f46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d831      	bhi.n	8003fd0 <HAL_TIM_ReadCapturedValue+0x78>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fd1 	.word	0x08003fd1
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08003fd1 	.word	0x08003fd1
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fd1 	.word	0x08003fd1
 8003f8c:	08003fd1 	.word	0x08003fd1
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fd1 	.word	0x08003fd1
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	08003fc7 	.word	0x08003fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	60fb      	str	r3, [r7, #12]

      break;
 8003fb0:	e00f      	b.n	8003fd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	60fb      	str	r3, [r7, #12]

      break;
 8003fba:	e00a      	b.n	8003fd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	60fb      	str	r3, [r7, #12]

      break;
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	60fb      	str	r3, [r7, #12]

      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003fd0:	bf00      	nop
  }

  return tmpreg;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a34      	ldr	r2, [pc, #208]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00f      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a31      	ldr	r2, [pc, #196]	; (8004118 <TIM_Base_SetConfig+0xe8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a30      	ldr	r2, [pc, #192]	; (800411c <TIM_Base_SetConfig+0xec>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x38>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <TIM_Base_SetConfig+0xf0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d017      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <TIM_Base_SetConfig+0xe8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a21      	ldr	r2, [pc, #132]	; (800411c <TIM_Base_SetConfig+0xec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00f      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <TIM_Base_SetConfig+0xf0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <TIM_Base_SetConfig+0xf4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <TIM_Base_SetConfig+0xf8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <TIM_Base_SetConfig+0xfc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <TIM_Base_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a24      	ldr	r2, [pc, #144]	; (80041ec <TIM_TI1_SetConfig+0xbc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_TI1_SetConfig+0x56>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d00f      	beq.n	8004186 <TIM_TI1_SetConfig+0x56>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <TIM_TI1_SetConfig+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_TI1_SetConfig+0x56>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <TIM_TI1_SetConfig+0xc4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_TI1_SetConfig+0x56>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <TIM_TI1_SetConfig+0xc8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_TI1_SetConfig+0x56>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <TIM_TI1_SetConfig+0xcc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <TIM_TI1_SetConfig+0x5a>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <TIM_TI1_SetConfig+0x5c>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e003      	b.n	80041aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f023 030a 	bic.w	r3, r3, #10
 80041c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 030a 	and.w	r3, r3, #10
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000

08004200 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0210 	bic.w	r2, r3, #16
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800423e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	031b      	lsls	r3, r3, #12
 8004244:	b29b      	uxth	r3, r3
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	b29b      	uxth	r3, r3
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e050      	b.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d013      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a15      	ldr	r2, [pc, #84]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10c      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4313      	orrs	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e03f      	b.n	800454e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd f8ee 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fde5 	bl	80050d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b08a      	sub	sp, #40	; 0x28
 800455a:	af02      	add	r7, sp, #8
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	d17c      	bne.n	8004670 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_UART_Transmit+0x2c>
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e075      	b.n	8004672 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UART_Transmit+0x3e>
 8004590:	2302      	movs	r3, #2
 8004592:	e06e      	b.n	8004672 <HAL_UART_Transmit+0x11c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2221      	movs	r2, #33	; 0x21
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045aa:	f7fd fa27 	bl	80019fc <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d108      	bne.n	80045d8 <HAL_UART_Transmit+0x82>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e003      	b.n	80045e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045e8:	e02a      	b.n	8004640 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fb29 	bl	8004c4c <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e036      	b.n	8004672 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	3302      	adds	r3, #2
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	e007      	b.n	8004632 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3301      	adds	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1cf      	bne.n	80045ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2140      	movs	r1, #64	; 0x40
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 faf9 	bl	8004c4c <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e006      	b.n	8004672 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	d11d      	bne.n	80046d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Receive_IT+0x26>
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e016      	b.n	80046d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Receive_IT+0x38>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e00f      	b.n	80046d2 <HAL_UART_Receive_IT+0x58>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	461a      	mov	r2, r3
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fb2e 	bl	8004d28 <UART_Start_Receive_IT>
 80046cc:	4603      	mov	r3, r0
 80046ce:	e000      	b.n	80046d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b0ba      	sub	sp, #232	; 0xe8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800471a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_UART_IRQHandler+0x66>
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fc0d 	bl	8004f5a <UART_Receive_IT>
      return;
 8004740:	e256      	b.n	8004bf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80de 	beq.w	8004908 <HAL_UART_IRQHandler+0x22c>
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80d1 	beq.w	8004908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0xae>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_UART_IRQHandler+0xd2>
 8004796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0202 	orr.w	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_UART_IRQHandler+0xf6>
 80047ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d011      	beq.n	8004802 <HAL_UART_IRQHandler+0x126>
 80047de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0208 	orr.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 81ed 	beq.w	8004be6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_UART_IRQHandler+0x14e>
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb98 	bl	8004f5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <HAL_UART_IRQHandler+0x17a>
 800484e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d04f      	beq.n	80048f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 faa0 	bl	8004d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d141      	bne.n	80048ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800489a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1d9      	bne.n	800486a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d013      	beq.n	80048e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4a7d      	ldr	r2, [pc, #500]	; (8004ab8 <HAL_UART_IRQHandler+0x3dc>)
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fa47 	bl	8001d5e <HAL_DMA_Abort_IT>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e0:	4610      	mov	r0, r2
 80048e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e00e      	b.n	8004904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f99a 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	e00a      	b.n	8004904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f996 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	e006      	b.n	8004904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f992 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004902:	e170      	b.n	8004be6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	bf00      	nop
    return;
 8004906:	e16e      	b.n	8004be6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 814a 	bne.w	8004ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8143 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 813c 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	f040 80b4 	bne.w	8004abc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8140 	beq.w	8004bea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800496e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004972:	429a      	cmp	r2, r3
 8004974:	f080 8139 	bcs.w	8004bea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800497e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498a:	f000 8088 	beq.w	8004a9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1d9      	bne.n	800498e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e1      	bne.n	80049da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e3      	bne.n	8004a16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a80:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e3      	bne.n	8004a5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd f8f0 	bl	8001c7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8c0 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ab4:	e099      	b.n	8004bea <HAL_UART_IRQHandler+0x50e>
 8004ab6:	bf00      	nop
 8004ab8:	08004e63 	.word	0x08004e63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 808b 	beq.w	8004bee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8086 	beq.w	8004bee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b06:	647a      	str	r2, [r7, #68]	; 0x44
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e3      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	623b      	str	r3, [r7, #32]
   return(result);
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e3      	bne.n	8004b1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0310 	bic.w	r3, r3, #16
 8004b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b84:	61fa      	str	r2, [r7, #28]
 8004b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	617b      	str	r3, [r7, #20]
   return(result);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e3      	bne.n	8004b60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f848 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ba4:	e023      	b.n	8004bee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x4ea>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f963 	bl	8004e8a <UART_Transmit_IT>
    return;
 8004bc4:	e014      	b.n	8004bf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x514>
 8004bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9a3 	bl	8004f2a <UART_EndTransmit_IT>
    return;
 8004be4:	e004      	b.n	8004bf0 <HAL_UART_IRQHandler+0x514>
    return;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_UART_IRQHandler+0x514>
      return;
 8004bee:	bf00      	nop
  }
}
 8004bf0:	37e8      	adds	r7, #232	; 0xe8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop

08004bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b090      	sub	sp, #64	; 0x40
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5c:	e050      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d04c      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6c:	f7fc fec6 	bl	80019fc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d241      	bcs.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c9c:	637a      	str	r2, [r7, #52]	; 0x34
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd0:	623a      	str	r2, [r7, #32]
 8004cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69f9      	ldr	r1, [r7, #28]
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e00f      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d09f      	beq.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3740      	adds	r7, #64	; 0x40
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2222      	movs	r2, #34	; 0x22
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0220 	orr.w	r2, r2, #32
 8004d8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b095      	sub	sp, #84	; 0x54
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d119      	bne.n	8004e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e56:	bf00      	nop
 8004e58:	3754      	adds	r7, #84	; 0x54
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fecf 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b21      	cmp	r3, #33	; 0x21
 8004e9c:	d13e      	bne.n	8004f1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d114      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]
 8004ed0:	e008      	b.n	8004ee4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6211      	str	r1, [r2, #32]
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fe54 	bl	8004bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08c      	sub	sp, #48	; 0x30
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	f040 80ab 	bne.w	80050c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d117      	bne.n	8004faa <UART_Receive_IT+0x50>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d113      	bne.n	8004faa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa8:	e026      	b.n	8004ff8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbc:	d007      	beq.n	8004fce <UART_Receive_IT+0x74>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <UART_Receive_IT+0x82>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e008      	b.n	8004fee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4619      	mov	r1, r3
 8005006:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005008:	2b00      	cmp	r3, #0
 800500a:	d15a      	bne.n	80050c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0220 	bic.w	r2, r2, #32
 800501a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800502a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	2b01      	cmp	r3, #1
 800504a:	d135      	bne.n	80050b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	613b      	str	r3, [r7, #16]
   return(result);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	623a      	str	r2, [r7, #32]
 8005074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	69f9      	ldr	r1, [r7, #28]
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d10a      	bne.n	80050aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fdbf 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
 80050b6:	e002      	b.n	80050be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fda7 	bl	8004c0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e002      	b.n	80050c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3730      	adds	r7, #48	; 0x30
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b0c0      	sub	sp, #256	; 0x100
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	ea40 0301 	orr.w	r3, r0, r1
 80050f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005128:	f021 010c 	bic.w	r1, r1, #12
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005136:	430b      	orrs	r3, r1
 8005138:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	6999      	ldr	r1, [r3, #24]
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	ea40 0301 	orr.w	r3, r0, r1
 8005156:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b8f      	ldr	r3, [pc, #572]	; (800539c <UART_SetConfig+0x2cc>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d005      	beq.n	8005170 <UART_SetConfig+0xa0>
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b8d      	ldr	r3, [pc, #564]	; (80053a0 <UART_SetConfig+0x2d0>)
 800516c:	429a      	cmp	r2, r3
 800516e:	d104      	bne.n	800517a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe fbd0 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8005174:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005178:	e003      	b.n	8005182 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800517a:	f7fe fbb7 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 800517e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518c:	f040 810c 	bne.w	80053a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800519a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800519e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	1891      	adds	r1, r2, r2
 80051a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051aa:	415b      	adcs	r3, r3
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051b2:	4621      	mov	r1, r4
 80051b4:	eb12 0801 	adds.w	r8, r2, r1
 80051b8:	4629      	mov	r1, r5
 80051ba:	eb43 0901 	adc.w	r9, r3, r1
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	eb18 0303 	adds.w	r3, r8, r3
 80051dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051e0:	462b      	mov	r3, r5
 80051e2:	eb49 0303 	adc.w	r3, r9, r3
 80051e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051fe:	460b      	mov	r3, r1
 8005200:	18db      	adds	r3, r3, r3
 8005202:	653b      	str	r3, [r7, #80]	; 0x50
 8005204:	4613      	mov	r3, r2
 8005206:	eb42 0303 	adc.w	r3, r2, r3
 800520a:	657b      	str	r3, [r7, #84]	; 0x54
 800520c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005210:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005214:	f7fb fc7a 	bl	8000b0c <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <UART_SetConfig+0x2d4>)
 800521e:	fba3 2302 	umull	r2, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	011c      	lsls	r4, r3, #4
 8005226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005230:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005234:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	1891      	adds	r1, r2, r2
 800523e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005240:	415b      	adcs	r3, r3
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005248:	4641      	mov	r1, r8
 800524a:	eb12 0a01 	adds.w	sl, r2, r1
 800524e:	4649      	mov	r1, r9
 8005250:	eb43 0b01 	adc.w	fp, r3, r1
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005260:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005268:	4692      	mov	sl, r2
 800526a:	469b      	mov	fp, r3
 800526c:	4643      	mov	r3, r8
 800526e:	eb1a 0303 	adds.w	r3, sl, r3
 8005272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005276:	464b      	mov	r3, r9
 8005278:	eb4b 0303 	adc.w	r3, fp, r3
 800527c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800528c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005290:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005294:	460b      	mov	r3, r1
 8005296:	18db      	adds	r3, r3, r3
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
 800529a:	4613      	mov	r3, r2
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052aa:	f7fb fc2f 	bl	8000b0c <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <UART_SetConfig+0x2d4>)
 80052b6:	fba3 2301 	umull	r2, r3, r3, r1
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2264      	movs	r2, #100	; 0x64
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	1acb      	subs	r3, r1, r3
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <UART_SetConfig+0x2d4>)
 80052cc:	fba3 2302 	umull	r2, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d8:	441c      	add	r4, r3
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f4:	415b      	adcs	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6339      	str	r1, [r7, #48]	; 0x30
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005330:	464b      	mov	r3, r9
 8005332:	460a      	mov	r2, r1
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005348:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800534c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005350:	460b      	mov	r3, r1
 8005352:	18db      	adds	r3, r3, r3
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	4613      	mov	r3, r2
 8005358:	eb42 0303 	adc.w	r3, r2, r3
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005362:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005366:	f7fb fbd1 	bl	8000b0c <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <UART_SetConfig+0x2d4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <UART_SetConfig+0x2d4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 0207 	and.w	r2, r3, #7
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4422      	add	r2, r4
 8005396:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005398:	e105      	b.n	80055a6 <UART_SetConfig+0x4d6>
 800539a:	bf00      	nop
 800539c:	40011000 	.word	0x40011000
 80053a0:	40011400 	.word	0x40011400
 80053a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053ba:	4642      	mov	r2, r8
 80053bc:	464b      	mov	r3, r9
 80053be:	1891      	adds	r1, r2, r2
 80053c0:	6239      	str	r1, [r7, #32]
 80053c2:	415b      	adcs	r3, r3
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ca:	4641      	mov	r1, r8
 80053cc:	1854      	adds	r4, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb43 0501 	adc.w	r5, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	00eb      	lsls	r3, r5, #3
 80053de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e2:	00e2      	lsls	r2, r4, #3
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	4643      	mov	r3, r8
 80053ea:	18e3      	adds	r3, r4, r3
 80053ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f0:	464b      	mov	r3, r9
 80053f2:	eb45 0303 	adc.w	r3, r5, r3
 80053f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005416:	4629      	mov	r1, r5
 8005418:	008b      	lsls	r3, r1, #2
 800541a:	4621      	mov	r1, r4
 800541c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005420:	4621      	mov	r1, r4
 8005422:	008a      	lsls	r2, r1, #2
 8005424:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005428:	f7fb fb70 	bl	8000b0c <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4b60      	ldr	r3, [pc, #384]	; (80055b4 <UART_SetConfig+0x4e4>)
 8005432:	fba3 2302 	umull	r2, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	011c      	lsls	r4, r3, #4
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005448:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	61b9      	str	r1, [r7, #24]
 8005454:	415b      	adcs	r3, r3
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800545c:	4641      	mov	r1, r8
 800545e:	1851      	adds	r1, r2, r1
 8005460:	6139      	str	r1, [r7, #16]
 8005462:	4649      	mov	r1, r9
 8005464:	414b      	adcs	r3, r1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005474:	4659      	mov	r1, fp
 8005476:	00cb      	lsls	r3, r1, #3
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547e:	4651      	mov	r1, sl
 8005480:	00ca      	lsls	r2, r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	4603      	mov	r3, r0
 8005488:	4642      	mov	r2, r8
 800548a:	189b      	adds	r3, r3, r2
 800548c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005490:	464b      	mov	r3, r9
 8005492:	460a      	mov	r2, r1
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054c6:	f7fb fb21 	bl	8000b0c <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a34      	ldr	r2, [pc, #208]	; (80055b4 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ee:	441c      	add	r4, r3
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	673b      	str	r3, [r7, #112]	; 0x70
 80054f8:	677a      	str	r2, [r7, #116]	; 0x74
 80054fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054fe:	4642      	mov	r2, r8
 8005500:	464b      	mov	r3, r9
 8005502:	1891      	adds	r1, r2, r2
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	415b      	adcs	r3, r3
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550e:	4641      	mov	r1, r8
 8005510:	1851      	adds	r1, r2, r1
 8005512:	6039      	str	r1, [r7, #0]
 8005514:	4649      	mov	r1, r9
 8005516:	414b      	adcs	r3, r1
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005526:	4659      	mov	r1, fp
 8005528:	00cb      	lsls	r3, r1, #3
 800552a:	4651      	mov	r1, sl
 800552c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005530:	4651      	mov	r1, sl
 8005532:	00ca      	lsls	r2, r1, #3
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	4603      	mov	r3, r0
 800553a:	4642      	mov	r2, r8
 800553c:	189b      	adds	r3, r3, r2
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005540:	464b      	mov	r3, r9
 8005542:	460a      	mov	r2, r1
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	663b      	str	r3, [r7, #96]	; 0x60
 8005554:	667a      	str	r2, [r7, #100]	; 0x64
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005562:	4649      	mov	r1, r9
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	4641      	mov	r1, r8
 8005568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556c:	4641      	mov	r1, r8
 800556e:	008a      	lsls	r2, r1, #2
 8005570:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005574:	f7fb faca 	bl	8000b0c <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <UART_SetConfig+0x4e4>)
 800557e:	fba3 1302 	umull	r1, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2164      	movs	r1, #100	; 0x64
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	; 0x32
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <UART_SetConfig+0x4e4>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4422      	add	r2, r4
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	bf00      	nop
 80055a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b2:	bf00      	nop
 80055b4:	51eb851f 	.word	0x51eb851f

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000018 	.word	0x20000018

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 fc8e 	bl	8005ef8 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08005fa0 	.word	0x08005fa0
 8005600:	08005fa0 	.word	0x08005fa0
 8005604:	08005fa0 	.word	0x08005fa0
 8005608:	08005fa4 	.word	0x08005fa4

0800560c <memset>:
 800560c:	4402      	add	r2, r0
 800560e:	4603      	mov	r3, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <siprintf>:
 800561c:	b40e      	push	{r1, r2, r3}
 800561e:	b500      	push	{lr}
 8005620:	b09c      	sub	sp, #112	; 0x70
 8005622:	ab1d      	add	r3, sp, #116	; 0x74
 8005624:	9002      	str	r0, [sp, #8]
 8005626:	9006      	str	r0, [sp, #24]
 8005628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800562c:	4809      	ldr	r0, [pc, #36]	; (8005654 <siprintf+0x38>)
 800562e:	9107      	str	r1, [sp, #28]
 8005630:	9104      	str	r1, [sp, #16]
 8005632:	4909      	ldr	r1, [pc, #36]	; (8005658 <siprintf+0x3c>)
 8005634:	f853 2b04 	ldr.w	r2, [r3], #4
 8005638:	9105      	str	r1, [sp, #20]
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	a902      	add	r1, sp, #8
 8005640:	f000 f868 	bl	8005714 <_svfiprintf_r>
 8005644:	9b02      	ldr	r3, [sp, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	b01c      	add	sp, #112	; 0x70
 800564c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005650:	b003      	add	sp, #12
 8005652:	4770      	bx	lr
 8005654:	20000018 	.word	0x20000018
 8005658:	ffff0208 	.word	0xffff0208

0800565c <__ssputs_r>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	688e      	ldr	r6, [r1, #8]
 8005662:	429e      	cmp	r6, r3
 8005664:	4682      	mov	sl, r0
 8005666:	460c      	mov	r4, r1
 8005668:	4690      	mov	r8, r2
 800566a:	461f      	mov	r7, r3
 800566c:	d838      	bhi.n	80056e0 <__ssputs_r+0x84>
 800566e:	898a      	ldrh	r2, [r1, #12]
 8005670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005674:	d032      	beq.n	80056dc <__ssputs_r+0x80>
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	6909      	ldr	r1, [r1, #16]
 800567a:	eba5 0901 	sub.w	r9, r5, r1
 800567e:	6965      	ldr	r5, [r4, #20]
 8005680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005688:	3301      	adds	r3, #1
 800568a:	444b      	add	r3, r9
 800568c:	106d      	asrs	r5, r5, #1
 800568e:	429d      	cmp	r5, r3
 8005690:	bf38      	it	cc
 8005692:	461d      	movcc	r5, r3
 8005694:	0553      	lsls	r3, r2, #21
 8005696:	d531      	bpl.n	80056fc <__ssputs_r+0xa0>
 8005698:	4629      	mov	r1, r5
 800569a:	f000 fb63 	bl	8005d64 <_malloc_r>
 800569e:	4606      	mov	r6, r0
 80056a0:	b950      	cbnz	r0, 80056b8 <__ssputs_r+0x5c>
 80056a2:	230c      	movs	r3, #12
 80056a4:	f8ca 3000 	str.w	r3, [sl]
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	6921      	ldr	r1, [r4, #16]
 80056ba:	464a      	mov	r2, r9
 80056bc:	f000 fabe 	bl	8005c3c <memcpy>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	6126      	str	r6, [r4, #16]
 80056ce:	6165      	str	r5, [r4, #20]
 80056d0:	444e      	add	r6, r9
 80056d2:	eba5 0509 	sub.w	r5, r5, r9
 80056d6:	6026      	str	r6, [r4, #0]
 80056d8:	60a5      	str	r5, [r4, #8]
 80056da:	463e      	mov	r6, r7
 80056dc:	42be      	cmp	r6, r7
 80056de:	d900      	bls.n	80056e2 <__ssputs_r+0x86>
 80056e0:	463e      	mov	r6, r7
 80056e2:	6820      	ldr	r0, [r4, #0]
 80056e4:	4632      	mov	r2, r6
 80056e6:	4641      	mov	r1, r8
 80056e8:	f000 fab6 	bl	8005c58 <memmove>
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	1b9b      	subs	r3, r3, r6
 80056f0:	60a3      	str	r3, [r4, #8]
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	4433      	add	r3, r6
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	2000      	movs	r0, #0
 80056fa:	e7db      	b.n	80056b4 <__ssputs_r+0x58>
 80056fc:	462a      	mov	r2, r5
 80056fe:	f000 fba5 	bl	8005e4c <_realloc_r>
 8005702:	4606      	mov	r6, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	d1e1      	bne.n	80056cc <__ssputs_r+0x70>
 8005708:	6921      	ldr	r1, [r4, #16]
 800570a:	4650      	mov	r0, sl
 800570c:	f000 fabe 	bl	8005c8c <_free_r>
 8005710:	e7c7      	b.n	80056a2 <__ssputs_r+0x46>
	...

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	; 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d50e      	bpl.n	8005746 <_svfiprintf_r+0x32>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b963      	cbnz	r3, 8005746 <_svfiprintf_r+0x32>
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	f000 fb19 	bl	8005d64 <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b920      	cbnz	r0, 8005742 <_svfiprintf_r+0x2e>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e0d1      	b.n	80058e6 <_svfiprintf_r+0x1d2>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	616b      	str	r3, [r5, #20]
 8005746:	2300      	movs	r3, #0
 8005748:	9309      	str	r3, [sp, #36]	; 0x24
 800574a:	2320      	movs	r3, #32
 800574c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005750:	f8cd 800c 	str.w	r8, [sp, #12]
 8005754:	2330      	movs	r3, #48	; 0x30
 8005756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005900 <_svfiprintf_r+0x1ec>
 800575a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575e:	f04f 0901 	mov.w	r9, #1
 8005762:	4623      	mov	r3, r4
 8005764:	469a      	mov	sl, r3
 8005766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576a:	b10a      	cbz	r2, 8005770 <_svfiprintf_r+0x5c>
 800576c:	2a25      	cmp	r2, #37	; 0x25
 800576e:	d1f9      	bne.n	8005764 <_svfiprintf_r+0x50>
 8005770:	ebba 0b04 	subs.w	fp, sl, r4
 8005774:	d00b      	beq.n	800578e <_svfiprintf_r+0x7a>
 8005776:	465b      	mov	r3, fp
 8005778:	4622      	mov	r2, r4
 800577a:	4629      	mov	r1, r5
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff6d 	bl	800565c <__ssputs_r>
 8005782:	3001      	adds	r0, #1
 8005784:	f000 80aa 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578a:	445a      	add	r2, fp
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	f89a 3000 	ldrb.w	r3, [sl]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a2 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005798:	2300      	movs	r3, #0
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a2:	f10a 0a01 	add.w	sl, sl, #1
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ae:	931a      	str	r3, [sp, #104]	; 0x68
 80057b0:	4654      	mov	r4, sl
 80057b2:	2205      	movs	r2, #5
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	4851      	ldr	r0, [pc, #324]	; (8005900 <_svfiprintf_r+0x1ec>)
 80057ba:	f7fa fd19 	bl	80001f0 <memchr>
 80057be:	9a04      	ldr	r2, [sp, #16]
 80057c0:	b9d8      	cbnz	r0, 80057fa <_svfiprintf_r+0xe6>
 80057c2:	06d0      	lsls	r0, r2, #27
 80057c4:	bf44      	itt	mi
 80057c6:	2320      	movmi	r3, #32
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	0711      	lsls	r1, r2, #28
 80057ce:	bf44      	itt	mi
 80057d0:	232b      	movmi	r3, #43	; 0x2b
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	f89a 3000 	ldrb.w	r3, [sl]
 80057da:	2b2a      	cmp	r3, #42	; 0x2a
 80057dc:	d015      	beq.n	800580a <_svfiprintf_r+0xf6>
 80057de:	9a07      	ldr	r2, [sp, #28]
 80057e0:	4654      	mov	r4, sl
 80057e2:	2000      	movs	r0, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4621      	mov	r1, r4
 80057ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ee:	3b30      	subs	r3, #48	; 0x30
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d94e      	bls.n	8005892 <_svfiprintf_r+0x17e>
 80057f4:	b1b0      	cbz	r0, 8005824 <_svfiprintf_r+0x110>
 80057f6:	9207      	str	r2, [sp, #28]
 80057f8:	e014      	b.n	8005824 <_svfiprintf_r+0x110>
 80057fa:	eba0 0308 	sub.w	r3, r0, r8
 80057fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	46a2      	mov	sl, r4
 8005808:	e7d2      	b.n	80057b0 <_svfiprintf_r+0x9c>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9103      	str	r1, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbb      	ittet	lt
 8005816:	425b      	neglt	r3, r3
 8005818:	f042 0202 	orrlt.w	r2, r2, #2
 800581c:	9307      	strge	r3, [sp, #28]
 800581e:	9307      	strlt	r3, [sp, #28]
 8005820:	bfb8      	it	lt
 8005822:	9204      	strlt	r2, [sp, #16]
 8005824:	7823      	ldrb	r3, [r4, #0]
 8005826:	2b2e      	cmp	r3, #46	; 0x2e
 8005828:	d10c      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582a:	7863      	ldrb	r3, [r4, #1]
 800582c:	2b2a      	cmp	r3, #42	; 0x2a
 800582e:	d135      	bne.n	800589c <_svfiprintf_r+0x188>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9203      	str	r2, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfb8      	it	lt
 800583c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005910 <_svfiprintf_r+0x1fc>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fccf 	bl	80001f0 <memchr>
 8005852:	b140      	cbz	r0, 8005866 <_svfiprintf_r+0x152>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	fa03 f000 	lsl.w	r0, r3, r0
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	4303      	orrs	r3, r0
 8005862:	3401      	adds	r4, #1
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4826      	ldr	r0, [pc, #152]	; (8005904 <_svfiprintf_r+0x1f0>)
 800586c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005870:	2206      	movs	r2, #6
 8005872:	f7fa fcbd 	bl	80001f0 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d038      	beq.n	80058ec <_svfiprintf_r+0x1d8>
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <_svfiprintf_r+0x1f4>)
 800587c:	bb1b      	cbnz	r3, 80058c6 <_svfiprintf_r+0x1b2>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	3308      	adds	r3, #8
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	4433      	add	r3, r6
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
 8005890:	e767      	b.n	8005762 <_svfiprintf_r+0x4e>
 8005892:	fb0c 3202 	mla	r2, ip, r2, r3
 8005896:	460c      	mov	r4, r1
 8005898:	2001      	movs	r0, #1
 800589a:	e7a5      	b.n	80057e8 <_svfiprintf_r+0xd4>
 800589c:	2300      	movs	r3, #0
 800589e:	3401      	adds	r4, #1
 80058a0:	9305      	str	r3, [sp, #20]
 80058a2:	4619      	mov	r1, r3
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ae:	3a30      	subs	r2, #48	; 0x30
 80058b0:	2a09      	cmp	r2, #9
 80058b2:	d903      	bls.n	80058bc <_svfiprintf_r+0x1a8>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0c5      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	e7c3      	b.n	8005844 <_svfiprintf_r+0x130>
 80058bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c0:	4604      	mov	r4, r0
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f0      	b.n	80058a8 <_svfiprintf_r+0x194>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <_svfiprintf_r+0x1f8>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4638      	mov	r0, r7
 80058d2:	f3af 8000 	nop.w
 80058d6:	1c42      	adds	r2, r0, #1
 80058d8:	4606      	mov	r6, r0
 80058da:	d1d6      	bne.n	800588a <_svfiprintf_r+0x176>
 80058dc:	89ab      	ldrh	r3, [r5, #12]
 80058de:	065b      	lsls	r3, r3, #25
 80058e0:	f53f af2c 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e6:	b01d      	add	sp, #116	; 0x74
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <_svfiprintf_r+0x1f8>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4638      	mov	r0, r7
 80058f8:	f000 f87a 	bl	80059f0 <_printf_i>
 80058fc:	e7eb      	b.n	80058d6 <_svfiprintf_r+0x1c2>
 80058fe:	bf00      	nop
 8005900:	08005f64 	.word	0x08005f64
 8005904:	08005f6e 	.word	0x08005f6e
 8005908:	00000000 	.word	0x00000000
 800590c:	0800565d 	.word	0x0800565d
 8005910:	08005f6a 	.word	0x08005f6a

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005970:	4649      	mov	r1, r9
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	6832      	ldr	r2, [r6, #0]
 8005980:	f003 0306 	and.w	r3, r3, #6
 8005984:	2b04      	cmp	r3, #4
 8005986:	bf08      	it	eq
 8005988:	1aad      	subeq	r5, r5, r2
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4649      	mov	r1, r9
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c0      	blx	r8
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	7e0f      	ldrb	r7, [r1, #24]
 80059f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f8:	2f78      	cmp	r7, #120	; 0x78
 80059fa:	4691      	mov	r9, r2
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	469a      	mov	sl, r3
 8005a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	; 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d8 	beq.w	8005bc2 <_printf_i+0x1d2>
 8005a12:	2f58      	cmp	r7, #88	; 0x58
 8005a14:	f000 80a3 	beq.w	8005b5e <_printf_i+0x16e>
 8005a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a101      	add	r1, pc, #4	; (adr r1, 8005a30 <_printf_i+0x40>)
 8005a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005b8b 	.word	0x08005b8b
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bcb 	.word	0x08005bcb
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0a3      	b.n	8005be4 <_printf_i+0x1f4>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	0606      	lsls	r6, r0, #24
 8005aa2:	f101 0304 	add.w	r3, r1, #4
 8005aa6:	d50a      	bpl.n	8005abe <_printf_i+0xce>
 8005aa8:	680e      	ldr	r6, [r1, #0]
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xc8>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	4276      	negs	r6, r6
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_printf_i+0x244>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0x102>
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ac6:	bf18      	it	ne
 8005ac8:	b236      	sxthne	r6, r6
 8005aca:	e7ef      	b.n	8005aac <_printf_i+0xbc>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6029      	str	r1, [r5, #0]
 8005ad4:	0601      	lsls	r1, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xec>
 8005ad8:	681e      	ldr	r6, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0xf2>
 8005adc:	0646      	lsls	r6, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xe8>
 8005ae0:	881e      	ldrh	r6, [r3, #0]
 8005ae2:	4854      	ldr	r0, [pc, #336]	; (8005c34 <_printf_i+0x244>)
 8005ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2308      	moveq	r3, #8
 8005aea:	230a      	movne	r3, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af2:	6865      	ldr	r5, [r4, #4]
 8005af4:	60a5      	str	r5, [r4, #8]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90e      	cbnz	r6, 8005b08 <_printf_i+0x118>
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	d04d      	beq.n	8005ba4 <_printf_i+0x1b4>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b18:	4637      	mov	r7, r6
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460e      	mov	r6, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x11a>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x14c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07de      	lsls	r6, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b3c:	1b52      	subs	r2, r2, r5
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee2 	bl	8005914 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14c      	bne.n	8005bee <_printf_i+0x1fe>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	4835      	ldr	r0, [pc, #212]	; (8005c34 <_printf_i+0x244>)
 8005b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b6c:	6029      	str	r1, [r5, #0]
 8005b6e:	061d      	lsls	r5, r3, #24
 8005b70:	d514      	bpl.n	8005b9c <_printf_i+0x1ac>
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7a:	6023      	strmi	r3, [r4, #0]
 8005b7c:	b91e      	cbnz	r6, 8005b86 <_printf_i+0x196>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7b0      	b.n	8005aec <_printf_i+0xfc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2378      	movs	r3, #120	; 0x78
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_printf_i+0x248>)
 8005b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9a:	e7e3      	b.n	8005b64 <_printf_i+0x174>
 8005b9c:	0659      	lsls	r1, r3, #25
 8005b9e:	bf48      	it	mi
 8005ba0:	b2b6      	uxthmi	r6, r6
 8005ba2:	e7e6      	b.n	8005b72 <_printf_i+0x182>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	e7bb      	b.n	8005b20 <_printf_i+0x130>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6028      	str	r0, [r5, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1cc>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1d2>
 8005bbc:	0670      	lsls	r0, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c8>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7ba      	b.n	8005b40 <_printf_i+0x150>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	602a      	str	r2, [r5, #0]
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fb0a 	bl	80001f0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1f2>
 8005bde:	1b40      	subs	r0, r0, r5
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7a8      	b.n	8005b40 <_printf_i+0x150>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ab      	beq.n	8005b54 <_printf_i+0x164>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x23a>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a4      	b.n	8005b58 <_printf_i+0x168>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09b      	beq.n	8005b54 <_printf_i+0x164>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x21e>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x212>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x22e>
 8005c32:	bf00      	nop
 8005c34:	08005f75 	.word	0x08005f75
 8005c38:	08005f86 	.word	0x08005f86

08005c3c <memcpy>:
 8005c3c:	440a      	add	r2, r1
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c44:	d100      	bne.n	8005c48 <memcpy+0xc>
 8005c46:	4770      	bx	lr
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d1f9      	bne.n	8005c4a <memcpy+0xe>
 8005c56:	bd10      	pop	{r4, pc}

08005c58 <memmove>:
 8005c58:	4288      	cmp	r0, r1
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	eb01 0402 	add.w	r4, r1, r2
 8005c60:	d902      	bls.n	8005c68 <memmove+0x10>
 8005c62:	4284      	cmp	r4, r0
 8005c64:	4623      	mov	r3, r4
 8005c66:	d807      	bhi.n	8005c78 <memmove+0x20>
 8005c68:	1e43      	subs	r3, r0, #1
 8005c6a:	42a1      	cmp	r1, r4
 8005c6c:	d008      	beq.n	8005c80 <memmove+0x28>
 8005c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c76:	e7f8      	b.n	8005c6a <memmove+0x12>
 8005c78:	4402      	add	r2, r0
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	428a      	cmp	r2, r1
 8005c7e:	d100      	bne.n	8005c82 <memmove+0x2a>
 8005c80:	bd10      	pop	{r4, pc}
 8005c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c8a:	e7f7      	b.n	8005c7c <memmove+0x24>

08005c8c <_free_r>:
 8005c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d044      	beq.n	8005d1c <_free_r+0x90>
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	9001      	str	r0, [sp, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c9e:	bfb8      	it	lt
 8005ca0:	18e4      	addlt	r4, r4, r3
 8005ca2:	f000 f913 	bl	8005ecc <__malloc_lock>
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <_free_r+0x94>)
 8005ca8:	9801      	ldr	r0, [sp, #4]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	b933      	cbnz	r3, 8005cbc <_free_r+0x30>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	6014      	str	r4, [r2, #0]
 8005cb2:	b003      	add	sp, #12
 8005cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb8:	f000 b90e 	b.w	8005ed8 <__malloc_unlock>
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	d908      	bls.n	8005cd2 <_free_r+0x46>
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	1961      	adds	r1, r4, r5
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf01      	itttt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	1949      	addeq	r1, r1, r5
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	e7ed      	b.n	8005cae <_free_r+0x22>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b10b      	cbz	r3, 8005cdc <_free_r+0x50>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d9fa      	bls.n	8005cd2 <_free_r+0x46>
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	1855      	adds	r5, r2, r1
 8005ce0:	42a5      	cmp	r5, r4
 8005ce2:	d10b      	bne.n	8005cfc <_free_r+0x70>
 8005ce4:	6824      	ldr	r4, [r4, #0]
 8005ce6:	4421      	add	r1, r4
 8005ce8:	1854      	adds	r4, r2, r1
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	d1e0      	bne.n	8005cb2 <_free_r+0x26>
 8005cf0:	681c      	ldr	r4, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	4421      	add	r1, r4
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	e7da      	b.n	8005cb2 <_free_r+0x26>
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x78>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	e7d6      	b.n	8005cb2 <_free_r+0x26>
 8005d04:	6825      	ldr	r5, [r4, #0]
 8005d06:	1961      	adds	r1, r4, r5
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf04      	itt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	bf04      	itt	eq
 8005d14:	1949      	addeq	r1, r1, r5
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	6054      	str	r4, [r2, #4]
 8005d1a:	e7ca      	b.n	8005cb2 <_free_r+0x26>
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	20000238 	.word	0x20000238

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0e      	ldr	r6, [pc, #56]	; (8005d60 <sbrk_aligned+0x3c>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 f8bc 	bl	8005eac <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 f8b7 	bl	8005eac <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d00a      	beq.n	8005d58 <sbrk_aligned+0x34>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d007      	beq.n	8005d5c <sbrk_aligned+0x38>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f8ac 	bl	8005eac <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d101      	bne.n	8005d5c <sbrk_aligned+0x38>
 8005d58:	f04f 34ff 	mov.w	r4, #4294967295
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	2000023c 	.word	0x2000023c

08005d64 <_malloc_r>:
 8005d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d905      	bls.n	8005d8c <_malloc_r+0x28>
 8005d80:	230c      	movs	r3, #12
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	2600      	movs	r6, #0
 8005d86:	4630      	mov	r0, r6
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8c:	4e2e      	ldr	r6, [pc, #184]	; (8005e48 <_malloc_r+0xe4>)
 8005d8e:	f000 f89d 	bl	8005ecc <__malloc_lock>
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	461c      	mov	r4, r3
 8005d96:	bb34      	cbnz	r4, 8005de6 <_malloc_r+0x82>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	f7ff ffc2 	bl	8005d24 <sbrk_aligned>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	4604      	mov	r4, r0
 8005da4:	d14d      	bne.n	8005e42 <_malloc_r+0xde>
 8005da6:	6834      	ldr	r4, [r6, #0]
 8005da8:	4626      	mov	r6, r4
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d140      	bne.n	8005e30 <_malloc_r+0xcc>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	4631      	mov	r1, r6
 8005db2:	4638      	mov	r0, r7
 8005db4:	eb04 0803 	add.w	r8, r4, r3
 8005db8:	f000 f878 	bl	8005eac <_sbrk_r>
 8005dbc:	4580      	cmp	r8, r0
 8005dbe:	d13a      	bne.n	8005e36 <_malloc_r+0xd2>
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	3503      	adds	r5, #3
 8005dc4:	1a6d      	subs	r5, r5, r1
 8005dc6:	f025 0503 	bic.w	r5, r5, #3
 8005dca:	3508      	adds	r5, #8
 8005dcc:	2d0c      	cmp	r5, #12
 8005dce:	bf38      	it	cc
 8005dd0:	250c      	movcc	r5, #12
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f7ff ffa5 	bl	8005d24 <sbrk_aligned>
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d02b      	beq.n	8005e36 <_malloc_r+0xd2>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	442b      	add	r3, r5
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	e00e      	b.n	8005e04 <_malloc_r+0xa0>
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	1b52      	subs	r2, r2, r5
 8005dea:	d41e      	bmi.n	8005e2a <_malloc_r+0xc6>
 8005dec:	2a0b      	cmp	r2, #11
 8005dee:	d916      	bls.n	8005e1e <_malloc_r+0xba>
 8005df0:	1961      	adds	r1, r4, r5
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	6025      	str	r5, [r4, #0]
 8005df6:	bf18      	it	ne
 8005df8:	6059      	strne	r1, [r3, #4]
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	bf08      	it	eq
 8005dfe:	6031      	streq	r1, [r6, #0]
 8005e00:	5162      	str	r2, [r4, r5]
 8005e02:	604b      	str	r3, [r1, #4]
 8005e04:	4638      	mov	r0, r7
 8005e06:	f104 060b 	add.w	r6, r4, #11
 8005e0a:	f000 f865 	bl	8005ed8 <__malloc_unlock>
 8005e0e:	f026 0607 	bic.w	r6, r6, #7
 8005e12:	1d23      	adds	r3, r4, #4
 8005e14:	1af2      	subs	r2, r6, r3
 8005e16:	d0b6      	beq.n	8005d86 <_malloc_r+0x22>
 8005e18:	1b9b      	subs	r3, r3, r6
 8005e1a:	50a3      	str	r3, [r4, r2]
 8005e1c:	e7b3      	b.n	8005d86 <_malloc_r+0x22>
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	bf0c      	ite	eq
 8005e24:	6032      	streq	r2, [r6, #0]
 8005e26:	605a      	strne	r2, [r3, #4]
 8005e28:	e7ec      	b.n	8005e04 <_malloc_r+0xa0>
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	6864      	ldr	r4, [r4, #4]
 8005e2e:	e7b2      	b.n	8005d96 <_malloc_r+0x32>
 8005e30:	4634      	mov	r4, r6
 8005e32:	6876      	ldr	r6, [r6, #4]
 8005e34:	e7b9      	b.n	8005daa <_malloc_r+0x46>
 8005e36:	230c      	movs	r3, #12
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f000 f84c 	bl	8005ed8 <__malloc_unlock>
 8005e40:	e7a1      	b.n	8005d86 <_malloc_r+0x22>
 8005e42:	6025      	str	r5, [r4, #0]
 8005e44:	e7de      	b.n	8005e04 <_malloc_r+0xa0>
 8005e46:	bf00      	nop
 8005e48:	20000238 	.word	0x20000238

08005e4c <_realloc_r>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	4680      	mov	r8, r0
 8005e52:	4614      	mov	r4, r2
 8005e54:	460e      	mov	r6, r1
 8005e56:	b921      	cbnz	r1, 8005e62 <_realloc_r+0x16>
 8005e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	f7ff bf81 	b.w	8005d64 <_malloc_r>
 8005e62:	b92a      	cbnz	r2, 8005e70 <_realloc_r+0x24>
 8005e64:	f7ff ff12 	bl	8005c8c <_free_r>
 8005e68:	4625      	mov	r5, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e70:	f000 f838 	bl	8005ee4 <_malloc_usable_size_r>
 8005e74:	4284      	cmp	r4, r0
 8005e76:	4607      	mov	r7, r0
 8005e78:	d802      	bhi.n	8005e80 <_realloc_r+0x34>
 8005e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e7e:	d812      	bhi.n	8005ea6 <_realloc_r+0x5a>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7ff ff6e 	bl	8005d64 <_malloc_r>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d0ed      	beq.n	8005e6a <_realloc_r+0x1e>
 8005e8e:	42bc      	cmp	r4, r7
 8005e90:	4622      	mov	r2, r4
 8005e92:	4631      	mov	r1, r6
 8005e94:	bf28      	it	cs
 8005e96:	463a      	movcs	r2, r7
 8005e98:	f7ff fed0 	bl	8005c3c <memcpy>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff fef4 	bl	8005c8c <_free_r>
 8005ea4:	e7e1      	b.n	8005e6a <_realloc_r+0x1e>
 8005ea6:	4635      	mov	r5, r6
 8005ea8:	e7df      	b.n	8005e6a <_realloc_r+0x1e>
	...

08005eac <_sbrk_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_sbrk_r+0x1c>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fb fcc8 	bl	800184c <_sbrk>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_sbrk_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_sbrk_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	20000240 	.word	0x20000240

08005ecc <__malloc_lock>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	; (8005ed4 <__malloc_lock+0x8>)
 8005ece:	f000 b811 	b.w	8005ef4 <__retarget_lock_acquire_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	20000244 	.word	0x20000244

08005ed8 <__malloc_unlock>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <__malloc_unlock+0x8>)
 8005eda:	f000 b80c 	b.w	8005ef6 <__retarget_lock_release_recursive>
 8005ede:	bf00      	nop
 8005ee0:	20000244 	.word	0x20000244

08005ee4 <_malloc_usable_size_r>:
 8005ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee8:	1f18      	subs	r0, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfbc      	itt	lt
 8005eee:	580b      	ldrlt	r3, [r1, r0]
 8005ef0:	18c0      	addlt	r0, r0, r3
 8005ef2:	4770      	bx	lr

08005ef4 <__retarget_lock_acquire_recursive>:
 8005ef4:	4770      	bx	lr

08005ef6 <__retarget_lock_release_recursive>:
 8005ef6:	4770      	bx	lr

08005ef8 <_init>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr

08005f04 <_fini>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr
