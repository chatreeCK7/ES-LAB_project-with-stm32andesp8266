
testSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005958  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b6c  08005b6c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b74  08005b74  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08005b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200000b0  08005c2c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08005c2c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104f3  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ece  00000000  00000000  000305d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000324a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00033390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f20  00000000  00000000  000341e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a73  00000000  00000000  00036108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a70  00000000  00000000  00047b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d85eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004544  00000000  00000000  000d863c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ae0 	.word	0x08005ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08005ae0 	.word	0x08005ae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08d      	sub	sp, #52	; 0x34
 8000dc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fd29 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f97b 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fab9 	bl	8001344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 fa63 	bl	800129c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dd6:	f000 f9dd 	bl	8001194 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000dda:	f000 fa09 	bl	80011f0 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000dde:	f000 fa87 	bl	80012f0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000de2:	48a9      	ldr	r0, [pc, #676]	; (8001088 <main+0x2c8>)
 8000de4:	f002 fcbe 	bl	8003764 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	48a7      	ldr	r0, [pc, #668]	; (800108c <main+0x2cc>)
 8000df0:	f001 f8ea 	bl	8001fc8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)&rec, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	49a6      	ldr	r1, [pc, #664]	; (8001090 <main+0x2d0>)
 8000df8:	48a6      	ldr	r0, [pc, #664]	; (8001094 <main+0x2d4>)
 8000dfa:	f003 fa32 	bl	8004262 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     HAL_StatusTypeDef status;
         status = HAL_I2C_IsDeviceReady(&hi2c1, (0x5A<<1), 4, 100);
 8000dfe:	2364      	movs	r3, #100	; 0x64
 8000e00:	2204      	movs	r2, #4
 8000e02:	21b4      	movs	r1, #180	; 0xb4
 8000e04:	48a4      	ldr	r0, [pc, #656]	; (8001098 <main+0x2d8>)
 8000e06:	f001 fc63 	bl	80026d0 <HAL_I2C_IsDeviceReady>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	77fb      	strb	r3, [r7, #31]
         if(status==HAL_OK){
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10d      	bne.n	8000e30 <main+0x70>
       	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2120      	movs	r1, #32
 8000e18:	489c      	ldr	r0, [pc, #624]	; (800108c <main+0x2cc>)
 8000e1a:	f001 f8d5 	bl	8001fc8 <HAL_GPIO_WritePin>
       	  HAL_Delay(1000);
 8000e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e22:	f000 fd6d 	bl	8001900 <HAL_Delay>
       	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4898      	ldr	r0, [pc, #608]	; (800108c <main+0x2cc>)
 8000e2c:	f001 f8cc 	bl	8001fc8 <HAL_GPIO_WritePin>
         }
  while (1)
  {

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	4895      	ldr	r0, [pc, #596]	; (800108c <main+0x2cc>)
 8000e38:	f001 f8c6 	bl	8001fc8 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <main+0x2c8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000e44:	bf00      	nop
 8000e46:	4b90      	ldr	r3, [pc, #576]	; (8001088 <main+0x2c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	d9fa      	bls.n	8000e46 <main+0x86>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	488d      	ldr	r0, [pc, #564]	; (800108c <main+0x2cc>)
 8000e58:	f001 f8b6 	bl	8001fc8 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e5c:	f000 fd44 	bl	80018e8 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a8e      	ldr	r2, [pc, #568]	; (800109c <main+0x2dc>)
 8000e64:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000e66:	bf00      	nop
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4887      	ldr	r0, [pc, #540]	; (800108c <main+0x2cc>)
 8000e6e:	f001 f893 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <main+0xca>
 8000e78:	4b88      	ldr	r3, [pc, #544]	; (800109c <main+0x2dc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f103 040a 	add.w	r4, r3, #10
 8000e80:	f000 fd32 	bl	80018e8 <HAL_GetTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	429c      	cmp	r4, r3
 8000e88:	d8ee      	bhi.n	8000e68 <main+0xa8>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e8a:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <main+0x2c8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	4a83      	ldr	r2, [pc, #524]	; (80010a0 <main+0x2e0>)
 8000e92:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e94:	f000 fd28 	bl	80018e8 <HAL_GetTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a80      	ldr	r2, [pc, #512]	; (800109c <main+0x2dc>)
 8000e9c:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e9e:	bf00      	nop
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	4879      	ldr	r0, [pc, #484]	; (800108c <main+0x2cc>)
 8000ea6:	f001 f877 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d008      	beq.n	8000ec2 <main+0x102>
 8000eb0:	4b7a      	ldr	r3, [pc, #488]	; (800109c <main+0x2dc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000eb8:	f000 fd16 	bl	80018e8 <HAL_GetTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	d8ee      	bhi.n	8000ea0 <main+0xe0>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <main+0x2c8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	4a76      	ldr	r2, [pc, #472]	; (80010a4 <main+0x2e4>)
 8000eca:	6013      	str	r3, [r2, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8000ecc:	4b75      	ldr	r3, [pc, #468]	; (80010a4 <main+0x2e4>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <main+0x2e0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb1c 	bl	8000514 <__aeabi_ui2d>
 8000edc:	a364      	add	r3, pc, #400	; (adr r3, 8001070 <main+0x2b0>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff fb91 	bl	8000608 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef6:	f7ff fcb1 	bl	800085c <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fdbb 	bl	8000a7c <__aeabi_d2uiz>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <main+0x2e8>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	      sprintf(data,"%d \r\n", Distance);
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <main+0x2e8>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4965      	ldr	r1, [pc, #404]	; (80010ac <main+0x2ec>)
 8000f16:	4866      	ldr	r0, [pc, #408]	; (80010b0 <main+0x2f0>)
 8000f18:	f004 f974 	bl	8005204 <siprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 8000f1c:	4864      	ldr	r0, [pc, #400]	; (80010b0 <main+0x2f0>)
 8000f1e:	f7ff f95f 	bl	80001e0 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	4961      	ldr	r1, [pc, #388]	; (80010b0 <main+0x2f0>)
 8000f2c:	4861      	ldr	r0, [pc, #388]	; (80010b4 <main+0x2f4>)
 8000f2e:	f003 f906 	bl	800413e <HAL_UART_Transmit>
	      HAL_Delay(50);
 8000f32:	2032      	movs	r0, #50	; 0x32
 8000f34:	f000 fce4 	bl	8001900 <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x06, 1, (uint8_t *)data_read, 2, 100);
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2206      	movs	r2, #6
 8000f48:	21b4      	movs	r1, #180	; 0xb4
 8000f4a:	4853      	ldr	r0, [pc, #332]	; (8001098 <main+0x2d8>)
 8000f4c:	f001 f99a 	bl	8002284 <HAL_I2C_Mem_Read>

	  	  	  aux = (int16_t) ((data_read[1] << 8) | data_read[0]);
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	793b      	ldrb	r3, [r7, #4]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	83bb      	strh	r3, [r7, #28]
	  	  	  ambient_temperature = aux * 0.02 - 273.15;
 8000f5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fae6 	bl	8000534 <__aeabi_i2d>
 8000f68:	a343      	add	r3, pc, #268	; (adr r3, 8001078 <main+0x2b8>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fb4b 	bl	8000608 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	a341      	add	r3, pc, #260	; (adr r3, 8001080 <main+0x2c0>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f98a 	bl	8000298 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fd4e 	bl	8000a2c <__aeabi_d2iz>
 8000f90:	4603      	mov	r3, r0
 8000f92:	837b      	strh	r3, [r7, #26]

	  	  	  HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fcb3 	bl	8001900 <HAL_Delay>

	  	  	  HAL_I2C_Mem_Read(&hi2c1,(0x5A<<1), 0x07, 1, (uint8_t *)data_read1, 2, 100);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2207      	movs	r2, #7
 8000faa:	21b4      	movs	r1, #180	; 0xb4
 8000fac:	483a      	ldr	r0, [pc, #232]	; (8001098 <main+0x2d8>)
 8000fae:	f001 f969 	bl	8002284 <HAL_I2C_Mem_Read>

	  	  	  aux1 = (int16_t) ((data_read1[1] << 8) | data_read1[0]);
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	783b      	ldrb	r3, [r7, #0]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	833b      	strh	r3, [r7, #24]
	  	  	  ambient_temperature1 = aux1 * 0.02 - 273.15;
 8000fc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fab5 	bl	8000534 <__aeabi_i2d>
 8000fca:	a32b      	add	r3, pc, #172	; (adr r3, 8001078 <main+0x2b8>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fb1a 	bl	8000608 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a328      	add	r3, pc, #160	; (adr r3, 8001080 <main+0x2c0>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff f959 	bl	8000298 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd1d 	bl	8000a2c <__aeabi_d2iz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	82fb      	strh	r3, [r7, #22]

	  	  	  HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f000 fc82 	bl	8001900 <HAL_Delay>

	  	  	  sprintf(data,"\f Ambient = %d \r\n", ambient_temperature);
 8000ffc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001000:	461a      	mov	r2, r3
 8001002:	492d      	ldr	r1, [pc, #180]	; (80010b8 <main+0x2f8>)
 8001004:	482a      	ldr	r0, [pc, #168]	; (80010b0 <main+0x2f0>)
 8001006:	f004 f8fd 	bl	8005204 <siprintf>

	  	  	  sprintf(data1,"%d %d \r\n", ambient_temperature1, Distance);
 800100a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <main+0x2e8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	492a      	ldr	r1, [pc, #168]	; (80010bc <main+0x2fc>)
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <main+0x300>)
 8001016:	f004 f8f5 	bl	8005204 <siprintf>

	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 1000);
 800101a:	4825      	ldr	r0, [pc, #148]	; (80010b0 <main+0x2f0>)
 800101c:	f7ff f8e0 	bl	80001e0 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	4921      	ldr	r1, [pc, #132]	; (80010b0 <main+0x2f0>)
 800102a:	4822      	ldr	r0, [pc, #136]	; (80010b4 <main+0x2f4>)
 800102c:	f003 f887 	bl	800413e <HAL_UART_Transmit>
	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), 1000);
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <main+0x300>)
 8001032:	f7ff f8d5 	bl	80001e0 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	4920      	ldr	r1, [pc, #128]	; (80010c0 <main+0x300>)
 8001040:	481c      	ldr	r0, [pc, #112]	; (80010b4 <main+0x2f4>)
 8001042:	f003 f87c 	bl	800413e <HAL_UART_Transmit>
	  	  	  HAL_UART_Transmit(&huart6, (uint8_t*)data1, strlen(data1), 1000);
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <main+0x300>)
 8001048:	f7ff f8ca 	bl	80001e0 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001054:	491a      	ldr	r1, [pc, #104]	; (80010c0 <main+0x300>)
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <main+0x2d4>)
 8001058:	f003 f871 	bl	800413e <HAL_UART_Transmit>


	  //HAL_UART_Transmit(&huart6, senddata, strlen(senddata), 100);
	  //HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
	  HAL_Delay(200);
 800105c:	20c8      	movs	r0, #200	; 0xc8
 800105e:	f000 fc4f 	bl	8001900 <HAL_Delay>
	  //sprintf(senddata_2, "%d", state);
	  //HAL_UART_Transmit(&huart6, senddata_2, strlen(senddata_2), 100);
	  HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	f000 fc4b 	bl	8001900 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800106a:	e6e1      	b.n	8000e30 <main+0x70>
 800106c:	f3af 8000 	nop.w
 8001070:	b020c49c 	.word	0xb020c49c
 8001074:	3fa16872 	.word	0x3fa16872
 8001078:	47ae147b 	.word	0x47ae147b
 800107c:	3f947ae1 	.word	0x3f947ae1
 8001080:	66666666 	.word	0x66666666
 8001084:	40711266 	.word	0x40711266
 8001088:	20000120 	.word	0x20000120
 800108c:	40020000 	.word	0x40020000
 8001090:	200001fe 	.word	0x200001fe
 8001094:	200001ac 	.word	0x200001ac
 8001098:	200000cc 	.word	0x200000cc
 800109c:	200001f0 	.word	0x200001f0
 80010a0:	200001f4 	.word	0x200001f4
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	08005af8 	.word	0x08005af8
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000168 	.word	0x20000168
 80010b8:	08005b00 	.word	0x08005b00
 80010bc:	08005b14 	.word	0x08005b14
 80010c0:	20000020 	.word	0x20000020

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f88e 	bl	80051f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <SystemClock_Config+0xc8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <SystemClock_Config+0xc8>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <SystemClock_Config+0xc8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <SystemClock_Config+0xcc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <SystemClock_Config+0xcc>)
 800110e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <SystemClock_Config+0xcc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001134:	2304      	movs	r3, #4
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001138:	2348      	movs	r3, #72	; 0x48
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fe73 	bl	8002e34 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001154:	f000 f966 	bl	8001424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2102      	movs	r1, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f002 f8d5 	bl	8003324 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001180:	f000 f950 	bl	8001424 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x50>)
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_I2C1_Init+0x54>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_I2C1_Init+0x58>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_I2C1_Init+0x50>)
 80011d2:	f000 ff13 	bl	8001ffc <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 f922 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000cc 	.word	0x200000cc
 80011e8:	40005400 	.word	0x40005400
 80011ec:	000186a0 	.word	0x000186a0

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_TIM1_Init+0xa4>)
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MX_TIM1_Init+0xa8>)
 8001210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_TIM1_Init+0xa4>)
 8001214:	2247      	movs	r2, #71	; 0x47
 8001216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM1_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_TIM1_Init+0xa4>)
 8001220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM1_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <MX_TIM1_Init+0xa4>)
 800123a:	f002 faed 	bl	8003818 <HAL_TIM_IC_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8ee 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	480f      	ldr	r0, [pc, #60]	; (8001294 <MX_TIM1_Init+0xa4>)
 8001258:	f002 fea2 	bl	8003fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001262:	f000 f8df 	bl	8001424 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126a:	2301      	movs	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM1_Init+0xa4>)
 800127e:	f002 fc22 	bl	8003ac6 <HAL_TIM_IC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001288:	f000 f8cc 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000120 	.word	0x20000120
 8001298:	40010000 	.word	0x40010000

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f002 fee6 	bl	80040a4 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f8a1 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000168 	.word	0x20000168
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART6_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART6_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART6_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART6_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART6_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART6_UART_Init+0x4c>)
 8001328:	f002 febc 	bl	80040a4 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f877 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001ac 	.word	0x200001ac
 8001340:	40011400 	.word	0x40011400

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_GPIO_Init+0xd4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_GPIO_Init+0xd4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_GPIO_Init+0xd4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_GPIO_Init+0xd4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a26      	ldr	r2, [pc, #152]	; (8001418 <MX_GPIO_Init+0xd4>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_GPIO_Init+0xd4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_GPIO_Init+0xd4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <MX_GPIO_Init+0xd4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_GPIO_Init+0xd4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_GPIO_Init+0xd4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <MX_GPIO_Init+0xd4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_GPIO_Init+0xd4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <MX_GPIO_Init+0xd8>)
 80013d2:	f000 fdf9 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_GPIO_Init+0xdc>)
 80013ee:	f000 fc4f 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80013f2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_GPIO_Init+0xd8>)
 800140c:	f000 fc40 	bl	8001c90 <HAL_GPIO_Init>

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020800 	.word	0x40020800

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800146e:	2006      	movs	r0, #6
 8001470:	f000 fb3a 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_I2C_MspInit+0x84>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d12b      	bne.n	80014fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <HAL_I2C_MspInit+0x8c>)
 80014da:	f000 fbd9 	bl	8001c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_I2C_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40005400 	.word	0x40005400
 8001508:	40023800 	.word	0x40023800
 800150c:	40020400 	.word	0x40020400

08001510 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_TIM_IC_MspInit+0x94>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d134      	bne.n	800159c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_TIM_IC_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800157c:	2301      	movs	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <HAL_TIM_IC_MspInit+0x9c>)
 8001588:	f000 fb82 	bl	8001c90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	201b      	movs	r0, #27
 8001592:	f000 fab4 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001596:	201b      	movs	r0, #27
 8001598:	f000 facd 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010000 	.word	0x40010000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a36      	ldr	r2, [pc, #216]	; (80016a8 <HAL_UART_MspInit+0xf8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12c      	bne.n	800162c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_UART_MspInit+0xfc>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <HAL_UART_MspInit+0xfc>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_UART_MspInit+0xfc>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_UART_MspInit+0xfc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <HAL_UART_MspInit+0xfc>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_UART_MspInit+0xfc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4822      	ldr	r0, [pc, #136]	; (80016b0 <HAL_UART_MspInit+0x100>)
 8001626:	f000 fb33 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800162a:	e038      	b.n	800169e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_UART_MspInit+0x104>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d133      	bne.n	800169e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_UART_MspInit+0xfc>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_UART_MspInit+0xfc>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_UART_MspInit+0xfc>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_UART_MspInit+0xfc>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xfc>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_UART_MspInit+0xfc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800167e:	2308      	movs	r3, #8
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <HAL_UART_MspInit+0x108>)
 800168a:	f000 fb01 	bl	8001c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	2047      	movs	r0, #71	; 0x47
 8001694:	f000 fa33 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001698:	2047      	movs	r0, #71	; 0x47
 800169a:	f000 fa4c 	bl	8001b36 <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40004400 	.word	0x40004400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40020800 	.word	0x40020800

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f8da 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM1_CC_IRQHandler+0x10>)
 8001716:	f002 f8ce 	bl	80038b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000120 	.word	0x20000120

08001724 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART6_IRQHandler+0x10>)
 800172a:	f002 fdcb 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001ac 	.word	0x200001ac

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f003 fd1a 	bl	80051a0 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	20000200 	.word	0x20000200
 80017a0:	20000218 	.word	0x20000218

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 fcd9 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fae1 	bl	8000dc0 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800180c:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 8001810:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001814:	20000218 	.word	0x20000218

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
 __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f94f 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fdee 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f967 	bl	8001b52 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f92f 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000040 	.word	0x20000040
 80018b8:	20000048 	.word	0x20000048
 80018bc:	20000044 	.word	0x20000044

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000048 	.word	0x20000048
 80018e4:	20000204 	.word	0x20000204

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000204 	.word	0x20000204

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000048 	.word	0x20000048

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff feb6 	bl	80018e8 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d008      	beq.n	8001b9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e052      	b.n	8001c42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0216 	bic.w	r2, r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d103      	bne.n	8001bcc <HAL_DMA_Abort+0x62>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0208 	bic.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bec:	e013      	b.n	8001c16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fe7b 	bl	80018e8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d90c      	bls.n	8001c16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e015      	b.n	8001c42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e4      	bne.n	8001bee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	223f      	movs	r2, #63	; 0x3f
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e00c      	b.n	8001c82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e159      	b.n	8001f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8148 	bne.w	8001f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d005      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d130      	bne.n	8001d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0201 	and.w	r2, r3, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d017      	beq.n	8001d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a2 	beq.w	8001f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x202>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_GPIO_Init+0x2f4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1fe>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <HAL_GPIO_Init+0x2f8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1f6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <HAL_GPIO_Init+0x300>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1f2>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f00:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f aea2 	bls.w	8001cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12b      	b.n	8002266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fa2c 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f001 fb58 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a81      	ldr	r2, [pc, #516]	; (8002270 <HAL_I2C_Init+0x274>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_I2C_Init+0x278>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a7d      	ldr	r2, [pc, #500]	; (8002278 <HAL_I2C_Init+0x27c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0e7      	b.n	8002266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a78      	ldr	r2, [pc, #480]	; (800227c <HAL_I2C_Init+0x280>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_I2C_Init+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_I2C_Init+0x284>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	495c      	ldr	r1, [pc, #368]	; (8002270 <HAL_I2C_Init+0x274>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d819      	bhi.n	8002138 <HAL_I2C_Init+0x13c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_I2C_Init+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb1 f3f3 	udiv	r3, r1, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	e051      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002134:	2304      	movs	r3, #4
 8002136:	e04f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_I2C_Init+0x168>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e012      	b.n	800218a <HAL_I2C_Init+0x18e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Init+0x196>
 800218e:	2301      	movs	r3, #1
 8002190:	e022      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_I2C_Init+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e58      	subs	r0, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6809      	ldr	r1, [r1, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6911      	ldr	r1, [r2, #16]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000186a0 	.word	0x000186a0
 8002274:	001e847f 	.word	0x001e847f
 8002278:	003d08ff 	.word	0x003d08ff
 800227c:	431bde83 	.word	0x431bde83
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	460b      	mov	r3, r1
 8002298:	813b      	strh	r3, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229e:	f7ff fb23 	bl	80018e8 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	f040 8208 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	497b      	ldr	r1, [pc, #492]	; (80024a8 <HAL_I2C_Mem_Read+0x224>)
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fc1d 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e1fb      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Read+0x56>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e1f4      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d007      	beq.n	8002300 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2222      	movs	r2, #34	; 0x22
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <HAL_I2C_Mem_Read+0x228>)
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	88f8      	ldrh	r0, [r7, #6]
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 faea 	bl	800292c <I2C_RequestMemoryRead>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1b0      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d113      	bne.n	8002392 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e184      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11b      	bne.n	80023d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e164      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d11b      	bne.n	8002412 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	e144      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002428:	e138      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	2b03      	cmp	r3, #3
 8002430:	f200 80f1 	bhi.w	8002616 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b01      	cmp	r3, #1
 800243a:	d123      	bne.n	8002484 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fc72 	bl	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e139      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002482:	e10b      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14e      	bne.n	800252a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	2200      	movs	r2, #0
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_I2C_Mem_Read+0x22c>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fb30 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e10e      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002528:	e0b8      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	4966      	ldr	r1, [pc, #408]	; (80026cc <HAL_I2C_Mem_Read+0x448>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fae1 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0bf      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	494f      	ldr	r1, [pc, #316]	; (80026cc <HAL_I2C_Mem_Read+0x448>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fab3 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e091      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002614:	e042      	b.n	800269c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fb85 	bl	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04c      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d118      	bne.n	800269c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f aec2 	bne.w	800242a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010004 	.word	0x00010004

080026d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff f902 	bl	80018e8 <HAL_GetTick>
 80026e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	f040 8111 	bne.w	800291a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2319      	movs	r3, #25
 80026fe:	2201      	movs	r2, #1
 8002700:	4988      	ldr	r1, [pc, #544]	; (8002924 <HAL_I2C_IsDeviceReady+0x254>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f9fa 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
 8002710:	e104      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_I2C_IsDeviceReady+0x50>
 800271c:	2302      	movs	r3, #2
 800271e:	e0fd      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d007      	beq.n	8002746 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2224      	movs	r2, #36	; 0x24
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a70      	ldr	r2, [pc, #448]	; (8002928 <HAL_I2C_IsDeviceReady+0x258>)
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f9b8 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d103      	bne.n	80027aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0b6      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f893 	bl	80018e8 <HAL_GetTick>
 80027c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f2:	e025      	b.n	8002840 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027f4:	f7ff f878 	bl	80018e8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <HAL_I2C_IsDeviceReady+0x13a>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	22a0      	movs	r2, #160	; 0xa0
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2ba0      	cmp	r3, #160	; 0xa0
 800284a:	d005      	beq.n	8002858 <HAL_I2C_IsDeviceReady+0x188>
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_I2C_IsDeviceReady+0x188>
 8002852:	7dbb      	ldrb	r3, [r7, #22]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0cd      	beq.n	80027f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d129      	bne.n	80028c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2319      	movs	r3, #25
 800289a:	2201      	movs	r2, #1
 800289c:	4921      	ldr	r1, [pc, #132]	; (8002924 <HAL_I2C_IsDeviceReady+0x254>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f92c 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e036      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e02c      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2319      	movs	r3, #25
 80028e2:	2201      	movs	r2, #1
 80028e4:	490f      	ldr	r1, [pc, #60]	; (8002924 <HAL_I2C_IsDeviceReady+0x254>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f908 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e012      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	f4ff af32 	bcc.w	800276a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	00100002 	.word	0x00100002
 8002928:	ffff0000 	.word	0xffff0000

0800292c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2200      	movs	r2, #0
 800296e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f8c2 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d103      	bne.n	8002996 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0aa      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	4952      	ldr	r1, [pc, #328]	; (8002af8 <I2C_RequestMemoryRead+0x1cc>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8fa 	bl	8002baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e097      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f964 	bl	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e076      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	e021      	b.n	8002a58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	6a39      	ldr	r1, [r7, #32]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f93e 	bl	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d107      	bne.n	8002a4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e050      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	6a39      	ldr	r1, [r7, #32]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f923 	bl	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d107      	bne.n	8002a80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e035      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f82b 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aba:	d103      	bne.n	8002ac4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e013      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ac8:	897b      	ldrh	r3, [r7, #10]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	4906      	ldr	r1, [pc, #24]	; (8002af8 <I2C_RequestMemoryRead+0x1cc>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f863 	bl	8002baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010002 	.word	0x00010002

08002afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0c:	e025      	b.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d021      	beq.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fee7 	bl	80018e8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e023      	b.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10d      	bne.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	e00c      	b.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d0b6      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb8:	e051      	b.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc8:	d123      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0204 	orr.w	r2, r3, #4
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e046      	b.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d021      	beq.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7fe fe65 	bl	80018e8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d116      	bne.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e020      	b.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10c      	bne.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4013      	ands	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e00b      	b.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d18d      	bne.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb4:	e02d      	b.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f88d 	bl	8002dd6 <I2C_IsAcknowledgeFailed>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02d      	b.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d021      	beq.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fe0b 	bl	80018e8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d116      	bne.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d1ca      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d36:	e042      	b.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d119      	bne.n	8002d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0210 	mvn.w	r2, #16
 8002d4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e029      	b.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fdb5 	bl	80018e8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d1b5      	bne.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	d11b      	bne.n	8002e26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e267      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b85      	ldr	r3, [pc, #532]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e242      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6c      	ldr	r2, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b69      	ldr	r3, [pc, #420]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fcfc 	bl	80018e8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fcf8 	bl	80018e8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e207      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fce8 	bl	80018e8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fce4 	bl	80018e8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f3      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b51      	ldr	r3, [pc, #324]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c7      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	; (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fc9d 	bl	80018e8 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fc99 	bl	80018e8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a8      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fc7c 	bl	80018e8 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fc78 	bl	80018e8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e187      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x248>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fc5c 	bl	80018e8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe fc58 	bl	80018e8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e167      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x240>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x248>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fc45 	bl	80018e8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fc41 	bl	80018e8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e150      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7d      	ldr	r3, [pc, #500]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a7c      	ldr	r2, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b77      	ldr	r3, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b74      	ldr	r3, [pc, #464]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fc01 	bl	80018e8 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fbfd 	bl	80018e8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x2ea>
 8003110:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a63      	ldr	r2, [pc, #396]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x30c>
 8003126:	4b5f      	ldr	r3, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5e      	ldr	r2, [pc, #376]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a5b      	ldr	r2, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 8003140:	4b58      	ldr	r3, [pc, #352]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a57      	ldr	r2, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fbc2 	bl	80018e8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe fbbe 	bl	80018e8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0cb      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x334>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe fbac 	bl	80018e8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fba8 	bl	80018e8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b5      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a1 	beq.w	8003314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d05c      	beq.n	8003298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d141      	bne.n	800326a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fb7c 	bl	80018e8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fb78 	bl	80018e8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e087      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fb51 	bl	80018e8 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fb4d 	bl	80018e8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x416>
 8003268:	e054      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fb3a 	bl	80018e8 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fb36 	bl	80018e8 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e045      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e038      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fe fa68 	bl	80018e8 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fe fa64 	bl	80018e8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f9c8 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08005b20 	.word	0x08005b20
 80034e8:	20000040 	.word	0x20000040
 80034ec:	20000044 	.word	0x20000044

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b094      	sub	sp, #80	; 0x50
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
 80034fc:	2300      	movs	r3, #0
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	2300      	movs	r3, #0
 8003502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80e1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e0db      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b73      	ldr	r3, [pc, #460]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003528:	e0db      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800352e:	e0d8      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4621      	mov	r1, r4
 800357c:	1a51      	subs	r1, r2, r1
 800357e:	6139      	str	r1, [r7, #16]
 8003580:	4629      	mov	r1, r5
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	018b      	lsls	r3, r1, #6
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800359e:	4651      	mov	r1, sl
 80035a0:	018a      	lsls	r2, r1, #6
 80035a2:	4651      	mov	r1, sl
 80035a4:	ebb2 0801 	subs.w	r8, r2, r1
 80035a8:	4659      	mov	r1, fp
 80035aa:	eb63 0901 	sbc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	462b      	mov	r3, r5
 80035d0:	eb49 0303 	adc.w	r3, r9, r3
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035e2:	4629      	mov	r1, r5
 80035e4:	024b      	lsls	r3, r1, #9
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ec:	4621      	mov	r1, r4
 80035ee:	024a      	lsls	r2, r1, #9
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003600:	f7fd fa5c 	bl	8000abc <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360c:	e058      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	4618      	mov	r0, r3
 8003618:	4611      	mov	r1, r2
 800361a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	f04f 0000 	mov.w	r0, #0
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363a:	0150      	lsls	r0, r2, #5
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4641      	mov	r1, r8
 8003642:	ebb2 0a01 	subs.w	sl, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb63 0b01 	sbc.w	fp, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800365c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003660:	ebb2 040a 	subs.w	r4, r2, sl
 8003664:	eb63 050b 	sbc.w	r5, r3, fp
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	464b      	mov	r3, r9
 8003684:	eb45 0303 	adc.w	r3, r5, r3
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036aa:	2200      	movs	r2, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	f7fd fa02 	bl	8000abc <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3750      	adds	r7, #80	; 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000040 	.word	0x20000040

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff0 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	08005b30 	.word	0x08005b30

0800373c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003740:	f7ff ffdc 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0b5b      	lsrs	r3, r3, #13
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	08005b30 	.word	0x08005b30

08003764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d001      	beq.n	800377c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e03c      	b.n	80037f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_TIM_Base_Start+0xa0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_TIM_Base_Start+0x5c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d013      	beq.n	80037c0 <HAL_TIM_Base_Start+0x5c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_TIM_Base_Start+0xa4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_TIM_Base_Start+0x5c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_TIM_Base_Start+0xa8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_TIM_Base_Start+0x5c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_TIM_Base_Start+0xac>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_TIM_Base_Start+0x5c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_TIM_Base_Start+0xb0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d010      	beq.n	80037f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e2:	e007      	b.n	80037f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010000 	.word	0x40010000
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40014000 	.word	0x40014000

08003818 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e041      	b.n	80038ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fe66 	bl	8001510 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 fa04 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d122      	bne.n	8003912 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d11b      	bne.n	8003912 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0202 	mvn.w	r2, #2
 80038e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f994 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f986 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f997 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d122      	bne.n	8003966 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0204 	mvn.w	r2, #4
 8003936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f96a 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 8003952:	e005      	b.n	8003960 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f95c 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f96d 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d122      	bne.n	80039ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0208 	mvn.w	r2, #8
 800398a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2204      	movs	r2, #4
 8003990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f940 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f932 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f943 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d122      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0210 	mvn.w	r2, #16
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2208      	movs	r2, #8
 80039e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f916 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f908 	bl	8003c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f919 	bl	8003c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10e      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0201 	mvn.w	r2, #1
 8003a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f8e2 	bl	8003bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d10e      	bne.n	8003a66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b80      	cmp	r3, #128	; 0x80
 8003a54:	d107      	bne.n	8003a66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fb15 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d10e      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d107      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8de 	bl	8003c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d10e      	bne.n	8003abe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f06f 0220 	mvn.w	r2, #32
 8003ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fadf 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e088      	b.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11b      	bne.n	8003b2a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f000 f92f 	bl	8003d64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 020c 	bic.w	r2, r2, #12
 8003b14:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6999      	ldr	r1, [r3, #24]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	619a      	str	r2, [r3, #24]
 8003b28:	e060      	b.n	8003bec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11c      	bne.n	8003b6a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f000 f978 	bl	8003e34 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b52:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6999      	ldr	r1, [r3, #24]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e040      	b.n	8003bec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 f995 	bl	8003eae <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020c 	bic.w	r2, r2, #12
 8003b92:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69d9      	ldr	r1, [r3, #28]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	61da      	str	r2, [r3, #28]
 8003ba6:	e021      	b.n	8003bec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d11c      	bne.n	8003be8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f000 f9b2 	bl	8003f26 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
 8003be6:	e001      	b.n	8003bec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a34      	ldr	r2, [pc, #208]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00f      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <TIM_Base_SetConfig+0xe8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <TIM_Base_SetConfig+0xec>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <TIM_Base_SetConfig+0xf0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <TIM_Base_SetConfig+0xe8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <TIM_Base_SetConfig+0xec>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <TIM_Base_SetConfig+0xf0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <TIM_Base_SetConfig+0xf4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <TIM_Base_SetConfig+0xf8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <TIM_Base_SetConfig+0xfc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <TIM_Base_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d103      	bne.n	8003d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	615a      	str	r2, [r3, #20]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800

08003d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <TIM_TI1_SetConfig+0xbc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d98:	d00f      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <TIM_TI1_SetConfig+0xc0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <TIM_TI1_SetConfig+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <TIM_TI1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_TI1_SetConfig+0x56>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <TIM_TI1_SetConfig+0xcc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <TIM_TI1_SetConfig+0x5a>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <TIM_TI1_SetConfig+0x5c>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e003      	b.n	8003dde <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 030a 	bic.w	r3, r3, #10
 8003df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 030a 	and.w	r3, r3, #10
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000

08003e34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0210 	bic.w	r2, r3, #16
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	031b      	lsls	r3, r3, #12
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e050      	b.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d013      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a15      	ldr	r2, [pc, #84]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10c      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e03f      	b.n	8004136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fa70 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fde5 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08a      	sub	sp, #40	; 0x28
 8004142:	af02      	add	r7, sp, #8
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	d17c      	bne.n	8004258 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_UART_Transmit+0x2c>
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e075      	b.n	800425a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_UART_Transmit+0x3e>
 8004178:	2302      	movs	r3, #2
 800417a:	e06e      	b.n	800425a <HAL_UART_Transmit+0x11c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2221      	movs	r2, #33	; 0x21
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004192:	f7fd fba9 	bl	80018e8 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Transmit+0x82>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041d0:	e02a      	b.n	8004228 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb29 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e036      	b.n	800425a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	3302      	adds	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e007      	b.n	800421a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1cf      	bne.n	80041d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 faf9 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	d11d      	bne.n	80042b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Receive_IT+0x26>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e016      	b.n	80042ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_UART_Receive_IT+0x38>
 8004296:	2302      	movs	r3, #2
 8004298:	e00f      	b.n	80042ba <HAL_UART_Receive_IT+0x58>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fb2e 	bl	8004910 <UART_Start_Receive_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	e000      	b.n	80042ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0ba      	sub	sp, #232	; 0xe8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_UART_IRQHandler+0x66>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fc0d 	bl	8004b42 <UART_Receive_IT>
      return;
 8004328:	e256      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80de 	beq.w	80044f0 <HAL_UART_IRQHandler+0x22c>
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004344:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80d1 	beq.w	80044f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xae>
 800435a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xd2>
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0208 	orr.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 81ed 	beq.w	80047ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_UART_IRQHandler+0x14e>
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fb98 	bl	8004b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <HAL_UART_IRQHandler+0x17a>
 8004436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04f      	beq.n	80044de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 faa0 	bl	8004984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d141      	bne.n	80044d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800447e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800448a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1d9      	bne.n	8004452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d013      	beq.n	80044ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4a7d      	ldr	r2, [pc, #500]	; (80046a0 <HAL_UART_IRQHandler+0x3dc>)
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fbc9 	bl	8001c4a <HAL_DMA_Abort_IT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00e      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f99a 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e00a      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f996 	bl	8004808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e006      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f992 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044ea:	e170      	b.n	80047ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	bf00      	nop
    return;
 80044ee:	e16e      	b.n	80047ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 814a 	bne.w	800478e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8143 	beq.w	800478e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 813c 	beq.w	800478e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	f040 80b4 	bne.w	80046a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8140 	beq.w	80047d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455a:	429a      	cmp	r2, r3
 800455c:	f080 8139 	bcs.w	80047d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004566:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	f000 8088 	beq.w	8004686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800458c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1d9      	bne.n	8004576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e1      	bne.n	80045c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800460e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004668:	65ba      	str	r2, [r7, #88]	; 0x58
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800466e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e3      	bne.n	8004644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	4618      	mov	r0, r3
 8004682:	f7fd fa72 	bl	8001b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800468e:	b29b      	uxth	r3, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b29b      	uxth	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8c0 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800469c:	e099      	b.n	80047d2 <HAL_UART_IRQHandler+0x50e>
 800469e:	bf00      	nop
 80046a0:	08004a4b 	.word	0x08004a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 808b 	beq.w	80047d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8086 	beq.w	80047d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ee:	647a      	str	r2, [r7, #68]	; 0x44
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3314      	adds	r3, #20
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	623b      	str	r3, [r7, #32]
   return(result);
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3314      	adds	r3, #20
 8004722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004726:	633a      	str	r2, [r7, #48]	; 0x30
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e3      	bne.n	8004702 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	60fb      	str	r3, [r7, #12]
   return(result);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0310 	bic.w	r3, r3, #16
 800475e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800476c:	61fa      	str	r2, [r7, #28]
 800476e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	617b      	str	r3, [r7, #20]
   return(result);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e3      	bne.n	8004748 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f848 	bl	800481c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800478c:	e023      	b.n	80047d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_UART_IRQHandler+0x4ea>
 800479a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f963 	bl	8004a72 <UART_Transmit_IT>
    return;
 80047ac:	e014      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <HAL_UART_IRQHandler+0x514>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9a3 	bl	8004b12 <UART_EndTransmit_IT>
    return;
 80047cc:	e004      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
    return;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
      return;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
      return;
 80047d6:	bf00      	nop
  }
}
 80047d8:	37e8      	adds	r7, #232	; 0xe8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop

080047e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b090      	sub	sp, #64	; 0x40
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	e050      	b.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d04c      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x30>
 8004854:	f7fd f848 	bl	80018e8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004860:	429a      	cmp	r2, r3
 8004862:	d241      	bcs.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004884:	637a      	str	r2, [r7, #52]	; 0x34
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	613b      	str	r3, [r7, #16]
   return(result);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b8:	623a      	str	r2, [r7, #32]
 80048ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69f9      	ldr	r1, [r7, #28]
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e00f      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	429a      	cmp	r2, r3
 8004904:	d09f      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3740      	adds	r7, #64	; 0x40
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2222      	movs	r2, #34	; 0x22
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004954:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0220 	orr.w	r2, r2, #32
 8004974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b095      	sub	sp, #84	; 0x54
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ac:	643a      	str	r2, [r7, #64]	; 0x40
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d119      	bne.n	8004a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a1c:	61ba      	str	r2, [r7, #24]
 8004a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a3e:	bf00      	nop
 8004a40:	3754      	adds	r7, #84	; 0x54
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fecf 	bl	8004808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	d13e      	bne.n	8004b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d114      	bne.n	8004aba <UART_Transmit_IT+0x48>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]
 8004ab8:	e008      	b.n	8004acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6211      	str	r1, [r2, #32]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fe54 	bl	80047e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08c      	sub	sp, #48	; 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b22      	cmp	r3, #34	; 0x22
 8004b54:	f040 80ab 	bne.w	8004cae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d117      	bne.n	8004b92 <UART_Receive_IT+0x50>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b90:	e026      	b.n	8004be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d007      	beq.n	8004bb6 <UART_Receive_IT+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <UART_Receive_IT+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e008      	b.n	8004bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4619      	mov	r1, r3
 8004bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d15a      	bne.n	8004caa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0220 	bic.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d135      	bne.n	8004ca0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	623a      	str	r2, [r7, #32]
 8004c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	6a3a      	ldr	r2, [r7, #32]
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d10a      	bne.n	8004c92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fdbf 	bl	800481c <HAL_UARTEx_RxEventCallback>
 8004c9e:	e002      	b.n	8004ca6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fda7 	bl	80047f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e002      	b.n	8004cb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e000      	b.n	8004cb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
  }
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3730      	adds	r7, #48	; 0x30
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0c0      	sub	sp, #256	; 0x100
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	68d9      	ldr	r1, [r3, #12]
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	ea40 0301 	orr.w	r3, r0, r1
 8004ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	ea40 0301 	orr.w	r3, r0, r1
 8004d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8f      	ldr	r3, [pc, #572]	; (8004f84 <UART_SetConfig+0x2cc>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <UART_SetConfig+0xa0>
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8d      	ldr	r3, [pc, #564]	; (8004f88 <UART_SetConfig+0x2d0>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fcf0 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 8004d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d60:	e003      	b.n	8004d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d62:	f7fe fcd7 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8004d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	f040 810c 	bne.w	8004f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d92:	415b      	adcs	r3, r3
 8004d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	eb12 0801 	adds.w	r8, r2, r1
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb43 0901 	adc.w	r9, r3, r1
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dba:	4690      	mov	r8, r2
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	eb18 0303 	adds.w	r3, r8, r3
 8004dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb49 0303 	adc.w	r3, r9, r3
 8004dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004de6:	460b      	mov	r3, r1
 8004de8:	18db      	adds	r3, r3, r3
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
 8004dec:	4613      	mov	r3, r2
 8004dee:	eb42 0303 	adc.w	r3, r2, r3
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
 8004df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dfc:	f7fb fe5e 	bl	8000abc <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011c      	lsls	r4, r3, #4
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e30:	4641      	mov	r1, r8
 8004e32:	eb12 0a01 	adds.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb43 0b01 	adc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e50:	4692      	mov	sl, r2
 8004e52:	469b      	mov	fp, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb4b 0303 	adc.w	r3, fp, r3
 8004e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e92:	f7fb fe13 	bl	8000abc <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2264      	movs	r2, #100	; 0x64
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004edc:	415b      	adcs	r3, r3
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f38:	460b      	mov	r3, r1
 8004f3a:	18db      	adds	r3, r3, r3
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3e:	4613      	mov	r3, r2
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f4e:	f7fb fdb5 	bl	8000abc <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	; 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	3332      	adds	r3, #50	; 0x32
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4422      	add	r2, r4
 8004f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f80:	e105      	b.n	800518e <UART_SetConfig+0x4d6>
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa2:	4642      	mov	r2, r8
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	1891      	adds	r1, r2, r2
 8004fa8:	6239      	str	r1, [r7, #32]
 8004faa:	415b      	adcs	r3, r3
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	1854      	adds	r4, r2, r1
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	eb43 0501 	adc.w	r5, r3, r1
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	00eb      	lsls	r3, r5, #3
 8004fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fca:	00e2      	lsls	r2, r4, #3
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	4643      	mov	r3, r8
 8004fd2:	18e3      	adds	r3, r4, r3
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd8:	464b      	mov	r3, r9
 8004fda:	eb45 0303 	adc.w	r3, r5, r3
 8004fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ffe:	4629      	mov	r1, r5
 8005000:	008b      	lsls	r3, r1, #2
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005008:	4621      	mov	r1, r4
 800500a:	008a      	lsls	r2, r1, #2
 800500c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005010:	f7fb fd54 	bl	8000abc <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b60      	ldr	r3, [pc, #384]	; (800519c <UART_SetConfig+0x4e4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800502c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	61b9      	str	r1, [r7, #24]
 800503c:	415b      	adcs	r3, r3
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6139      	str	r1, [r7, #16]
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	67bb      	str	r3, [r7, #120]	; 0x78
 800508e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050ae:	f7fb fd05 	bl	8000abc <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <UART_SetConfig+0x4e4>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	3332      	adds	r3, #50	; 0x32
 80050ca:	4a34      	ldr	r2, [pc, #208]	; (800519c <UART_SetConfig+0x4e4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d6:	441c      	add	r4, r3
 80050d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050dc:	2200      	movs	r2, #0
 80050de:	673b      	str	r3, [r7, #112]	; 0x70
 80050e0:	677a      	str	r2, [r7, #116]	; 0x74
 80050e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050e6:	4642      	mov	r2, r8
 80050e8:	464b      	mov	r3, r9
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	415b      	adcs	r3, r3
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f6:	4641      	mov	r1, r8
 80050f8:	1851      	adds	r1, r2, r1
 80050fa:	6039      	str	r1, [r7, #0]
 80050fc:	4649      	mov	r1, r9
 80050fe:	414b      	adcs	r3, r1
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800510e:	4659      	mov	r1, fp
 8005110:	00cb      	lsls	r3, r1, #3
 8005112:	4651      	mov	r1, sl
 8005114:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005118:	4651      	mov	r1, sl
 800511a:	00ca      	lsls	r2, r1, #3
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	4603      	mov	r3, r0
 8005122:	4642      	mov	r2, r8
 8005124:	189b      	adds	r3, r3, r2
 8005126:	66bb      	str	r3, [r7, #104]	; 0x68
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	663b      	str	r3, [r7, #96]	; 0x60
 800513c:	667a      	str	r2, [r7, #100]	; 0x64
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800514a:	4649      	mov	r1, r9
 800514c:	008b      	lsls	r3, r1, #2
 800514e:	4641      	mov	r1, r8
 8005150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005154:	4641      	mov	r1, r8
 8005156:	008a      	lsls	r2, r1, #2
 8005158:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800515c:	f7fb fcae 	bl	8000abc <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x4e4>)
 8005166:	fba3 1302 	umull	r1, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2164      	movs	r1, #100	; 0x64
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	3332      	adds	r3, #50	; 0x32
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x4e4>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	f003 020f 	and.w	r2, r3, #15
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4422      	add	r2, r4
 800518c:	609a      	str	r2, [r3, #8]
}
 800518e:	bf00      	nop
 8005190:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519a:	bf00      	nop
 800519c:	51eb851f 	.word	0x51eb851f

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	2000004c 	.word	0x2000004c

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4d0d      	ldr	r5, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4c0d      	ldr	r4, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	2600      	movs	r6, #0
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	4d0b      	ldr	r5, [pc, #44]	; (80051ec <__libc_init_array+0x40>)
 80051be:	4c0c      	ldr	r4, [pc, #48]	; (80051f0 <__libc_init_array+0x44>)
 80051c0:	f000 fc8e 	bl	8005ae0 <_init>
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	2600      	movs	r6, #0
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	08005b74 	.word	0x08005b74
 80051e8:	08005b74 	.word	0x08005b74
 80051ec:	08005b74 	.word	0x08005b74
 80051f0:	08005b78 	.word	0x08005b78

080051f4 <memset>:
 80051f4:	4402      	add	r2, r0
 80051f6:	4603      	mov	r3, r0
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d100      	bne.n	80051fe <memset+0xa>
 80051fc:	4770      	bx	lr
 80051fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005202:	e7f9      	b.n	80051f8 <memset+0x4>

08005204 <siprintf>:
 8005204:	b40e      	push	{r1, r2, r3}
 8005206:	b500      	push	{lr}
 8005208:	b09c      	sub	sp, #112	; 0x70
 800520a:	ab1d      	add	r3, sp, #116	; 0x74
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	9006      	str	r0, [sp, #24]
 8005210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <siprintf+0x38>)
 8005216:	9107      	str	r1, [sp, #28]
 8005218:	9104      	str	r1, [sp, #16]
 800521a:	4909      	ldr	r1, [pc, #36]	; (8005240 <siprintf+0x3c>)
 800521c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005220:	9105      	str	r1, [sp, #20]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	a902      	add	r1, sp, #8
 8005228:	f000 f868 	bl	80052fc <_svfiprintf_r>
 800522c:	9b02      	ldr	r3, [sp, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	b01c      	add	sp, #112	; 0x70
 8005234:	f85d eb04 	ldr.w	lr, [sp], #4
 8005238:	b003      	add	sp, #12
 800523a:	4770      	bx	lr
 800523c:	2000004c 	.word	0x2000004c
 8005240:	ffff0208 	.word	0xffff0208

08005244 <__ssputs_r>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	688e      	ldr	r6, [r1, #8]
 800524a:	429e      	cmp	r6, r3
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	461f      	mov	r7, r3
 8005254:	d838      	bhi.n	80052c8 <__ssputs_r+0x84>
 8005256:	898a      	ldrh	r2, [r1, #12]
 8005258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800525c:	d032      	beq.n	80052c4 <__ssputs_r+0x80>
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	6909      	ldr	r1, [r1, #16]
 8005262:	eba5 0901 	sub.w	r9, r5, r1
 8005266:	6965      	ldr	r5, [r4, #20]
 8005268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800526c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005270:	3301      	adds	r3, #1
 8005272:	444b      	add	r3, r9
 8005274:	106d      	asrs	r5, r5, #1
 8005276:	429d      	cmp	r5, r3
 8005278:	bf38      	it	cc
 800527a:	461d      	movcc	r5, r3
 800527c:	0553      	lsls	r3, r2, #21
 800527e:	d531      	bpl.n	80052e4 <__ssputs_r+0xa0>
 8005280:	4629      	mov	r1, r5
 8005282:	f000 fb63 	bl	800594c <_malloc_r>
 8005286:	4606      	mov	r6, r0
 8005288:	b950      	cbnz	r0, 80052a0 <__ssputs_r+0x5c>
 800528a:	230c      	movs	r3, #12
 800528c:	f8ca 3000 	str.w	r3, [sl]
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	6921      	ldr	r1, [r4, #16]
 80052a2:	464a      	mov	r2, r9
 80052a4:	f000 fabe 	bl	8005824 <memcpy>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	6126      	str	r6, [r4, #16]
 80052b6:	6165      	str	r5, [r4, #20]
 80052b8:	444e      	add	r6, r9
 80052ba:	eba5 0509 	sub.w	r5, r5, r9
 80052be:	6026      	str	r6, [r4, #0]
 80052c0:	60a5      	str	r5, [r4, #8]
 80052c2:	463e      	mov	r6, r7
 80052c4:	42be      	cmp	r6, r7
 80052c6:	d900      	bls.n	80052ca <__ssputs_r+0x86>
 80052c8:	463e      	mov	r6, r7
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	4632      	mov	r2, r6
 80052ce:	4641      	mov	r1, r8
 80052d0:	f000 fab6 	bl	8005840 <memmove>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	1b9b      	subs	r3, r3, r6
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4433      	add	r3, r6
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2000      	movs	r0, #0
 80052e2:	e7db      	b.n	800529c <__ssputs_r+0x58>
 80052e4:	462a      	mov	r2, r5
 80052e6:	f000 fba5 	bl	8005a34 <_realloc_r>
 80052ea:	4606      	mov	r6, r0
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d1e1      	bne.n	80052b4 <__ssputs_r+0x70>
 80052f0:	6921      	ldr	r1, [r4, #16]
 80052f2:	4650      	mov	r0, sl
 80052f4:	f000 fabe 	bl	8005874 <_free_r>
 80052f8:	e7c7      	b.n	800528a <__ssputs_r+0x46>
	...

080052fc <_svfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4698      	mov	r8, r3
 8005302:	898b      	ldrh	r3, [r1, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4607      	mov	r7, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4614      	mov	r4, r2
 800530e:	d50e      	bpl.n	800532e <_svfiprintf_r+0x32>
 8005310:	690b      	ldr	r3, [r1, #16]
 8005312:	b963      	cbnz	r3, 800532e <_svfiprintf_r+0x32>
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f000 fb19 	bl	800594c <_malloc_r>
 800531a:	6028      	str	r0, [r5, #0]
 800531c:	6128      	str	r0, [r5, #16]
 800531e:	b920      	cbnz	r0, 800532a <_svfiprintf_r+0x2e>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e0d1      	b.n	80054ce <_svfiprintf_r+0x1d2>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	; 0x30
 800533e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054e8 <_svfiprintf_r+0x1ec>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x5c>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x50>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7a>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6d 	bl	8005244 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80aa 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	; 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a2 	beq.w	80054c4 <_svfiprintf_r+0x1c8>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005396:	931a      	str	r3, [sp, #104]	; 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	4851      	ldr	r0, [pc, #324]	; (80054e8 <_svfiprintf_r+0x1ec>)
 80053a2:	f7fa ff25 	bl	80001f0 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xe6>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	; 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xf6>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	; 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94e      	bls.n	800547a <_svfiprintf_r+0x17e>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x110>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x110>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0x9c>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	; 0x2e
 8005410:	d10c      	bne.n	800542c <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	; 0x2a
 8005416:	d135      	bne.n	8005484 <_svfiprintf_r+0x188>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	f04f 33ff 	movlt.w	r3, #4294967295
 8005428:	3402      	adds	r4, #2
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054f8 <_svfiprintf_r+0x1fc>
 8005430:	7821      	ldrb	r1, [r4, #0]
 8005432:	2203      	movs	r2, #3
 8005434:	4650      	mov	r0, sl
 8005436:	f7fa fedb 	bl	80001f0 <memchr>
 800543a:	b140      	cbz	r0, 800544e <_svfiprintf_r+0x152>
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	eba0 000a 	sub.w	r0, r0, sl
 8005442:	fa03 f000 	lsl.w	r0, r3, r0
 8005446:	9b04      	ldr	r3, [sp, #16]
 8005448:	4303      	orrs	r3, r0
 800544a:	3401      	adds	r4, #1
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005452:	4826      	ldr	r0, [pc, #152]	; (80054ec <_svfiprintf_r+0x1f0>)
 8005454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005458:	2206      	movs	r2, #6
 800545a:	f7fa fec9 	bl	80001f0 <memchr>
 800545e:	2800      	cmp	r0, #0
 8005460:	d038      	beq.n	80054d4 <_svfiprintf_r+0x1d8>
 8005462:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <_svfiprintf_r+0x1f4>)
 8005464:	bb1b      	cbnz	r3, 80054ae <_svfiprintf_r+0x1b2>
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	3307      	adds	r3, #7
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	3308      	adds	r3, #8
 8005470:	9303      	str	r3, [sp, #12]
 8005472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005474:	4433      	add	r3, r6
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
 8005478:	e767      	b.n	800534a <_svfiprintf_r+0x4e>
 800547a:	fb0c 3202 	mla	r2, ip, r2, r3
 800547e:	460c      	mov	r4, r1
 8005480:	2001      	movs	r0, #1
 8005482:	e7a5      	b.n	80053d0 <_svfiprintf_r+0xd4>
 8005484:	2300      	movs	r3, #0
 8005486:	3401      	adds	r4, #1
 8005488:	9305      	str	r3, [sp, #20]
 800548a:	4619      	mov	r1, r3
 800548c:	f04f 0c0a 	mov.w	ip, #10
 8005490:	4620      	mov	r0, r4
 8005492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005496:	3a30      	subs	r2, #48	; 0x30
 8005498:	2a09      	cmp	r2, #9
 800549a:	d903      	bls.n	80054a4 <_svfiprintf_r+0x1a8>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0c5      	beq.n	800542c <_svfiprintf_r+0x130>
 80054a0:	9105      	str	r1, [sp, #20]
 80054a2:	e7c3      	b.n	800542c <_svfiprintf_r+0x130>
 80054a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a8:	4604      	mov	r4, r0
 80054aa:	2301      	movs	r3, #1
 80054ac:	e7f0      	b.n	8005490 <_svfiprintf_r+0x194>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054b6:	a904      	add	r1, sp, #16
 80054b8:	4638      	mov	r0, r7
 80054ba:	f3af 8000 	nop.w
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	4606      	mov	r6, r0
 80054c2:	d1d6      	bne.n	8005472 <_svfiprintf_r+0x176>
 80054c4:	89ab      	ldrh	r3, [r5, #12]
 80054c6:	065b      	lsls	r3, r3, #25
 80054c8:	f53f af2c 	bmi.w	8005324 <_svfiprintf_r+0x28>
 80054cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ce:	b01d      	add	sp, #116	; 0x74
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	462a      	mov	r2, r5
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <_svfiprintf_r+0x1f8>)
 80054dc:	a904      	add	r1, sp, #16
 80054de:	4638      	mov	r0, r7
 80054e0:	f000 f87a 	bl	80055d8 <_printf_i>
 80054e4:	e7eb      	b.n	80054be <_svfiprintf_r+0x1c2>
 80054e6:	bf00      	nop
 80054e8:	08005b38 	.word	0x08005b38
 80054ec:	08005b42 	.word	0x08005b42
 80054f0:	00000000 	.word	0x00000000
 80054f4:	08005245 	.word	0x08005245
 80054f8:	08005b3e 	.word	0x08005b3e

080054fc <_printf_common>:
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	4616      	mov	r6, r2
 8005502:	4699      	mov	r9, r3
 8005504:	688a      	ldr	r2, [r1, #8]
 8005506:	690b      	ldr	r3, [r1, #16]
 8005508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800550c:	4293      	cmp	r3, r2
 800550e:	bfb8      	it	lt
 8005510:	4613      	movlt	r3, r2
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005518:	4607      	mov	r7, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b10a      	cbz	r2, 8005522 <_printf_common+0x26>
 800551e:	3301      	adds	r3, #1
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0699      	lsls	r1, r3, #26
 8005526:	bf42      	ittt	mi
 8005528:	6833      	ldrmi	r3, [r6, #0]
 800552a:	3302      	addmi	r3, #2
 800552c:	6033      	strmi	r3, [r6, #0]
 800552e:	6825      	ldr	r5, [r4, #0]
 8005530:	f015 0506 	ands.w	r5, r5, #6
 8005534:	d106      	bne.n	8005544 <_printf_common+0x48>
 8005536:	f104 0a19 	add.w	sl, r4, #25
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	6832      	ldr	r2, [r6, #0]
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	42ab      	cmp	r3, r5
 8005542:	dc26      	bgt.n	8005592 <_printf_common+0x96>
 8005544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005548:	1e13      	subs	r3, r2, #0
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	bf18      	it	ne
 800554e:	2301      	movne	r3, #1
 8005550:	0692      	lsls	r2, r2, #26
 8005552:	d42b      	bmi.n	80055ac <_printf_common+0xb0>
 8005554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005558:	4649      	mov	r1, r9
 800555a:	4638      	mov	r0, r7
 800555c:	47c0      	blx	r8
 800555e:	3001      	adds	r0, #1
 8005560:	d01e      	beq.n	80055a0 <_printf_common+0xa4>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	68e5      	ldr	r5, [r4, #12]
 8005566:	6832      	ldr	r2, [r6, #0]
 8005568:	f003 0306 	and.w	r3, r3, #6
 800556c:	2b04      	cmp	r3, #4
 800556e:	bf08      	it	eq
 8005570:	1aad      	subeq	r5, r5, r2
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	bf0c      	ite	eq
 8005578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800557c:	2500      	movne	r5, #0
 800557e:	4293      	cmp	r3, r2
 8005580:	bfc4      	itt	gt
 8005582:	1a9b      	subgt	r3, r3, r2
 8005584:	18ed      	addgt	r5, r5, r3
 8005586:	2600      	movs	r6, #0
 8005588:	341a      	adds	r4, #26
 800558a:	42b5      	cmp	r5, r6
 800558c:	d11a      	bne.n	80055c4 <_printf_common+0xc8>
 800558e:	2000      	movs	r0, #0
 8005590:	e008      	b.n	80055a4 <_printf_common+0xa8>
 8005592:	2301      	movs	r3, #1
 8005594:	4652      	mov	r2, sl
 8005596:	4649      	mov	r1, r9
 8005598:	4638      	mov	r0, r7
 800559a:	47c0      	blx	r8
 800559c:	3001      	adds	r0, #1
 800559e:	d103      	bne.n	80055a8 <_printf_common+0xac>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a8:	3501      	adds	r5, #1
 80055aa:	e7c6      	b.n	800553a <_printf_common+0x3e>
 80055ac:	18e1      	adds	r1, r4, r3
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	2030      	movs	r0, #48	; 0x30
 80055b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b6:	4422      	add	r2, r4
 80055b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055c0:	3302      	adds	r3, #2
 80055c2:	e7c7      	b.n	8005554 <_printf_common+0x58>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4622      	mov	r2, r4
 80055c8:	4649      	mov	r1, r9
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c0      	blx	r8
 80055ce:	3001      	adds	r0, #1
 80055d0:	d0e6      	beq.n	80055a0 <_printf_common+0xa4>
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7d9      	b.n	800558a <_printf_common+0x8e>
	...

080055d8 <_printf_i>:
 80055d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	7e0f      	ldrb	r7, [r1, #24]
 80055de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055e0:	2f78      	cmp	r7, #120	; 0x78
 80055e2:	4691      	mov	r9, r2
 80055e4:	4680      	mov	r8, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	469a      	mov	sl, r3
 80055ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ee:	d807      	bhi.n	8005600 <_printf_i+0x28>
 80055f0:	2f62      	cmp	r7, #98	; 0x62
 80055f2:	d80a      	bhi.n	800560a <_printf_i+0x32>
 80055f4:	2f00      	cmp	r7, #0
 80055f6:	f000 80d8 	beq.w	80057aa <_printf_i+0x1d2>
 80055fa:	2f58      	cmp	r7, #88	; 0x58
 80055fc:	f000 80a3 	beq.w	8005746 <_printf_i+0x16e>
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005608:	e03a      	b.n	8005680 <_printf_i+0xa8>
 800560a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800560e:	2b15      	cmp	r3, #21
 8005610:	d8f6      	bhi.n	8005600 <_printf_i+0x28>
 8005612:	a101      	add	r1, pc, #4	; (adr r1, 8005618 <_printf_i+0x40>)
 8005614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005618:	08005671 	.word	0x08005671
 800561c:	08005685 	.word	0x08005685
 8005620:	08005601 	.word	0x08005601
 8005624:	08005601 	.word	0x08005601
 8005628:	08005601 	.word	0x08005601
 800562c:	08005601 	.word	0x08005601
 8005630:	08005685 	.word	0x08005685
 8005634:	08005601 	.word	0x08005601
 8005638:	08005601 	.word	0x08005601
 800563c:	08005601 	.word	0x08005601
 8005640:	08005601 	.word	0x08005601
 8005644:	08005791 	.word	0x08005791
 8005648:	080056b5 	.word	0x080056b5
 800564c:	08005773 	.word	0x08005773
 8005650:	08005601 	.word	0x08005601
 8005654:	08005601 	.word	0x08005601
 8005658:	080057b3 	.word	0x080057b3
 800565c:	08005601 	.word	0x08005601
 8005660:	080056b5 	.word	0x080056b5
 8005664:	08005601 	.word	0x08005601
 8005668:	08005601 	.word	0x08005601
 800566c:	0800577b 	.word	0x0800577b
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	602a      	str	r2, [r5, #0]
 8005678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800567c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005680:	2301      	movs	r3, #1
 8005682:	e0a3      	b.n	80057cc <_printf_i+0x1f4>
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	6829      	ldr	r1, [r5, #0]
 8005688:	0606      	lsls	r6, r0, #24
 800568a:	f101 0304 	add.w	r3, r1, #4
 800568e:	d50a      	bpl.n	80056a6 <_printf_i+0xce>
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	2e00      	cmp	r6, #0
 8005696:	da03      	bge.n	80056a0 <_printf_i+0xc8>
 8005698:	232d      	movs	r3, #45	; 0x2d
 800569a:	4276      	negs	r6, r6
 800569c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a0:	485e      	ldr	r0, [pc, #376]	; (800581c <_printf_i+0x244>)
 80056a2:	230a      	movs	r3, #10
 80056a4:	e019      	b.n	80056da <_printf_i+0x102>
 80056a6:	680e      	ldr	r6, [r1, #0]
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ae:	bf18      	it	ne
 80056b0:	b236      	sxthne	r6, r6
 80056b2:	e7ef      	b.n	8005694 <_printf_i+0xbc>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	6029      	str	r1, [r5, #0]
 80056bc:	0601      	lsls	r1, r0, #24
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0xec>
 80056c0:	681e      	ldr	r6, [r3, #0]
 80056c2:	e002      	b.n	80056ca <_printf_i+0xf2>
 80056c4:	0646      	lsls	r6, r0, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0xe8>
 80056c8:	881e      	ldrh	r6, [r3, #0]
 80056ca:	4854      	ldr	r0, [pc, #336]	; (800581c <_printf_i+0x244>)
 80056cc:	2f6f      	cmp	r7, #111	; 0x6f
 80056ce:	bf0c      	ite	eq
 80056d0:	2308      	moveq	r3, #8
 80056d2:	230a      	movne	r3, #10
 80056d4:	2100      	movs	r1, #0
 80056d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056da:	6865      	ldr	r5, [r4, #4]
 80056dc:	60a5      	str	r5, [r4, #8]
 80056de:	2d00      	cmp	r5, #0
 80056e0:	bfa2      	ittt	ge
 80056e2:	6821      	ldrge	r1, [r4, #0]
 80056e4:	f021 0104 	bicge.w	r1, r1, #4
 80056e8:	6021      	strge	r1, [r4, #0]
 80056ea:	b90e      	cbnz	r6, 80056f0 <_printf_i+0x118>
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	d04d      	beq.n	800578c <_printf_i+0x1b4>
 80056f0:	4615      	mov	r5, r2
 80056f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056f6:	fb03 6711 	mls	r7, r3, r1, r6
 80056fa:	5dc7      	ldrb	r7, [r0, r7]
 80056fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005700:	4637      	mov	r7, r6
 8005702:	42bb      	cmp	r3, r7
 8005704:	460e      	mov	r6, r1
 8005706:	d9f4      	bls.n	80056f2 <_printf_i+0x11a>
 8005708:	2b08      	cmp	r3, #8
 800570a:	d10b      	bne.n	8005724 <_printf_i+0x14c>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	07de      	lsls	r6, r3, #31
 8005710:	d508      	bpl.n	8005724 <_printf_i+0x14c>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	6861      	ldr	r1, [r4, #4]
 8005716:	4299      	cmp	r1, r3
 8005718:	bfde      	ittt	le
 800571a:	2330      	movle	r3, #48	; 0x30
 800571c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005724:	1b52      	subs	r2, r2, r5
 8005726:	6122      	str	r2, [r4, #16]
 8005728:	f8cd a000 	str.w	sl, [sp]
 800572c:	464b      	mov	r3, r9
 800572e:	aa03      	add	r2, sp, #12
 8005730:	4621      	mov	r1, r4
 8005732:	4640      	mov	r0, r8
 8005734:	f7ff fee2 	bl	80054fc <_printf_common>
 8005738:	3001      	adds	r0, #1
 800573a:	d14c      	bne.n	80057d6 <_printf_i+0x1fe>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	b004      	add	sp, #16
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	4835      	ldr	r0, [pc, #212]	; (800581c <_printf_i+0x244>)
 8005748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800574c:	6829      	ldr	r1, [r5, #0]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	f851 6b04 	ldr.w	r6, [r1], #4
 8005754:	6029      	str	r1, [r5, #0]
 8005756:	061d      	lsls	r5, r3, #24
 8005758:	d514      	bpl.n	8005784 <_printf_i+0x1ac>
 800575a:	07df      	lsls	r7, r3, #31
 800575c:	bf44      	itt	mi
 800575e:	f043 0320 	orrmi.w	r3, r3, #32
 8005762:	6023      	strmi	r3, [r4, #0]
 8005764:	b91e      	cbnz	r6, 800576e <_printf_i+0x196>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	f023 0320 	bic.w	r3, r3, #32
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	2310      	movs	r3, #16
 8005770:	e7b0      	b.n	80056d4 <_printf_i+0xfc>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f043 0320 	orr.w	r3, r3, #32
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	2378      	movs	r3, #120	; 0x78
 800577c:	4828      	ldr	r0, [pc, #160]	; (8005820 <_printf_i+0x248>)
 800577e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005782:	e7e3      	b.n	800574c <_printf_i+0x174>
 8005784:	0659      	lsls	r1, r3, #25
 8005786:	bf48      	it	mi
 8005788:	b2b6      	uxthmi	r6, r6
 800578a:	e7e6      	b.n	800575a <_printf_i+0x182>
 800578c:	4615      	mov	r5, r2
 800578e:	e7bb      	b.n	8005708 <_printf_i+0x130>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	6826      	ldr	r6, [r4, #0]
 8005794:	6961      	ldr	r1, [r4, #20]
 8005796:	1d18      	adds	r0, r3, #4
 8005798:	6028      	str	r0, [r5, #0]
 800579a:	0635      	lsls	r5, r6, #24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0x1cc>
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0x1d2>
 80057a4:	0670      	lsls	r0, r6, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0x1c8>
 80057a8:	8019      	strh	r1, [r3, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	4615      	mov	r5, r2
 80057b0:	e7ba      	b.n	8005728 <_printf_i+0x150>
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	2100      	movs	r1, #0
 80057be:	4628      	mov	r0, r5
 80057c0:	f7fa fd16 	bl	80001f0 <memchr>
 80057c4:	b108      	cbz	r0, 80057ca <_printf_i+0x1f2>
 80057c6:	1b40      	subs	r0, r0, r5
 80057c8:	6060      	str	r0, [r4, #4]
 80057ca:	6863      	ldr	r3, [r4, #4]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d4:	e7a8      	b.n	8005728 <_printf_i+0x150>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	462a      	mov	r2, r5
 80057da:	4649      	mov	r1, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	47d0      	blx	sl
 80057e0:	3001      	adds	r0, #1
 80057e2:	d0ab      	beq.n	800573c <_printf_i+0x164>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	d413      	bmi.n	8005812 <_printf_i+0x23a>
 80057ea:	68e0      	ldr	r0, [r4, #12]
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	4298      	cmp	r0, r3
 80057f0:	bfb8      	it	lt
 80057f2:	4618      	movlt	r0, r3
 80057f4:	e7a4      	b.n	8005740 <_printf_i+0x168>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4632      	mov	r2, r6
 80057fa:	4649      	mov	r1, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	47d0      	blx	sl
 8005800:	3001      	adds	r0, #1
 8005802:	d09b      	beq.n	800573c <_printf_i+0x164>
 8005804:	3501      	adds	r5, #1
 8005806:	68e3      	ldr	r3, [r4, #12]
 8005808:	9903      	ldr	r1, [sp, #12]
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	42ab      	cmp	r3, r5
 800580e:	dcf2      	bgt.n	80057f6 <_printf_i+0x21e>
 8005810:	e7eb      	b.n	80057ea <_printf_i+0x212>
 8005812:	2500      	movs	r5, #0
 8005814:	f104 0619 	add.w	r6, r4, #25
 8005818:	e7f5      	b.n	8005806 <_printf_i+0x22e>
 800581a:	bf00      	nop
 800581c:	08005b49 	.word	0x08005b49
 8005820:	08005b5a 	.word	0x08005b5a

08005824 <memcpy>:
 8005824:	440a      	add	r2, r1
 8005826:	4291      	cmp	r1, r2
 8005828:	f100 33ff 	add.w	r3, r0, #4294967295
 800582c:	d100      	bne.n	8005830 <memcpy+0xc>
 800582e:	4770      	bx	lr
 8005830:	b510      	push	{r4, lr}
 8005832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583a:	4291      	cmp	r1, r2
 800583c:	d1f9      	bne.n	8005832 <memcpy+0xe>
 800583e:	bd10      	pop	{r4, pc}

08005840 <memmove>:
 8005840:	4288      	cmp	r0, r1
 8005842:	b510      	push	{r4, lr}
 8005844:	eb01 0402 	add.w	r4, r1, r2
 8005848:	d902      	bls.n	8005850 <memmove+0x10>
 800584a:	4284      	cmp	r4, r0
 800584c:	4623      	mov	r3, r4
 800584e:	d807      	bhi.n	8005860 <memmove+0x20>
 8005850:	1e43      	subs	r3, r0, #1
 8005852:	42a1      	cmp	r1, r4
 8005854:	d008      	beq.n	8005868 <memmove+0x28>
 8005856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800585a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800585e:	e7f8      	b.n	8005852 <memmove+0x12>
 8005860:	4402      	add	r2, r0
 8005862:	4601      	mov	r1, r0
 8005864:	428a      	cmp	r2, r1
 8005866:	d100      	bne.n	800586a <memmove+0x2a>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800586e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005872:	e7f7      	b.n	8005864 <memmove+0x24>

08005874 <_free_r>:
 8005874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005876:	2900      	cmp	r1, #0
 8005878:	d044      	beq.n	8005904 <_free_r+0x90>
 800587a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587e:	9001      	str	r0, [sp, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f1a1 0404 	sub.w	r4, r1, #4
 8005886:	bfb8      	it	lt
 8005888:	18e4      	addlt	r4, r4, r3
 800588a:	f000 f913 	bl	8005ab4 <__malloc_lock>
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <_free_r+0x94>)
 8005890:	9801      	ldr	r0, [sp, #4]
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	b933      	cbnz	r3, 80058a4 <_free_r+0x30>
 8005896:	6063      	str	r3, [r4, #4]
 8005898:	6014      	str	r4, [r2, #0]
 800589a:	b003      	add	sp, #12
 800589c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058a0:	f000 b90e 	b.w	8005ac0 <__malloc_unlock>
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d908      	bls.n	80058ba <_free_r+0x46>
 80058a8:	6825      	ldr	r5, [r4, #0]
 80058aa:	1961      	adds	r1, r4, r5
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf01      	itttt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	1949      	addeq	r1, r1, r5
 80058b6:	6021      	streq	r1, [r4, #0]
 80058b8:	e7ed      	b.n	8005896 <_free_r+0x22>
 80058ba:	461a      	mov	r2, r3
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b10b      	cbz	r3, 80058c4 <_free_r+0x50>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d9fa      	bls.n	80058ba <_free_r+0x46>
 80058c4:	6811      	ldr	r1, [r2, #0]
 80058c6:	1855      	adds	r5, r2, r1
 80058c8:	42a5      	cmp	r5, r4
 80058ca:	d10b      	bne.n	80058e4 <_free_r+0x70>
 80058cc:	6824      	ldr	r4, [r4, #0]
 80058ce:	4421      	add	r1, r4
 80058d0:	1854      	adds	r4, r2, r1
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	6011      	str	r1, [r2, #0]
 80058d6:	d1e0      	bne.n	800589a <_free_r+0x26>
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	6053      	str	r3, [r2, #4]
 80058de:	4421      	add	r1, r4
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	e7da      	b.n	800589a <_free_r+0x26>
 80058e4:	d902      	bls.n	80058ec <_free_r+0x78>
 80058e6:	230c      	movs	r3, #12
 80058e8:	6003      	str	r3, [r0, #0]
 80058ea:	e7d6      	b.n	800589a <_free_r+0x26>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf04      	itt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	6063      	str	r3, [r4, #4]
 80058fa:	bf04      	itt	eq
 80058fc:	1949      	addeq	r1, r1, r5
 80058fe:	6021      	streq	r1, [r4, #0]
 8005900:	6054      	str	r4, [r2, #4]
 8005902:	e7ca      	b.n	800589a <_free_r+0x26>
 8005904:	b003      	add	sp, #12
 8005906:	bd30      	pop	{r4, r5, pc}
 8005908:	20000208 	.word	0x20000208

0800590c <sbrk_aligned>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	4e0e      	ldr	r6, [pc, #56]	; (8005948 <sbrk_aligned+0x3c>)
 8005910:	460c      	mov	r4, r1
 8005912:	6831      	ldr	r1, [r6, #0]
 8005914:	4605      	mov	r5, r0
 8005916:	b911      	cbnz	r1, 800591e <sbrk_aligned+0x12>
 8005918:	f000 f8bc 	bl	8005a94 <_sbrk_r>
 800591c:	6030      	str	r0, [r6, #0]
 800591e:	4621      	mov	r1, r4
 8005920:	4628      	mov	r0, r5
 8005922:	f000 f8b7 	bl	8005a94 <_sbrk_r>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	d00a      	beq.n	8005940 <sbrk_aligned+0x34>
 800592a:	1cc4      	adds	r4, r0, #3
 800592c:	f024 0403 	bic.w	r4, r4, #3
 8005930:	42a0      	cmp	r0, r4
 8005932:	d007      	beq.n	8005944 <sbrk_aligned+0x38>
 8005934:	1a21      	subs	r1, r4, r0
 8005936:	4628      	mov	r0, r5
 8005938:	f000 f8ac 	bl	8005a94 <_sbrk_r>
 800593c:	3001      	adds	r0, #1
 800593e:	d101      	bne.n	8005944 <sbrk_aligned+0x38>
 8005940:	f04f 34ff 	mov.w	r4, #4294967295
 8005944:	4620      	mov	r0, r4
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	2000020c 	.word	0x2000020c

0800594c <_malloc_r>:
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	1ccd      	adds	r5, r1, #3
 8005952:	f025 0503 	bic.w	r5, r5, #3
 8005956:	3508      	adds	r5, #8
 8005958:	2d0c      	cmp	r5, #12
 800595a:	bf38      	it	cc
 800595c:	250c      	movcc	r5, #12
 800595e:	2d00      	cmp	r5, #0
 8005960:	4607      	mov	r7, r0
 8005962:	db01      	blt.n	8005968 <_malloc_r+0x1c>
 8005964:	42a9      	cmp	r1, r5
 8005966:	d905      	bls.n	8005974 <_malloc_r+0x28>
 8005968:	230c      	movs	r3, #12
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	2600      	movs	r6, #0
 800596e:	4630      	mov	r0, r6
 8005970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005974:	4e2e      	ldr	r6, [pc, #184]	; (8005a30 <_malloc_r+0xe4>)
 8005976:	f000 f89d 	bl	8005ab4 <__malloc_lock>
 800597a:	6833      	ldr	r3, [r6, #0]
 800597c:	461c      	mov	r4, r3
 800597e:	bb34      	cbnz	r4, 80059ce <_malloc_r+0x82>
 8005980:	4629      	mov	r1, r5
 8005982:	4638      	mov	r0, r7
 8005984:	f7ff ffc2 	bl	800590c <sbrk_aligned>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	4604      	mov	r4, r0
 800598c:	d14d      	bne.n	8005a2a <_malloc_r+0xde>
 800598e:	6834      	ldr	r4, [r6, #0]
 8005990:	4626      	mov	r6, r4
 8005992:	2e00      	cmp	r6, #0
 8005994:	d140      	bne.n	8005a18 <_malloc_r+0xcc>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	4631      	mov	r1, r6
 800599a:	4638      	mov	r0, r7
 800599c:	eb04 0803 	add.w	r8, r4, r3
 80059a0:	f000 f878 	bl	8005a94 <_sbrk_r>
 80059a4:	4580      	cmp	r8, r0
 80059a6:	d13a      	bne.n	8005a1e <_malloc_r+0xd2>
 80059a8:	6821      	ldr	r1, [r4, #0]
 80059aa:	3503      	adds	r5, #3
 80059ac:	1a6d      	subs	r5, r5, r1
 80059ae:	f025 0503 	bic.w	r5, r5, #3
 80059b2:	3508      	adds	r5, #8
 80059b4:	2d0c      	cmp	r5, #12
 80059b6:	bf38      	it	cc
 80059b8:	250c      	movcc	r5, #12
 80059ba:	4629      	mov	r1, r5
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff ffa5 	bl	800590c <sbrk_aligned>
 80059c2:	3001      	adds	r0, #1
 80059c4:	d02b      	beq.n	8005a1e <_malloc_r+0xd2>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	442b      	add	r3, r5
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	e00e      	b.n	80059ec <_malloc_r+0xa0>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	1b52      	subs	r2, r2, r5
 80059d2:	d41e      	bmi.n	8005a12 <_malloc_r+0xc6>
 80059d4:	2a0b      	cmp	r2, #11
 80059d6:	d916      	bls.n	8005a06 <_malloc_r+0xba>
 80059d8:	1961      	adds	r1, r4, r5
 80059da:	42a3      	cmp	r3, r4
 80059dc:	6025      	str	r5, [r4, #0]
 80059de:	bf18      	it	ne
 80059e0:	6059      	strne	r1, [r3, #4]
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	bf08      	it	eq
 80059e6:	6031      	streq	r1, [r6, #0]
 80059e8:	5162      	str	r2, [r4, r5]
 80059ea:	604b      	str	r3, [r1, #4]
 80059ec:	4638      	mov	r0, r7
 80059ee:	f104 060b 	add.w	r6, r4, #11
 80059f2:	f000 f865 	bl	8005ac0 <__malloc_unlock>
 80059f6:	f026 0607 	bic.w	r6, r6, #7
 80059fa:	1d23      	adds	r3, r4, #4
 80059fc:	1af2      	subs	r2, r6, r3
 80059fe:	d0b6      	beq.n	800596e <_malloc_r+0x22>
 8005a00:	1b9b      	subs	r3, r3, r6
 8005a02:	50a3      	str	r3, [r4, r2]
 8005a04:	e7b3      	b.n	800596e <_malloc_r+0x22>
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	bf0c      	ite	eq
 8005a0c:	6032      	streq	r2, [r6, #0]
 8005a0e:	605a      	strne	r2, [r3, #4]
 8005a10:	e7ec      	b.n	80059ec <_malloc_r+0xa0>
 8005a12:	4623      	mov	r3, r4
 8005a14:	6864      	ldr	r4, [r4, #4]
 8005a16:	e7b2      	b.n	800597e <_malloc_r+0x32>
 8005a18:	4634      	mov	r4, r6
 8005a1a:	6876      	ldr	r6, [r6, #4]
 8005a1c:	e7b9      	b.n	8005992 <_malloc_r+0x46>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4638      	mov	r0, r7
 8005a24:	f000 f84c 	bl	8005ac0 <__malloc_unlock>
 8005a28:	e7a1      	b.n	800596e <_malloc_r+0x22>
 8005a2a:	6025      	str	r5, [r4, #0]
 8005a2c:	e7de      	b.n	80059ec <_malloc_r+0xa0>
 8005a2e:	bf00      	nop
 8005a30:	20000208 	.word	0x20000208

08005a34 <_realloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	b921      	cbnz	r1, 8005a4a <_realloc_r+0x16>
 8005a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4611      	mov	r1, r2
 8005a46:	f7ff bf81 	b.w	800594c <_malloc_r>
 8005a4a:	b92a      	cbnz	r2, 8005a58 <_realloc_r+0x24>
 8005a4c:	f7ff ff12 	bl	8005874 <_free_r>
 8005a50:	4625      	mov	r5, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	f000 f838 	bl	8005acc <_malloc_usable_size_r>
 8005a5c:	4284      	cmp	r4, r0
 8005a5e:	4607      	mov	r7, r0
 8005a60:	d802      	bhi.n	8005a68 <_realloc_r+0x34>
 8005a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a66:	d812      	bhi.n	8005a8e <_realloc_r+0x5a>
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff ff6e 	bl	800594c <_malloc_r>
 8005a70:	4605      	mov	r5, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0ed      	beq.n	8005a52 <_realloc_r+0x1e>
 8005a76:	42bc      	cmp	r4, r7
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	bf28      	it	cs
 8005a7e:	463a      	movcs	r2, r7
 8005a80:	f7ff fed0 	bl	8005824 <memcpy>
 8005a84:	4631      	mov	r1, r6
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff fef4 	bl	8005874 <_free_r>
 8005a8c:	e7e1      	b.n	8005a52 <_realloc_r+0x1e>
 8005a8e:	4635      	mov	r5, r6
 8005a90:	e7df      	b.n	8005a52 <_realloc_r+0x1e>
	...

08005a94 <_sbrk_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d06      	ldr	r5, [pc, #24]	; (8005ab0 <_sbrk_r+0x1c>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fb fe4a 	bl	8001738 <_sbrk>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_sbrk_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_sbrk_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	20000210 	.word	0x20000210

08005ab4 <__malloc_lock>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__malloc_lock+0x8>)
 8005ab6:	f000 b811 	b.w	8005adc <__retarget_lock_acquire_recursive>
 8005aba:	bf00      	nop
 8005abc:	20000214 	.word	0x20000214

08005ac0 <__malloc_unlock>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <__malloc_unlock+0x8>)
 8005ac2:	f000 b80c 	b.w	8005ade <__retarget_lock_release_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	20000214 	.word	0x20000214

08005acc <_malloc_usable_size_r>:
 8005acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad0:	1f18      	subs	r0, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bfbc      	itt	lt
 8005ad6:	580b      	ldrlt	r3, [r1, r0]
 8005ad8:	18c0      	addlt	r0, r0, r3
 8005ada:	4770      	bx	lr

08005adc <__retarget_lock_acquire_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_release_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <_init>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr

08005aec <_fini>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr
