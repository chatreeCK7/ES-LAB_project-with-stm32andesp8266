
testSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008200  08008200  00018200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008614  08008614  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008614  08008614  00018614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800861c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000021c  08008838  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008838  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b99  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002063  00000000  00000000  00030de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002957  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012245  00000000  00000000  0003761f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d26  00000000  00000000  00049864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db58a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  000db5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081e8 	.word	0x080081e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	080081e8 	.word	0x080081e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	; 0x2c
 8000f04:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f06:	f000 fd97 	bl	8001a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f0a:	f000 f959 	bl	80011c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f0e:	f000 fa97 	bl	8001440 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f12:	f000 fa41 	bl	8001398 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f16:	f000 f9bb 	bl	8001290 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000f1a:	f000 f9e7 	bl	80012ec <MX_TIM1_Init>
	MX_USART6_UART_Init();
 8000f1e:	f000 fa65 	bl	80013ec <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000f22:	4899      	ldr	r0, [pc, #612]	; (8001188 <main+0x288>)
 8000f24:	f002 fd2c 	bl	8003980 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	4897      	ldr	r0, [pc, #604]	; (800118c <main+0x28c>)
 8000f30:	f001 f958 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart6, (uint8_t*) &rec, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	4996      	ldr	r1, [pc, #600]	; (8001190 <main+0x290>)
 8000f38:	4896      	ldr	r0, [pc, #600]	; (8001194 <main+0x294>)
 8000f3a:	f003 faa0 	bl	800447e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c1, (0x5A << 1), 4, 100);
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2204      	movs	r2, #4
 8000f42:	21b4      	movs	r1, #180	; 0xb4
 8000f44:	4894      	ldr	r0, [pc, #592]	; (8001198 <main+0x298>)
 8000f46:	f001 fcd1 	bl	80028ec <HAL_I2C_IsDeviceReady>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d104      	bne.n	8000f5e <main+0x5e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2120      	movs	r1, #32
 8000f58:	488c      	ldr	r0, [pc, #560]	; (800118c <main+0x28c>)
 8000f5a:	f001 f943 	bl	80021e4 <HAL_GPIO_WritePin>
	}
	while (1) {

		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	4889      	ldr	r0, [pc, #548]	; (800118c <main+0x28c>)
 8000f66:	f001 f93d 	bl	80021e4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f6a:	4b87      	ldr	r3, [pc, #540]	; (8001188 <main+0x288>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim1) < 10)
 8000f72:	bf00      	nop
 8000f74:	4b84      	ldr	r3, [pc, #528]	; (8001188 <main+0x288>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d9fa      	bls.n	8000f74 <main+0x74>
			;  // wait for 10 us
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	4881      	ldr	r0, [pc, #516]	; (800118c <main+0x28c>)
 8000f86:	f001 f92d 	bl	80021e4 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8000f8a:	f000 fdbb 	bl	8001b04 <HAL_GetTick>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a82      	ldr	r2, [pc, #520]	; (800119c <main+0x29c>)
 8000f92:	6013      	str	r3, [r2, #0]
		// used this to avoid infinite while loop  (for timeout)
		// wait for the echo pin to go high
		while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8000f94:	bf00      	nop
 8000f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9a:	487c      	ldr	r0, [pc, #496]	; (800118c <main+0x28c>)
 8000f9c:	f001 f90a 	bl	80021b4 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d108      	bne.n	8000fb8 <main+0xb8>
				&& pMillis + 10 > HAL_GetTick())
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <main+0x29c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f103 040a 	add.w	r4, r3, #10
 8000fae:	f000 fda9 	bl	8001b04 <HAL_GetTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	429c      	cmp	r4, r3
 8000fb6:	d8ee      	bhi.n	8000f96 <main+0x96>
			;
		Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000fb8:	4b73      	ldr	r3, [pc, #460]	; (8001188 <main+0x288>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	4a78      	ldr	r2, [pc, #480]	; (80011a0 <main+0x2a0>)
 8000fc0:	6013      	str	r3, [r2, #0]

		pMillis = HAL_GetTick();
 8000fc2:	f000 fd9f 	bl	8001b04 <HAL_GetTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a74      	ldr	r2, [pc, #464]	; (800119c <main+0x29c>)
 8000fca:	6013      	str	r3, [r2, #0]
		// used this to avoid infinite while loop (for timeout)
		// wait for the echo pin to go low
		while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8000fcc:	bf00      	nop
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	486e      	ldr	r0, [pc, #440]	; (800118c <main+0x28c>)
 8000fd4:	f001 f8ee 	bl	80021b4 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <main+0xf0>
				&& pMillis + 50 > HAL_GetTick())
 8000fde:	4b6f      	ldr	r3, [pc, #444]	; (800119c <main+0x29c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000fe6:	f000 fd8d 	bl	8001b04 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	429c      	cmp	r4, r3
 8000fee:	d8ee      	bhi.n	8000fce <main+0xce>
			;
		Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 8000ff0:	4b65      	ldr	r3, [pc, #404]	; (8001188 <main+0x288>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4a6b      	ldr	r2, [pc, #428]	; (80011a4 <main+0x2a4>)
 8000ff8:	6013      	str	r3, [r2, #0]

		Distance = (Value2 - Value1) * 0.034 / 2;
 8000ffa:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <main+0x2a4>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <main+0x2a0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa85 	bl	8000514 <__aeabi_ui2d>
 800100a:	a359      	add	r3, pc, #356	; (adr r3, 8001170 <main+0x270>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fafa 	bl	8000608 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001024:	f7ff fc1a 	bl	800085c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdc2 	bl	8000bb8 <__aeabi_d2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <main+0x2a8>)
 800103a:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Read(&hi2c1, (0x5A << 1), 0x06, 1, (uint8_t*) data_read, 2,
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2302      	movs	r3, #2
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	2206      	movs	r2, #6
 800104e:	21b4      	movs	r1, #180	; 0xb4
 8001050:	4851      	ldr	r0, [pc, #324]	; (8001198 <main+0x298>)
 8001052:	f001 fa25 	bl	80024a0 <HAL_I2C_Mem_Read>
				100);

		aux = (int16_t) ((data_read[1] << 8) | data_read[0]);
 8001056:	7a7b      	ldrb	r3, [r7, #9]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7a3b      	ldrb	r3, [r7, #8]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	82bb      	strh	r3, [r7, #20]
		ambient_temperature = aux * 0.02 - 273.15;
 8001064:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa63 	bl	8000534 <__aeabi_i2d>
 800106e:	a342      	add	r3, pc, #264	; (adr r3, 8001178 <main+0x278>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fac8 	bl	8000608 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	a33f      	add	r3, pc, #252	; (adr r3, 8001180 <main+0x280>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff f907 	bl	8000298 <__aeabi_dsub>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fd69 	bl	8000b68 <__aeabi_d2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	827b      	strh	r3, [r7, #18]

		HAL_Delay(100);
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f000 fd3e 	bl	8001b1c <HAL_Delay>

		HAL_I2C_Mem_Read(&hi2c1, (0x5A << 1), 0x07, 1, (uint8_t*) data_read1, 2,
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2302      	movs	r3, #2
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	2207      	movs	r2, #7
 80010b0:	21b4      	movs	r1, #180	; 0xb4
 80010b2:	4839      	ldr	r0, [pc, #228]	; (8001198 <main+0x298>)
 80010b4:	f001 f9f4 	bl	80024a0 <HAL_I2C_Mem_Read>
				100);

		aux1 = (int16_t) ((data_read1[1] << 8) | data_read1[0]);
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	823b      	strh	r3, [r7, #16]

		ambient_temperature1 = aux1 * 0.02 - 273.15;
 80010c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa32 	bl	8000534 <__aeabi_i2d>
 80010d0:	a329      	add	r3, pc, #164	; (adr r3, 8001178 <main+0x278>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a327      	add	r3, pc, #156	; (adr r3, 8001180 <main+0x280>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff f8d6 	bl	8000298 <__aeabi_dsub>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd38 	bl	8000b68 <__aeabi_d2iz>
 80010f8:	4603      	mov	r3, r0
 80010fa:	81fb      	strh	r3, [r7, #14]

		HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f000 fd0d 	bl	8001b1c <HAL_Delay>

		sprintf(data, "Ambient = %d \r\n", ambient_temperature);
 8001102:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001106:	461a      	mov	r2, r3
 8001108:	4928      	ldr	r1, [pc, #160]	; (80011ac <main+0x2ac>)
 800110a:	4829      	ldr	r0, [pc, #164]	; (80011b0 <main+0x2b0>)
 800110c:	f004 fdf2 	bl	8005cf4 <siprintf>
		sprintf(data1, "%d %d \r\n", ambient_temperature1, Distance);
 8001110:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <main+0x2a8>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4926      	ldr	r1, [pc, #152]	; (80011b4 <main+0x2b4>)
 800111a:	4827      	ldr	r0, [pc, #156]	; (80011b8 <main+0x2b8>)
 800111c:	f004 fdea 	bl	8005cf4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) data, strlen(data), 1000);
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <main+0x2b0>)
 8001122:	f7ff f85d 	bl	80001e0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	4920      	ldr	r1, [pc, #128]	; (80011b0 <main+0x2b0>)
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <main+0x2bc>)
 8001132:	f003 f912 	bl	800435a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) data1, strlen(data1), 1000);
 8001136:	4820      	ldr	r0, [pc, #128]	; (80011b8 <main+0x2b8>)
 8001138:	f7ff f852 	bl	80001e0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <main+0x2b8>)
 8001146:	481d      	ldr	r0, [pc, #116]	; (80011bc <main+0x2bc>)
 8001148:	f003 f907 	bl	800435a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*) data1, strlen(data1), 1000);
 800114c:	481a      	ldr	r0, [pc, #104]	; (80011b8 <main+0x2b8>)
 800114e:	f7ff f847 	bl	80001e0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	4917      	ldr	r1, [pc, #92]	; (80011b8 <main+0x2b8>)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <main+0x294>)
 800115e:	f003 f8fc 	bl	800435a <HAL_UART_Transmit>
		HAL_Delay(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f000 fcda 	bl	8001b1c <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001168:	e6f9      	b.n	8000f5e <main+0x5e>
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	b020c49c 	.word	0xb020c49c
 8001174:	3fa16872 	.word	0x3fa16872
 8001178:	47ae147b 	.word	0x47ae147b
 800117c:	3f947ae1 	.word	0x3f947ae1
 8001180:	66666666 	.word	0x66666666
 8001184:	40711266 	.word	0x40711266
 8001188:	2000028c 	.word	0x2000028c
 800118c:	40020000 	.word	0x40020000
 8001190:	2000036a 	.word	0x2000036a
 8001194:	20000318 	.word	0x20000318
 8001198:	20000238 	.word	0x20000238
 800119c:	2000035c 	.word	0x2000035c
 80011a0:	20000360 	.word	0x20000360
 80011a4:	20000364 	.word	0x20000364
 80011a8:	20000368 	.word	0x20000368
 80011ac:	08008200 	.word	0x08008200
 80011b0:	20000000 	.word	0x20000000
 80011b4:	08008210 	.word	0x08008210
 80011b8:	20000020 	.word	0x20000020
 80011bc:	200002d4 	.word	0x200002d4

080011c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f91e 	bl	8005410 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <SystemClock_Config+0xc8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <SystemClock_Config+0xc8>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <SystemClock_Config+0xc8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <SystemClock_Config+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <SystemClock_Config+0xcc>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <SystemClock_Config+0xcc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001234:	2348      	movs	r3, #72	; 0x48
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800123c:	2304      	movs	r3, #4
 800123e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f001 ff03 	bl	8003050 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x94>
		Error_Handler();
 8001250:	f000 f966 	bl	8001520 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2102      	movs	r1, #2
 8001270:	4618      	mov	r0, r3
 8001272:	f002 f965 	bl	8003540 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xc0>
		Error_Handler();
 800127c:	f000 f950 	bl	8001520 <Error_Handler>
	}
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	; 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f000 ffa3 	bl	8002218 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80012d8:	f000 f922 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000238 	.word	0x20000238
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_TIM1_Init+0xa4>)
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <MX_TIM1_Init+0xa8>)
 800130c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001310:	2247      	movs	r2, #71	; 0x47
 8001312:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_TIM1_Init+0xa4>)
 800131c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001320:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_TIM1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001336:	f002 fb7d 	bl	8003a34 <HAL_TIM_IC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x58>
		Error_Handler();
 8001340:	f000 f8ee 	bl	8001520 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480f      	ldr	r0, [pc, #60]	; (8001390 <MX_TIM1_Init+0xa4>)
 8001354:	f002 ff32 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800135e:	f000 f8df 	bl	8001520 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_TIM1_Init+0xa4>)
 800137a:	f002 fcb2 	bl	8003ce2 <HAL_TIM_IC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8001384:	f000 f8cc 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000028c 	.word	0x2000028c
 8001394:	40010000 	.word	0x40010000

08001398 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART2_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f002 ff76 	bl	80042c0 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80013da:	f000 f8a1 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d4 	.word	0x200002d4
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_USART6_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART6_UART_Init+0x4c>)
 8001424:	f002 ff4c 	bl	80042c0 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800142e:	f000 f877 	bl	8001520 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000318 	.word	0x20000318
 800143c:	40011400 	.word	0x40011400

08001440 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_GPIO_Init+0xd4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a26      	ldr	r2, [pc, #152]	; (8001514 <MX_GPIO_Init+0xd4>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <MX_GPIO_Init+0xd4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_GPIO_Init+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <MX_GPIO_Init+0xd4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_GPIO_Init+0xd4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_GPIO_Init+0xd4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_9, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <MX_GPIO_Init+0xd8>)
 80014ce:	f000 fe89 	bl	80021e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0xdc>)
 80014ea:	f000 fcdf 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_9;
 80014ee:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0xd8>)
 8001508:	f000 fcd0 	bl	8001eac <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800

08001520 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800156a:	2006      	movs	r0, #6
 800156c:	f000 fbca 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_I2C_MspInit+0x84>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d12b      	bne.n	80015f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ca:	2304      	movs	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2C_MspInit+0x8c>)
 80015d6:	f000 fc69 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_I2C_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_TIM_IC_MspInit+0x94>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d134      	bne.n	8001698 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_TIM_IC_MspInit+0x98>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <HAL_TIM_IC_MspInit+0x9c>)
 8001684:	f000 fc12 	bl	8001eac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	201b      	movs	r0, #27
 800168e:	f000 fb44 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001692:	201b      	movs	r0, #27
 8001694:	f000 fb5d 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <HAL_UART_MspInit+0xf8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001706:	230c      	movs	r3, #12
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4822      	ldr	r0, [pc, #136]	; (80017ac <HAL_UART_MspInit+0x100>)
 8001722:	f000 fbc3 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001726:	e038      	b.n	800179a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_UART_MspInit+0x104>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d133      	bne.n	800179a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_UART_MspInit+0xfc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800177a:	2308      	movs	r3, #8
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <HAL_UART_MspInit+0x108>)
 8001786:	f000 fb91 	bl	8001eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	2047      	movs	r0, #71	; 0x47
 8001790:	f000 fac3 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001794:	2047      	movs	r0, #71	; 0x47
 8001796:	f000 fadc 	bl	8001d52 <HAL_NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3730      	adds	r7, #48	; 0x30
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40011400 	.word	0x40011400
 80017b4:	40020800 	.word	0x40020800

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f96a 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM1_CC_IRQHandler+0x10>)
 8001812:	f002 f95e 	bl	8003ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000028c 	.word	0x2000028c

08001820 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <USART6_IRQHandler+0x10>)
 8001826:	f002 fe5b 	bl	80044e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000318 	.word	0x20000318

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184e:	f003 fdb5 	bl	80053bc <__errno>
 8001852:	4603      	mov	r3, r0
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
	return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_exit>:

void _exit (int status)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe7 	bl	8001844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001876:	e7fe      	b.n	8001876 <_exit+0x12>

08001878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800188a:	f3af 8000 	nop.w
 800188e:	4601      	mov	r1, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf0      	blt.n	800188a <_read+0x12>
	}

return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e009      	b.n	80018d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf1      	blt.n	80018c4 <_write+0x12>
	}
	return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_close>:

int _close(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_isatty>:

int _isatty(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f003 fd1a 	bl	80053bc <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20020000 	.word	0x20020000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	2000036c 	.word	0x2000036c
 80019bc:	20000388 	.word	0x20000388

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f003 fcd9 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fa73 	bl	8000f00 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001a28:	0800861c 	.word	0x0800861c
  ldr r2, =_sbss
 8001a2c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001a30:	20000384 	.word	0x20000384

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
 __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f94f 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd5e 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f967 	bl	8001d6e <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f92f 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000040 	.word	0x20000040
 8001ad4:	20000048 	.word	0x20000048
 8001ad8:	20000044 	.word	0x20000044

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000048 	.word	0x20000048
 8001b00:	20000370 	.word	0x20000370

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000370 	.word	0x20000370

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000048 	.word	0x20000048

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	; (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff29 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff3e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff31 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa2 	bl	8001cc0 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff feb6 	bl	8001b04 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d008      	beq.n	8001db8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e052      	b.n	8001e5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0216 	bic.w	r2, r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <HAL_DMA_Abort+0x62>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0208 	bic.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	e013      	b.n	8001e32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0a:	f7ff fe7b 	bl	8001b04 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d90c      	bls.n	8001e32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e015      	b.n	8001e5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e4      	bne.n	8001e0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d004      	beq.n	8001e84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e00c      	b.n	8001e9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2205      	movs	r2, #5
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e159      	b.n	800217c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8148 	bne.w	8002176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a2 	beq.w	8002176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_GPIO_Init+0x2e8>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_GPIO_Init+0x2e8>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_GPIO_Init+0x2e8>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_GPIO_Init+0x2ec>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a49      	ldr	r2, [pc, #292]	; (800219c <HAL_GPIO_Init+0x2f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x202>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <HAL_GPIO_Init+0x2f4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x1fe>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_GPIO_Init+0x2f8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x1fa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a46      	ldr	r2, [pc, #280]	; (80021a8 <HAL_GPIO_Init+0x2fc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x1f6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a45      	ldr	r2, [pc, #276]	; (80021ac <HAL_GPIO_Init+0x300>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x1f2>
 800209a:	2304      	movs	r3, #4
 800209c:	e008      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 800209e:	2307      	movs	r3, #7
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x204>
 80020ae:	2300      	movs	r3, #0
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4093      	lsls	r3, r2
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c0:	4935      	ldr	r1, [pc, #212]	; (8002198 <HAL_GPIO_Init+0x2ec>)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_GPIO_Init+0x304>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f2:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_GPIO_Init+0x304>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_GPIO_Init+0x304>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_GPIO_Init+0x304>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_GPIO_Init+0x304>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_GPIO_Init+0x304>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	f67f aea2 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e12b      	b.n	8002482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff f99c 	bl	800157c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	; 0x24
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800227c:	f001 fb58 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8002280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a81      	ldr	r2, [pc, #516]	; (800248c <HAL_I2C_Init+0x274>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d807      	bhi.n	800229c <HAL_I2C_Init+0x84>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a80      	ldr	r2, [pc, #512]	; (8002490 <HAL_I2C_Init+0x278>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e006      	b.n	80022aa <HAL_I2C_Init+0x92>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a7d      	ldr	r2, [pc, #500]	; (8002494 <HAL_I2C_Init+0x27c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bf94      	ite	ls
 80022a4:	2301      	movls	r3, #1
 80022a6:	2300      	movhi	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0e7      	b.n	8002482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a78      	ldr	r2, [pc, #480]	; (8002498 <HAL_I2C_Init+0x280>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_I2C_Init+0x274>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d802      	bhi.n	80022ec <HAL_I2C_Init+0xd4>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	e009      	b.n	8002300 <HAL_I2C_Init+0xe8>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_I2C_Init+0x284>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	495c      	ldr	r1, [pc, #368]	; (800248c <HAL_I2C_Init+0x274>)
 800231c:	428b      	cmp	r3, r1
 800231e:	d819      	bhi.n	8002354 <HAL_I2C_Init+0x13c>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e59      	subs	r1, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fbb1 f3f3 	udiv	r3, r1, r3
 800232e:	1c59      	adds	r1, r3, #1
 8002330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002334:	400b      	ands	r3, r1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_I2C_Init+0x138>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e59      	subs	r1, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fbb1 f3f3 	udiv	r3, r1, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	e051      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 8002350:	2304      	movs	r3, #4
 8002352:	e04f      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_I2C_Init+0x168>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e012      	b.n	80023a6 <HAL_I2C_Init+0x18e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Init+0x196>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e022      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10e      	bne.n	80023d4 <HAL_I2C_Init+0x1bc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e58      	subs	r0, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d2:	e00f      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	6809      	ldr	r1, [r1, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6911      	ldr	r1, [r2, #16]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	000186a0 	.word	0x000186a0
 8002490:	001e847f 	.word	0x001e847f
 8002494:	003d08ff 	.word	0x003d08ff
 8002498:	431bde83 	.word	0x431bde83
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ba:	f7ff fb23 	bl	8001b04 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	f040 8208 	bne.w	80028de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2319      	movs	r3, #25
 80024d4:	2201      	movs	r2, #1
 80024d6:	497b      	ldr	r1, [pc, #492]	; (80026c4 <HAL_I2C_Mem_Read+0x224>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fc1d 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	e1fb      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Mem_Read+0x56>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e1f4      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d007      	beq.n	800251c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2222      	movs	r2, #34	; 0x22
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_I2C_Mem_Read+0x228>)
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255e:	88f8      	ldrh	r0, [r7, #6]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4603      	mov	r3, r0
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 faea 	bl	8002b48 <I2C_RequestMemoryRead>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1b0      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d113      	bne.n	80025ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e184      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d11b      	bne.n	80025ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e164      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d11b      	bne.n	800262e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	e144      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002644:	e138      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	2b03      	cmp	r3, #3
 800264c:	f200 80f1 	bhi.w	8002832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b01      	cmp	r3, #1
 8002656:	d123      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fc72 	bl	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e139      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269e:	e10b      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d14e      	bne.n	8002746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	2200      	movs	r2, #0
 80026b0:	4906      	ldr	r1, [pc, #24]	; (80026cc <HAL_I2C_Mem_Read+0x22c>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fb30 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e10e      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
 80026c2:	bf00      	nop
 80026c4:	00100002 	.word	0x00100002
 80026c8:	ffff0000 	.word	0xffff0000
 80026cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002744:	e0b8      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	2200      	movs	r2, #0
 800274e:	4966      	ldr	r1, [pc, #408]	; (80028e8 <HAL_I2C_Mem_Read+0x448>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fae1 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0bf      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2200      	movs	r2, #0
 80027aa:	494f      	ldr	r1, [pc, #316]	; (80028e8 <HAL_I2C_Mem_Read+0x448>)
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fab3 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e091      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002830:	e042      	b.n	80028b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fb85 	bl	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e04c      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d118      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f aec2 	bne.w	8002646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010004 	.word	0x00010004

080028ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff f902 	bl	8001b04 <HAL_GetTick>
 8002900:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	f040 8111 	bne.w	8002b36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2319      	movs	r3, #25
 800291a:	2201      	movs	r2, #1
 800291c:	4988      	ldr	r1, [pc, #544]	; (8002b40 <HAL_I2C_IsDeviceReady+0x254>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9fa 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	e104      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_I2C_IsDeviceReady+0x50>
 8002938:	2302      	movs	r3, #2
 800293a:	e0fd      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d007      	beq.n	8002962 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2224      	movs	r2, #36	; 0x24
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_I2C_IsDeviceReady+0x258>)
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f9b8 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d103      	bne.n	80029c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0b6      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029da:	f7ff f893 	bl	8001b04 <HAL_GetTick>
 80029de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a0e:	e025      	b.n	8002a5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7ff f878 	bl	8001b04 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <HAL_I2C_IsDeviceReady+0x13a>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	22a0      	movs	r2, #160	; 0xa0
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2ba0      	cmp	r3, #160	; 0xa0
 8002a66:	d005      	beq.n	8002a74 <HAL_I2C_IsDeviceReady+0x188>
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_I2C_IsDeviceReady+0x188>
 8002a6e:	7dbb      	ldrb	r3, [r7, #22]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0cd      	beq.n	8002a10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d129      	bne.n	8002ade <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4921      	ldr	r1, [pc, #132]	; (8002b40 <HAL_I2C_IsDeviceReady+0x254>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f92c 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e036      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e02c      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	490f      	ldr	r1, [pc, #60]	; (8002b40 <HAL_I2C_IsDeviceReady+0x254>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f908 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e012      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f4ff af32 	bcc.w	8002986 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000

08002b48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f8c2 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d103      	bne.n	8002bb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0aa      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	4952      	ldr	r1, [pc, #328]	; (8002d14 <I2C_RequestMemoryRead+0x1cc>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f8fa 	bl	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e097      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf4:	6a39      	ldr	r1, [r7, #32]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f964 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d107      	bne.n	8002c1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e076      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c24:	893b      	ldrh	r3, [r7, #8]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]
 8002c2e:	e021      	b.n	8002c74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c30:	893b      	ldrh	r3, [r7, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f93e 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d107      	bne.n	8002c66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e050      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	6a39      	ldr	r1, [r7, #32]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f923 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d107      	bne.n	8002c9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e035      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f82b 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d103      	bne.n	8002ce0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e013      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	4906      	ldr	r1, [pc, #24]	; (8002d14 <I2C_RequestMemoryRead+0x1cc>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f863 	bl	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	00010002 	.word	0x00010002

08002d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	e025      	b.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d021      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe fee7 	bl	8001b04 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e023      	b.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10d      	bne.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	e00c      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d0b6      	beq.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd4:	e051      	b.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de4:	d123      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e046      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d021      	beq.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fe65 	bl	8001b04 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d116      	bne.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e020      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10c      	bne.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e00b      	b.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d18d      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed0:	e02d      	b.n	8002f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f88d 	bl	8002ff2 <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e02d      	b.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fe0b 	bl	8001b04 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d1ca      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f52:	e042      	b.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d119      	bne.n	8002f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f06f 0210 	mvn.w	r2, #16
 8002f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e029      	b.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fdb5 	bl	8001b04 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d1b5      	bne.n	8002f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d11b      	bne.n	8003042 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003012:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e267      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b7e      	ldr	r3, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e242      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6c      	ldr	r2, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fcfc 	bl	8001b04 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fcf8 	bl	8001b04 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e207      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fce8 	bl	8001b04 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fce4 	bl	8001b04 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f3      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c7      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fc9d 	bl	8001b04 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe fc99 	bl	8001b04 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a8      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fc7c 	bl	8001b04 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe fc78 	bl	8001b04 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e187      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe fc5c 	bl	8001b04 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe fc58 	bl	8001b04 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e167      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fc45 	bl	8001b04 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe fc41 	bl	8001b04 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e150      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b74      	ldr	r3, [pc, #464]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe fc01 	bl	8001b04 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe fbfd 	bl	8001b04 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e10c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x2ea>
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x30c>
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a5e      	ldr	r2, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a5b      	ldr	r2, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800335c:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe fbc2 	bl	8001b04 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fbbe 	bl	8001b04 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x334>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe fbac 	bl	8001b04 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe fba8 	bl	8001b04 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0b5      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a1 	beq.w	8003530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d05c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d141      	bne.n	8003486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fb7c 	bl	8001b04 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fb78 	bl	8001b04 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e087      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe fb51 	bl	8001b04 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fb4d 	bl	8001b04 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x416>
 8003484:	e054      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fb3a 	bl	8001b04 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fb36 	bl	8001b04 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e045      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x444>
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e038      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d028      	beq.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fa68 	bl	8001b04 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fa64 	bl	8001b04 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f9c8 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800821c 	.word	0x0800821c
 8003704:	20000040 	.word	0x20000040
 8003708:	20000044 	.word	0x20000044

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b094      	sub	sp, #80	; 0x50
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
 8003718:	2300      	movs	r3, #0
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	2300      	movs	r3, #0
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b79      	ldr	r3, [pc, #484]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80e1 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e0db      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003744:	e0db      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_RCC_GetSysClockFreq+0x208>)
 8003748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800374a:	e0d8      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b6f      	ldr	r3, [pc, #444]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b6d      	ldr	r3, [pc, #436]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
 800376c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
 800377a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4621      	mov	r1, r4
 8003798:	1a51      	subs	r1, r2, r1
 800379a:	6139      	str	r1, [r7, #16]
 800379c:	4629      	mov	r1, r5
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b0:	4659      	mov	r1, fp
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ba:	4651      	mov	r1, sl
 80037bc:	018a      	lsls	r2, r1, #6
 80037be:	4651      	mov	r1, sl
 80037c0:	ebb2 0801 	subs.w	r8, r2, r1
 80037c4:	4659      	mov	r1, fp
 80037c6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	462b      	mov	r3, r5
 80037ec:	eb49 0303 	adc.w	r3, r9, r3
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037fe:	4629      	mov	r1, r5
 8003800:	024b      	lsls	r3, r1, #9
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003808:	4621      	mov	r1, r4
 800380a:	024a      	lsls	r2, r1, #9
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003812:	2200      	movs	r2, #0
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
 8003816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381c:	f7fd f9ec 	bl	8000bf8 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4613      	mov	r3, r2
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	e058      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382a:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	2200      	movs	r2, #0
 8003832:	4618      	mov	r0, r3
 8003834:	4611      	mov	r1, r2
 8003836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	f04f 0000 	mov.w	r0, #0
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	0159      	lsls	r1, r3, #5
 8003852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003856:	0150      	lsls	r0, r2, #5
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4641      	mov	r1, r8
 800385e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003862:	4649      	mov	r1, r9
 8003864:	eb63 0b01 	sbc.w	fp, r3, r1
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800387c:	ebb2 040a 	subs.w	r4, r2, sl
 8003880:	eb63 050b 	sbc.w	r5, r3, fp
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	00eb      	lsls	r3, r5, #3
 800388e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	4643      	mov	r3, r8
 800389a:	18e3      	adds	r3, r4, r3
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	464b      	mov	r3, r9
 80038a0:	eb45 0303 	adc.w	r3, r5, r3
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038b2:	4629      	mov	r1, r5
 80038b4:	028b      	lsls	r3, r1, #10
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038bc:	4621      	mov	r1, r4
 80038be:	028a      	lsls	r2, r1, #10
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c6:	2200      	movs	r2, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	61fa      	str	r2, [r7, #28]
 80038cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d0:	f7fd f992 	bl	8000bf8 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003900:	4618      	mov	r0, r3
 8003902:	3750      	adds	r7, #80	; 0x50
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400
 8003914:	007a1200 	.word	0x007a1200

08003918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000040 	.word	0x20000040

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff0 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	0800822c 	.word	0x0800822c

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffdc 	bl	8003918 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	0800822c 	.word	0x0800822c

08003980 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e03c      	b.n	8003a12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_TIM_Base_Start+0xa0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_TIM_Base_Start+0x5c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d013      	beq.n	80039dc <HAL_TIM_Base_Start+0x5c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_TIM_Base_Start+0xa4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_TIM_Base_Start+0x5c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_TIM_Base_Start+0xa8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_TIM_Base_Start+0x5c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_TIM_Base_Start+0xac>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIM_Base_Start+0x5c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIM_Base_Start+0xb0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d010      	beq.n	8003a10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e007      	b.n	8003a10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40014000 	.word	0x40014000

08003a34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fdd6 	bl	800160c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fa04 	bl	8003e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d122      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d11b      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0202 	mvn.w	r2, #2
 8003afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f994 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f986 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f997 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d122      	bne.n	8003b82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0204 	mvn.w	r2, #4
 8003b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f96a 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003b6e:	e005      	b.n	8003b7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f95c 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f96d 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d122      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11b      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0208 	mvn.w	r2, #8
 8003ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2204      	movs	r2, #4
 8003bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f940 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003bc2:	e005      	b.n	8003bd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f932 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f943 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d122      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d11b      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f06f 0210 	mvn.w	r2, #16
 8003bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2208      	movs	r2, #8
 8003c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f916 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003c16:	e005      	b.n	8003c24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f908 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f919 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0201 	mvn.w	r2, #1
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8e2 	bl	8003e1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d10e      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb15 	bl	80042ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d10e      	bne.n	8003cae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d107      	bne.n	8003cae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8de 	bl	8003e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d10e      	bne.n	8003cda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d107      	bne.n	8003cda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0220 	mvn.w	r2, #32
 8003cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fadf 	bl	8004298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e088      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11b      	bne.n	8003d46 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f000 f92f 	bl	8003f80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 020c 	bic.w	r2, r2, #12
 8003d30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6999      	ldr	r1, [r3, #24]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
 8003d44:	e060      	b.n	8003e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11c      	bne.n	8003d86 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 f978 	bl	8004050 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
 8003d84:	e040      	b.n	8003e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f000 f995 	bl	80040ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020c 	bic.w	r2, r2, #12
 8003dae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69d9      	ldr	r1, [r3, #28]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	61da      	str	r2, [r3, #28]
 8003dc2:	e021      	b.n	8003e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d11c      	bne.n	8003e04 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f000 f9b2 	bl	8004142 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
 8003e02:	e001      	b.n	8003e08 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <TIM_Base_SetConfig+0xe4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00f      	beq.n	8003eb8 <TIM_Base_SetConfig+0x38>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x38>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <TIM_Base_SetConfig+0xe8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x38>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a30      	ldr	r2, [pc, #192]	; (8003f6c <TIM_Base_SetConfig+0xec>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <TIM_Base_SetConfig+0xf0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <TIM_Base_SetConfig+0xe4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01b      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d017      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <TIM_Base_SetConfig+0xe8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <TIM_Base_SetConfig+0xec>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00f      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <TIM_Base_SetConfig+0xf0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <TIM_Base_SetConfig+0xf4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <TIM_Base_SetConfig+0xf8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <TIM_Base_SetConfig+0xfc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <TIM_Base_SetConfig+0xe4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	615a      	str	r2, [r3, #20]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_TI1_SetConfig+0xbc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x56>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x56>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a21      	ldr	r2, [pc, #132]	; (8004040 <TIM_TI1_SetConfig+0xc0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x56>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <TIM_TI1_SetConfig+0xc4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x56>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <TIM_TI1_SetConfig+0xc8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_TI1_SetConfig+0x56>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <TIM_TI1_SetConfig+0xcc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <TIM_TI1_SetConfig+0x5a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <TIM_TI1_SetConfig+0x5c>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e003      	b.n	8003ffa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	b2db      	uxtb	r3, r3
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f023 030a 	bic.w	r3, r3, #10
 8004014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 030a 	and.w	r3, r3, #10
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40014000 	.word	0x40014000

08004050 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0210 	bic.w	r2, r3, #16
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800408e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	031b      	lsls	r3, r3, #12
 8004094:	b29b      	uxth	r3, r3
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004106:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	b2db      	uxtb	r3, r3
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800411a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	b29b      	uxth	r3, r3
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004194:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e050      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d013      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40014000 	.word	0x40014000

08004298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e03f      	b.n	8004352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f9e0 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fde5 	bl	8004ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b08a      	sub	sp, #40	; 0x28
 800435e:	af02      	add	r7, sp, #8
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	d17c      	bne.n	8004474 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_UART_Transmit+0x2c>
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e075      	b.n	8004476 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_UART_Transmit+0x3e>
 8004394:	2302      	movs	r3, #2
 8004396:	e06e      	b.n	8004476 <HAL_UART_Transmit+0x11c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2221      	movs	r2, #33	; 0x21
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ae:	f7fd fba9 	bl	8001b04 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d108      	bne.n	80043dc <HAL_UART_Transmit+0x82>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e003      	b.n	80043e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043ec:	e02a      	b.n	8004444 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fb29 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e036      	b.n	8004476 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	3302      	adds	r3, #2
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	e007      	b.n	8004436 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	3301      	adds	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1cf      	bne.n	80043ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 faf9 	bl	8004a50 <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e006      	b.n	8004476 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b20      	cmp	r3, #32
 8004496:	d11d      	bne.n	80044d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_UART_Receive_IT+0x26>
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e016      	b.n	80044d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_UART_Receive_IT+0x38>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e00f      	b.n	80044d6 <HAL_UART_Receive_IT+0x58>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fb2e 	bl	8004b2c <UART_Start_Receive_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	e000      	b.n	80044d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b0ba      	sub	sp, #232	; 0xe8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800451e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_UART_IRQHandler+0x66>
 8004532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fc0d 	bl	8004d5e <UART_Receive_IT>
      return;
 8004544:	e256      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80de 	beq.w	800470c <HAL_UART_IRQHandler+0x22c>
 8004550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80d1 	beq.w	800470c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_UART_IRQHandler+0xae>
 8004576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_UART_IRQHandler+0xd2>
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0202 	orr.w	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xf6>
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0204 	orr.w	r2, r3, #4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d011      	beq.n	8004606 <HAL_UART_IRQHandler+0x126>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f043 0208 	orr.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 81ed 	beq.w	80049ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_UART_IRQHandler+0x14e>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fb98 	bl	8004d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_UART_IRQHandler+0x17a>
 8004652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04f      	beq.n	80046fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 faa0 	bl	8004ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d141      	bne.n	80046f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800469a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1d9      	bne.n	800466e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	4a7d      	ldr	r2, [pc, #500]	; (80048bc <HAL_UART_IRQHandler+0x3dc>)
 80046c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd fbc9 	bl	8001e66 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00e      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f99a 	bl	8004a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00a      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f996 	bl	8004a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e006      	b.n	8004708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f992 	bl	8004a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004706:	e170      	b.n	80049ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	bf00      	nop
    return;
 800470a:	e16e      	b.n	80049ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 814a 	bne.w	80049aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8143 	beq.w	80049aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 813c 	beq.w	80049aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	f040 80b4 	bne.w	80048c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8140 	beq.w	80049ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004776:	429a      	cmp	r2, r3
 8004778:	f080 8139 	bcs.w	80049ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004782:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	f000 8088 	beq.w	80048a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1d9      	bne.n	8004792 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004802:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004806:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800480a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e1      	bne.n	80047de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800482a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800483e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e3      	bne.n	800481a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	f023 0310 	bic.w	r3, r3, #16
 8004876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004884:	65ba      	str	r2, [r7, #88]	; 0x58
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e3      	bne.n	8004860 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	4618      	mov	r0, r3
 800489e:	f7fd fa72 	bl	8001d86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8c0 	bl	8004a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048b8:	e099      	b.n	80049ee <HAL_UART_IRQHandler+0x50e>
 80048ba:	bf00      	nop
 80048bc:	08004c67 	.word	0x08004c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 808b 	beq.w	80049f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8086 	beq.w	80049f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800490a:	647a      	str	r2, [r7, #68]	; 0x44
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e3      	bne.n	80048e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3314      	adds	r3, #20
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	623b      	str	r3, [r7, #32]
   return(result);
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004942:	633a      	str	r2, [r7, #48]	; 0x30
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e3      	bne.n	800491e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60fb      	str	r3, [r7, #12]
   return(result);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004988:	61fa      	str	r2, [r7, #28]
 800498a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	69b9      	ldr	r1, [r7, #24]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	617b      	str	r3, [r7, #20]
   return(result);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e3      	bne.n	8004964 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800499c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f848 	bl	8004a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049a8:	e023      	b.n	80049f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_UART_IRQHandler+0x4ea>
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f963 	bl	8004c8e <UART_Transmit_IT>
    return;
 80049c8:	e014      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <HAL_UART_IRQHandler+0x514>
 80049d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9a3 	bl	8004d2e <UART_EndTransmit_IT>
    return;
 80049e8:	e004      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
    return;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
      return;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_UART_IRQHandler+0x514>
      return;
 80049f2:	bf00      	nop
  }
}
 80049f4:	37e8      	adds	r7, #232	; 0xe8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b090      	sub	sp, #64	; 0x40
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a60:	e050      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d04c      	beq.n	8004b04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a70:	f7fd f848 	bl	8001b04 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d241      	bcs.n	8004b04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aa0:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad4:	623a      	str	r2, [r7, #32]
 8004ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e00f      	b.n	8004b24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d09f      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3740      	adds	r7, #64	; 0x40
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2222      	movs	r2, #34	; 0x22
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b70:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0220 	orr.w	r2, r2, #32
 8004b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b095      	sub	sp, #84	; 0x54
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bc8:	643a      	str	r2, [r7, #64]	; 0x40
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e5      	bne.n	8004bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d119      	bne.n	8004c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c38:	61ba      	str	r2, [r7, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	613b      	str	r3, [r7, #16]
   return(result);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c5a:	bf00      	nop
 8004c5c:	3754      	adds	r7, #84	; 0x54
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fecf 	bl	8004a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b21      	cmp	r3, #33	; 0x21
 8004ca0:	d13e      	bne.n	8004d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d114      	bne.n	8004cd6 <UART_Transmit_IT+0x48>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d110      	bne.n	8004cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]
 8004cd4:	e008      	b.n	8004ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6211      	str	r1, [r2, #32]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e000      	b.n	8004d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fe54 	bl	80049fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08c      	sub	sp, #48	; 0x30
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b22      	cmp	r3, #34	; 0x22
 8004d70:	f040 80ab 	bne.w	8004eca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7c:	d117      	bne.n	8004dae <UART_Receive_IT+0x50>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d113      	bne.n	8004dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
 8004dac:	e026      	b.n	8004dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d007      	beq.n	8004dd2 <UART_Receive_IT+0x74>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <UART_Receive_IT+0x82>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e008      	b.n	8004df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d15a      	bne.n	8004ec6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0220 	bic.w	r2, r2, #32
 8004e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d135      	bne.n	8004ebc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	613b      	str	r3, [r7, #16]
   return(result);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	623a      	str	r2, [r7, #32]
 8004e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	69f9      	ldr	r1, [r7, #28]
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d10a      	bne.n	8004eae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fdbf 	bl	8004a38 <HAL_UARTEx_RxEventCallback>
 8004eba:	e002      	b.n	8004ec2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff fda7 	bl	8004a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e002      	b.n	8004ecc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	; 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b0c0      	sub	sp, #256	; 0x100
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	ea40 0301 	orr.w	r3, r0, r1
 8004efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f2c:	f021 010c 	bic.w	r1, r1, #12
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	6999      	ldr	r1, [r3, #24]
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	ea40 0301 	orr.w	r3, r0, r1
 8004f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b8f      	ldr	r3, [pc, #572]	; (80051a0 <UART_SetConfig+0x2cc>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d005      	beq.n	8004f74 <UART_SetConfig+0xa0>
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b8d      	ldr	r3, [pc, #564]	; (80051a4 <UART_SetConfig+0x2d0>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d104      	bne.n	8004f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f74:	f7fe fcf0 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004f78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f7c:	e003      	b.n	8004f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f7e:	f7fe fcd7 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004f82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	f040 810c 	bne.w	80051ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	eb12 0801 	adds.w	r8, r2, r1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	eb43 0901 	adc.w	r9, r3, r1
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fd6:	4690      	mov	r8, r2
 8004fd8:	4699      	mov	r9, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	eb18 0303 	adds.w	r3, r8, r3
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	eb49 0303 	adc.w	r3, r9, r3
 8004fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005002:	460b      	mov	r3, r1
 8005004:	18db      	adds	r3, r3, r3
 8005006:	653b      	str	r3, [r7, #80]	; 0x50
 8005008:	4613      	mov	r3, r2
 800500a:	eb42 0303 	adc.w	r3, r2, r3
 800500e:	657b      	str	r3, [r7, #84]	; 0x54
 8005010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005018:	f7fb fdee 	bl	8000bf8 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b61      	ldr	r3, [pc, #388]	; (80051a8 <UART_SetConfig+0x2d4>)
 8005022:	fba3 2302 	umull	r2, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	011c      	lsls	r4, r3, #4
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	1891      	adds	r1, r2, r2
 8005042:	64b9      	str	r1, [r7, #72]	; 0x48
 8005044:	415b      	adcs	r3, r3
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800504c:	4641      	mov	r1, r8
 800504e:	eb12 0a01 	adds.w	sl, r2, r1
 8005052:	4649      	mov	r1, r9
 8005054:	eb43 0b01 	adc.w	fp, r3, r1
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800506c:	4692      	mov	sl, r2
 800506e:	469b      	mov	fp, r3
 8005070:	4643      	mov	r3, r8
 8005072:	eb1a 0303 	adds.w	r3, sl, r3
 8005076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800507a:	464b      	mov	r3, r9
 800507c:	eb4b 0303 	adc.w	r3, fp, r3
 8005080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005098:	460b      	mov	r3, r1
 800509a:	18db      	adds	r3, r3, r3
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
 800509e:	4613      	mov	r3, r2
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44
 80050a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050ae:	f7fb fda3 	bl	8000bf8 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <UART_SetConfig+0x2d4>)
 80050ba:	fba3 2301 	umull	r2, r3, r3, r1
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	; 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1acb      	subs	r3, r1, r3
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <UART_SetConfig+0x2d4>)
 80050d0:	fba3 2302 	umull	r2, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050dc:	441c      	add	r4, r3
 80050de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	1891      	adds	r1, r2, r2
 80050f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80050f8:	415b      	adcs	r3, r3
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005100:	4641      	mov	r1, r8
 8005102:	1851      	adds	r1, r2, r1
 8005104:	6339      	str	r1, [r7, #48]	; 0x30
 8005106:	4649      	mov	r1, r9
 8005108:	414b      	adcs	r3, r1
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005118:	4659      	mov	r1, fp
 800511a:	00cb      	lsls	r3, r1, #3
 800511c:	4651      	mov	r1, sl
 800511e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005122:	4651      	mov	r1, sl
 8005124:	00ca      	lsls	r2, r1, #3
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	4603      	mov	r3, r0
 800512c:	4642      	mov	r2, r8
 800512e:	189b      	adds	r3, r3, r2
 8005130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005134:	464b      	mov	r3, r9
 8005136:	460a      	mov	r2, r1
 8005138:	eb42 0303 	adc.w	r3, r2, r3
 800513c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800514c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005154:	460b      	mov	r3, r1
 8005156:	18db      	adds	r3, r3, r3
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	4613      	mov	r3, r2
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800516a:	f7fb fd45 	bl	8000bf8 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <UART_SetConfig+0x2d4>)
 8005174:	fba3 1302 	umull	r1, r3, r3, r2
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	2164      	movs	r1, #100	; 0x64
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	3332      	adds	r3, #50	; 0x32
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <UART_SetConfig+0x2d4>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 0207 	and.w	r2, r3, #7
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4422      	add	r2, r4
 800519a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800519c:	e105      	b.n	80053aa <UART_SetConfig+0x4d6>
 800519e:	bf00      	nop
 80051a0:	40011000 	.word	0x40011000
 80051a4:	40011400 	.word	0x40011400
 80051a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051be:	4642      	mov	r2, r8
 80051c0:	464b      	mov	r3, r9
 80051c2:	1891      	adds	r1, r2, r2
 80051c4:	6239      	str	r1, [r7, #32]
 80051c6:	415b      	adcs	r3, r3
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ce:	4641      	mov	r1, r8
 80051d0:	1854      	adds	r4, r2, r1
 80051d2:	4649      	mov	r1, r9
 80051d4:	eb43 0501 	adc.w	r5, r3, r1
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	00eb      	lsls	r3, r5, #3
 80051e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051e6:	00e2      	lsls	r2, r4, #3
 80051e8:	4614      	mov	r4, r2
 80051ea:	461d      	mov	r5, r3
 80051ec:	4643      	mov	r3, r8
 80051ee:	18e3      	adds	r3, r4, r3
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051f4:	464b      	mov	r3, r9
 80051f6:	eb45 0303 	adc.w	r3, r5, r3
 80051fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800520a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800521a:	4629      	mov	r1, r5
 800521c:	008b      	lsls	r3, r1, #2
 800521e:	4621      	mov	r1, r4
 8005220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005224:	4621      	mov	r1, r4
 8005226:	008a      	lsls	r2, r1, #2
 8005228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800522c:	f7fb fce4 	bl	8000bf8 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4b60      	ldr	r3, [pc, #384]	; (80053b8 <UART_SetConfig+0x4e4>)
 8005236:	fba3 2302 	umull	r2, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	011c      	lsls	r4, r3, #4
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800524c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	1891      	adds	r1, r2, r2
 8005256:	61b9      	str	r1, [r7, #24]
 8005258:	415b      	adcs	r3, r3
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005260:	4641      	mov	r1, r8
 8005262:	1851      	adds	r1, r2, r1
 8005264:	6139      	str	r1, [r7, #16]
 8005266:	4649      	mov	r1, r9
 8005268:	414b      	adcs	r3, r1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005278:	4659      	mov	r1, fp
 800527a:	00cb      	lsls	r3, r1, #3
 800527c:	4651      	mov	r1, sl
 800527e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005282:	4651      	mov	r1, sl
 8005284:	00ca      	lsls	r2, r1, #3
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	4603      	mov	r3, r0
 800528c:	4642      	mov	r2, r8
 800528e:	189b      	adds	r3, r3, r2
 8005290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005294:	464b      	mov	r3, r9
 8005296:	460a      	mov	r2, r1
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80052aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052b8:	4649      	mov	r1, r9
 80052ba:	008b      	lsls	r3, r1, #2
 80052bc:	4641      	mov	r1, r8
 80052be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c2:	4641      	mov	r1, r8
 80052c4:	008a      	lsls	r2, r1, #2
 80052c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052ca:	f7fb fc95 	bl	8000bf8 <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <UART_SetConfig+0x4e4>)
 80052d4:	fba3 1302 	umull	r1, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	2164      	movs	r1, #100	; 0x64
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	3332      	adds	r3, #50	; 0x32
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <UART_SetConfig+0x4e4>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f2:	441c      	add	r4, r3
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f8:	2200      	movs	r2, #0
 80052fa:	673b      	str	r3, [r7, #112]	; 0x70
 80052fc:	677a      	str	r2, [r7, #116]	; 0x74
 80052fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005302:	4642      	mov	r2, r8
 8005304:	464b      	mov	r3, r9
 8005306:	1891      	adds	r1, r2, r2
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	415b      	adcs	r3, r3
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005312:	4641      	mov	r1, r8
 8005314:	1851      	adds	r1, r2, r1
 8005316:	6039      	str	r1, [r7, #0]
 8005318:	4649      	mov	r1, r9
 800531a:	414b      	adcs	r3, r1
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800532a:	4659      	mov	r1, fp
 800532c:	00cb      	lsls	r3, r1, #3
 800532e:	4651      	mov	r1, sl
 8005330:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005334:	4651      	mov	r1, sl
 8005336:	00ca      	lsls	r2, r1, #3
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	4603      	mov	r3, r0
 800533e:	4642      	mov	r2, r8
 8005340:	189b      	adds	r3, r3, r2
 8005342:	66bb      	str	r3, [r7, #104]	; 0x68
 8005344:	464b      	mov	r3, r9
 8005346:	460a      	mov	r2, r1
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	663b      	str	r3, [r7, #96]	; 0x60
 8005358:	667a      	str	r2, [r7, #100]	; 0x64
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005366:	4649      	mov	r1, r9
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	4641      	mov	r1, r8
 800536c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005370:	4641      	mov	r1, r8
 8005372:	008a      	lsls	r2, r1, #2
 8005374:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005378:	f7fb fc3e 	bl	8000bf8 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <UART_SetConfig+0x4e4>)
 8005382:	fba3 1302 	umull	r1, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2164      	movs	r1, #100	; 0x64
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	3332      	adds	r3, #50	; 0x32
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <UART_SetConfig+0x4e4>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4422      	add	r2, r4
 80053a8:	609a      	str	r2, [r3, #8]
}
 80053aa:	bf00      	nop
 80053ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053b0:	46bd      	mov	sp, r7
 80053b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b6:	bf00      	nop
 80053b8:	51eb851f 	.word	0x51eb851f

080053bc <__errno>:
 80053bc:	4b01      	ldr	r3, [pc, #4]	; (80053c4 <__errno+0x8>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	2000004c 	.word	0x2000004c

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4d0d      	ldr	r5, [pc, #52]	; (8005400 <__libc_init_array+0x38>)
 80053cc:	4c0d      	ldr	r4, [pc, #52]	; (8005404 <__libc_init_array+0x3c>)
 80053ce:	1b64      	subs	r4, r4, r5
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	2600      	movs	r6, #0
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	4d0b      	ldr	r5, [pc, #44]	; (8005408 <__libc_init_array+0x40>)
 80053da:	4c0c      	ldr	r4, [pc, #48]	; (800540c <__libc_init_array+0x44>)
 80053dc:	f002 ff04 	bl	80081e8 <_init>
 80053e0:	1b64      	subs	r4, r4, r5
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	2600      	movs	r6, #0
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	08008614 	.word	0x08008614
 8005404:	08008614 	.word	0x08008614
 8005408:	08008614 	.word	0x08008614
 800540c:	08008618 	.word	0x08008618

08005410 <memset>:
 8005410:	4402      	add	r2, r0
 8005412:	4603      	mov	r3, r0
 8005414:	4293      	cmp	r3, r2
 8005416:	d100      	bne.n	800541a <memset+0xa>
 8005418:	4770      	bx	lr
 800541a:	f803 1b01 	strb.w	r1, [r3], #1
 800541e:	e7f9      	b.n	8005414 <memset+0x4>

08005420 <__cvt>:
 8005420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	ec55 4b10 	vmov	r4, r5, d0
 8005428:	2d00      	cmp	r5, #0
 800542a:	460e      	mov	r6, r1
 800542c:	4619      	mov	r1, r3
 800542e:	462b      	mov	r3, r5
 8005430:	bfbb      	ittet	lt
 8005432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005436:	461d      	movlt	r5, r3
 8005438:	2300      	movge	r3, #0
 800543a:	232d      	movlt	r3, #45	; 0x2d
 800543c:	700b      	strb	r3, [r1, #0]
 800543e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005444:	4691      	mov	r9, r2
 8005446:	f023 0820 	bic.w	r8, r3, #32
 800544a:	bfbc      	itt	lt
 800544c:	4622      	movlt	r2, r4
 800544e:	4614      	movlt	r4, r2
 8005450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005454:	d005      	beq.n	8005462 <__cvt+0x42>
 8005456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800545a:	d100      	bne.n	800545e <__cvt+0x3e>
 800545c:	3601      	adds	r6, #1
 800545e:	2102      	movs	r1, #2
 8005460:	e000      	b.n	8005464 <__cvt+0x44>
 8005462:	2103      	movs	r1, #3
 8005464:	ab03      	add	r3, sp, #12
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	ab02      	add	r3, sp, #8
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	ec45 4b10 	vmov	d0, r4, r5
 8005470:	4653      	mov	r3, sl
 8005472:	4632      	mov	r2, r6
 8005474:	f000 fcec 	bl	8005e50 <_dtoa_r>
 8005478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800547c:	4607      	mov	r7, r0
 800547e:	d102      	bne.n	8005486 <__cvt+0x66>
 8005480:	f019 0f01 	tst.w	r9, #1
 8005484:	d022      	beq.n	80054cc <__cvt+0xac>
 8005486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800548a:	eb07 0906 	add.w	r9, r7, r6
 800548e:	d110      	bne.n	80054b2 <__cvt+0x92>
 8005490:	783b      	ldrb	r3, [r7, #0]
 8005492:	2b30      	cmp	r3, #48	; 0x30
 8005494:	d10a      	bne.n	80054ac <__cvt+0x8c>
 8005496:	2200      	movs	r2, #0
 8005498:	2300      	movs	r3, #0
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f7fb fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80054a2:	b918      	cbnz	r0, 80054ac <__cvt+0x8c>
 80054a4:	f1c6 0601 	rsb	r6, r6, #1
 80054a8:	f8ca 6000 	str.w	r6, [sl]
 80054ac:	f8da 3000 	ldr.w	r3, [sl]
 80054b0:	4499      	add	r9, r3
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80054be:	b108      	cbz	r0, 80054c4 <__cvt+0xa4>
 80054c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054c4:	2230      	movs	r2, #48	; 0x30
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	454b      	cmp	r3, r9
 80054ca:	d307      	bcc.n	80054dc <__cvt+0xbc>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d0:	1bdb      	subs	r3, r3, r7
 80054d2:	4638      	mov	r0, r7
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	b004      	add	sp, #16
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	1c59      	adds	r1, r3, #1
 80054de:	9103      	str	r1, [sp, #12]
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e7f0      	b.n	80054c6 <__cvt+0xa6>

080054e4 <__exponent>:
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e6:	4603      	mov	r3, r0
 80054e8:	2900      	cmp	r1, #0
 80054ea:	bfb8      	it	lt
 80054ec:	4249      	neglt	r1, r1
 80054ee:	f803 2b02 	strb.w	r2, [r3], #2
 80054f2:	bfb4      	ite	lt
 80054f4:	222d      	movlt	r2, #45	; 0x2d
 80054f6:	222b      	movge	r2, #43	; 0x2b
 80054f8:	2909      	cmp	r1, #9
 80054fa:	7042      	strb	r2, [r0, #1]
 80054fc:	dd2a      	ble.n	8005554 <__exponent+0x70>
 80054fe:	f10d 0407 	add.w	r4, sp, #7
 8005502:	46a4      	mov	ip, r4
 8005504:	270a      	movs	r7, #10
 8005506:	46a6      	mov	lr, r4
 8005508:	460a      	mov	r2, r1
 800550a:	fb91 f6f7 	sdiv	r6, r1, r7
 800550e:	fb07 1516 	mls	r5, r7, r6, r1
 8005512:	3530      	adds	r5, #48	; 0x30
 8005514:	2a63      	cmp	r2, #99	; 0x63
 8005516:	f104 34ff 	add.w	r4, r4, #4294967295
 800551a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800551e:	4631      	mov	r1, r6
 8005520:	dcf1      	bgt.n	8005506 <__exponent+0x22>
 8005522:	3130      	adds	r1, #48	; 0x30
 8005524:	f1ae 0502 	sub.w	r5, lr, #2
 8005528:	f804 1c01 	strb.w	r1, [r4, #-1]
 800552c:	1c44      	adds	r4, r0, #1
 800552e:	4629      	mov	r1, r5
 8005530:	4561      	cmp	r1, ip
 8005532:	d30a      	bcc.n	800554a <__exponent+0x66>
 8005534:	f10d 0209 	add.w	r2, sp, #9
 8005538:	eba2 020e 	sub.w	r2, r2, lr
 800553c:	4565      	cmp	r5, ip
 800553e:	bf88      	it	hi
 8005540:	2200      	movhi	r2, #0
 8005542:	4413      	add	r3, r2
 8005544:	1a18      	subs	r0, r3, r0
 8005546:	b003      	add	sp, #12
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800554e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005552:	e7ed      	b.n	8005530 <__exponent+0x4c>
 8005554:	2330      	movs	r3, #48	; 0x30
 8005556:	3130      	adds	r1, #48	; 0x30
 8005558:	7083      	strb	r3, [r0, #2]
 800555a:	70c1      	strb	r1, [r0, #3]
 800555c:	1d03      	adds	r3, r0, #4
 800555e:	e7f1      	b.n	8005544 <__exponent+0x60>

08005560 <_printf_float>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	ed2d 8b02 	vpush	{d8}
 8005568:	b08d      	sub	sp, #52	; 0x34
 800556a:	460c      	mov	r4, r1
 800556c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005570:	4616      	mov	r6, r2
 8005572:	461f      	mov	r7, r3
 8005574:	4605      	mov	r5, r0
 8005576:	f001 fa59 	bl	8006a2c <_localeconv_r>
 800557a:	f8d0 a000 	ldr.w	sl, [r0]
 800557e:	4650      	mov	r0, sl
 8005580:	f7fa fe2e 	bl	80001e0 <strlen>
 8005584:	2300      	movs	r3, #0
 8005586:	930a      	str	r3, [sp, #40]	; 0x28
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	9305      	str	r3, [sp, #20]
 800558c:	f8d8 3000 	ldr.w	r3, [r8]
 8005590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005594:	3307      	adds	r3, #7
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	f103 0208 	add.w	r2, r3, #8
 800559e:	f8c8 2000 	str.w	r2, [r8]
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055b2:	9307      	str	r3, [sp, #28]
 80055b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80055b8:	ee08 0a10 	vmov	s16, r0
 80055bc:	4b9f      	ldr	r3, [pc, #636]	; (800583c <_printf_float+0x2dc>)
 80055be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	f7fb fab9 	bl	8000b3c <__aeabi_dcmpun>
 80055ca:	bb88      	cbnz	r0, 8005630 <_printf_float+0xd0>
 80055cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d0:	4b9a      	ldr	r3, [pc, #616]	; (800583c <_printf_float+0x2dc>)
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	f7fb fa93 	bl	8000b00 <__aeabi_dcmple>
 80055da:	bb48      	cbnz	r0, 8005630 <_printf_float+0xd0>
 80055dc:	2200      	movs	r2, #0
 80055de:	2300      	movs	r3, #0
 80055e0:	4640      	mov	r0, r8
 80055e2:	4649      	mov	r1, r9
 80055e4:	f7fb fa82 	bl	8000aec <__aeabi_dcmplt>
 80055e8:	b110      	cbz	r0, 80055f0 <_printf_float+0x90>
 80055ea:	232d      	movs	r3, #45	; 0x2d
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	4b93      	ldr	r3, [pc, #588]	; (8005840 <_printf_float+0x2e0>)
 80055f2:	4894      	ldr	r0, [pc, #592]	; (8005844 <_printf_float+0x2e4>)
 80055f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055f8:	bf94      	ite	ls
 80055fa:	4698      	movls	r8, r3
 80055fc:	4680      	movhi	r8, r0
 80055fe:	2303      	movs	r3, #3
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	f023 0204 	bic.w	r2, r3, #4
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	f04f 0900 	mov.w	r9, #0
 800560e:	9700      	str	r7, [sp, #0]
 8005610:	4633      	mov	r3, r6
 8005612:	aa0b      	add	r2, sp, #44	; 0x2c
 8005614:	4621      	mov	r1, r4
 8005616:	4628      	mov	r0, r5
 8005618:	f000 f9d8 	bl	80059cc <_printf_common>
 800561c:	3001      	adds	r0, #1
 800561e:	f040 8090 	bne.w	8005742 <_printf_float+0x1e2>
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
 8005626:	b00d      	add	sp, #52	; 0x34
 8005628:	ecbd 8b02 	vpop	{d8}
 800562c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fb fa80 	bl	8000b3c <__aeabi_dcmpun>
 800563c:	b140      	cbz	r0, 8005650 <_printf_float+0xf0>
 800563e:	464b      	mov	r3, r9
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfbc      	itt	lt
 8005644:	232d      	movlt	r3, #45	; 0x2d
 8005646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800564a:	487f      	ldr	r0, [pc, #508]	; (8005848 <_printf_float+0x2e8>)
 800564c:	4b7f      	ldr	r3, [pc, #508]	; (800584c <_printf_float+0x2ec>)
 800564e:	e7d1      	b.n	80055f4 <_printf_float+0x94>
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005656:	9206      	str	r2, [sp, #24]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	d13f      	bne.n	80056dc <_printf_float+0x17c>
 800565c:	2306      	movs	r3, #6
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	6861      	ldr	r1, [r4, #4]
 8005664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005668:	2300      	movs	r3, #0
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	ab0a      	add	r3, sp, #40	; 0x28
 800566e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005672:	ab09      	add	r3, sp, #36	; 0x24
 8005674:	ec49 8b10 	vmov	d0, r8, r9
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6022      	str	r2, [r4, #0]
 800567c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005680:	4628      	mov	r0, r5
 8005682:	f7ff fecd 	bl	8005420 <__cvt>
 8005686:	9b06      	ldr	r3, [sp, #24]
 8005688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800568a:	2b47      	cmp	r3, #71	; 0x47
 800568c:	4680      	mov	r8, r0
 800568e:	d108      	bne.n	80056a2 <_printf_float+0x142>
 8005690:	1cc8      	adds	r0, r1, #3
 8005692:	db02      	blt.n	800569a <_printf_float+0x13a>
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	4299      	cmp	r1, r3
 8005698:	dd41      	ble.n	800571e <_printf_float+0x1be>
 800569a:	f1ab 0b02 	sub.w	fp, fp, #2
 800569e:	fa5f fb8b 	uxtb.w	fp, fp
 80056a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056a6:	d820      	bhi.n	80056ea <_printf_float+0x18a>
 80056a8:	3901      	subs	r1, #1
 80056aa:	465a      	mov	r2, fp
 80056ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b0:	9109      	str	r1, [sp, #36]	; 0x24
 80056b2:	f7ff ff17 	bl	80054e4 <__exponent>
 80056b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b8:	1813      	adds	r3, r2, r0
 80056ba:	2a01      	cmp	r2, #1
 80056bc:	4681      	mov	r9, r0
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	dc02      	bgt.n	80056c8 <_printf_float+0x168>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	07d2      	lsls	r2, r2, #31
 80056c6:	d501      	bpl.n	80056cc <_printf_float+0x16c>
 80056c8:	3301      	adds	r3, #1
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d09c      	beq.n	800560e <_printf_float+0xae>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056da:	e798      	b.n	800560e <_printf_float+0xae>
 80056dc:	9a06      	ldr	r2, [sp, #24]
 80056de:	2a47      	cmp	r2, #71	; 0x47
 80056e0:	d1be      	bne.n	8005660 <_printf_float+0x100>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1bc      	bne.n	8005660 <_printf_float+0x100>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e7b9      	b.n	800565e <_printf_float+0xfe>
 80056ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056ee:	d118      	bne.n	8005722 <_printf_float+0x1c2>
 80056f0:	2900      	cmp	r1, #0
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	dd0b      	ble.n	800570e <_printf_float+0x1ae>
 80056f6:	6121      	str	r1, [r4, #16]
 80056f8:	b913      	cbnz	r3, 8005700 <_printf_float+0x1a0>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	07d0      	lsls	r0, r2, #31
 80056fe:	d502      	bpl.n	8005706 <_printf_float+0x1a6>
 8005700:	3301      	adds	r3, #1
 8005702:	440b      	add	r3, r1
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	65a1      	str	r1, [r4, #88]	; 0x58
 8005708:	f04f 0900 	mov.w	r9, #0
 800570c:	e7de      	b.n	80056cc <_printf_float+0x16c>
 800570e:	b913      	cbnz	r3, 8005716 <_printf_float+0x1b6>
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	07d2      	lsls	r2, r2, #31
 8005714:	d501      	bpl.n	800571a <_printf_float+0x1ba>
 8005716:	3302      	adds	r3, #2
 8005718:	e7f4      	b.n	8005704 <_printf_float+0x1a4>
 800571a:	2301      	movs	r3, #1
 800571c:	e7f2      	b.n	8005704 <_printf_float+0x1a4>
 800571e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005724:	4299      	cmp	r1, r3
 8005726:	db05      	blt.n	8005734 <_printf_float+0x1d4>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	6121      	str	r1, [r4, #16]
 800572c:	07d8      	lsls	r0, r3, #31
 800572e:	d5ea      	bpl.n	8005706 <_printf_float+0x1a6>
 8005730:	1c4b      	adds	r3, r1, #1
 8005732:	e7e7      	b.n	8005704 <_printf_float+0x1a4>
 8005734:	2900      	cmp	r1, #0
 8005736:	bfd4      	ite	le
 8005738:	f1c1 0202 	rsble	r2, r1, #2
 800573c:	2201      	movgt	r2, #1
 800573e:	4413      	add	r3, r2
 8005740:	e7e0      	b.n	8005704 <_printf_float+0x1a4>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	055a      	lsls	r2, r3, #21
 8005746:	d407      	bmi.n	8005758 <_printf_float+0x1f8>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	4642      	mov	r2, r8
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d12c      	bne.n	80057b0 <_printf_float+0x250>
 8005756:	e764      	b.n	8005622 <_printf_float+0xc2>
 8005758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800575c:	f240 80e0 	bls.w	8005920 <_printf_float+0x3c0>
 8005760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	f7fb f9b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800576c:	2800      	cmp	r0, #0
 800576e:	d034      	beq.n	80057da <_printf_float+0x27a>
 8005770:	4a37      	ldr	r2, [pc, #220]	; (8005850 <_printf_float+0x2f0>)
 8005772:	2301      	movs	r3, #1
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f af51 	beq.w	8005622 <_printf_float+0xc2>
 8005780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005784:	429a      	cmp	r2, r3
 8005786:	db02      	blt.n	800578e <_printf_float+0x22e>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	07d8      	lsls	r0, r3, #31
 800578c:	d510      	bpl.n	80057b0 <_printf_float+0x250>
 800578e:	ee18 3a10 	vmov	r3, s16
 8005792:	4652      	mov	r2, sl
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f af41 	beq.w	8005622 <_printf_float+0xc2>
 80057a0:	f04f 0800 	mov.w	r8, #0
 80057a4:	f104 091a 	add.w	r9, r4, #26
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4543      	cmp	r3, r8
 80057ae:	dc09      	bgt.n	80057c4 <_printf_float+0x264>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	079b      	lsls	r3, r3, #30
 80057b4:	f100 8105 	bmi.w	80059c2 <_printf_float+0x462>
 80057b8:	68e0      	ldr	r0, [r4, #12]
 80057ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057bc:	4298      	cmp	r0, r3
 80057be:	bfb8      	it	lt
 80057c0:	4618      	movlt	r0, r3
 80057c2:	e730      	b.n	8005626 <_printf_float+0xc6>
 80057c4:	2301      	movs	r3, #1
 80057c6:	464a      	mov	r2, r9
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af27 	beq.w	8005622 <_printf_float+0xc2>
 80057d4:	f108 0801 	add.w	r8, r8, #1
 80057d8:	e7e6      	b.n	80057a8 <_printf_float+0x248>
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc39      	bgt.n	8005854 <_printf_float+0x2f4>
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <_printf_float+0x2f0>)
 80057e2:	2301      	movs	r3, #1
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af19 	beq.w	8005622 <_printf_float+0xc2>
 80057f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d102      	bne.n	80057fe <_printf_float+0x29e>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07d9      	lsls	r1, r3, #31
 80057fc:	d5d8      	bpl.n	80057b0 <_printf_float+0x250>
 80057fe:	ee18 3a10 	vmov	r3, s16
 8005802:	4652      	mov	r2, sl
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	f43f af09 	beq.w	8005622 <_printf_float+0xc2>
 8005810:	f04f 0900 	mov.w	r9, #0
 8005814:	f104 0a1a 	add.w	sl, r4, #26
 8005818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581a:	425b      	negs	r3, r3
 800581c:	454b      	cmp	r3, r9
 800581e:	dc01      	bgt.n	8005824 <_printf_float+0x2c4>
 8005820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005822:	e792      	b.n	800574a <_printf_float+0x1ea>
 8005824:	2301      	movs	r3, #1
 8005826:	4652      	mov	r2, sl
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f aef7 	beq.w	8005622 <_printf_float+0xc2>
 8005834:	f109 0901 	add.w	r9, r9, #1
 8005838:	e7ee      	b.n	8005818 <_printf_float+0x2b8>
 800583a:	bf00      	nop
 800583c:	7fefffff 	.word	0x7fefffff
 8005840:	08008238 	.word	0x08008238
 8005844:	0800823c 	.word	0x0800823c
 8005848:	08008244 	.word	0x08008244
 800584c:	08008240 	.word	0x08008240
 8005850:	08008248 	.word	0x08008248
 8005854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005858:	429a      	cmp	r2, r3
 800585a:	bfa8      	it	ge
 800585c:	461a      	movge	r2, r3
 800585e:	2a00      	cmp	r2, #0
 8005860:	4691      	mov	r9, r2
 8005862:	dc37      	bgt.n	80058d4 <_printf_float+0x374>
 8005864:	f04f 0b00 	mov.w	fp, #0
 8005868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800586c:	f104 021a 	add.w	r2, r4, #26
 8005870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005872:	9305      	str	r3, [sp, #20]
 8005874:	eba3 0309 	sub.w	r3, r3, r9
 8005878:	455b      	cmp	r3, fp
 800587a:	dc33      	bgt.n	80058e4 <_printf_float+0x384>
 800587c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005880:	429a      	cmp	r2, r3
 8005882:	db3b      	blt.n	80058fc <_printf_float+0x39c>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07da      	lsls	r2, r3, #31
 8005888:	d438      	bmi.n	80058fc <_printf_float+0x39c>
 800588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588c:	9a05      	ldr	r2, [sp, #20]
 800588e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005890:	1a9a      	subs	r2, r3, r2
 8005892:	eba3 0901 	sub.w	r9, r3, r1
 8005896:	4591      	cmp	r9, r2
 8005898:	bfa8      	it	ge
 800589a:	4691      	movge	r9, r2
 800589c:	f1b9 0f00 	cmp.w	r9, #0
 80058a0:	dc35      	bgt.n	800590e <_printf_float+0x3ae>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058aa:	f104 0a1a 	add.w	sl, r4, #26
 80058ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	eba3 0309 	sub.w	r3, r3, r9
 80058b8:	4543      	cmp	r3, r8
 80058ba:	f77f af79 	ble.w	80057b0 <_printf_float+0x250>
 80058be:	2301      	movs	r3, #1
 80058c0:	4652      	mov	r2, sl
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f aeaa 	beq.w	8005622 <_printf_float+0xc2>
 80058ce:	f108 0801 	add.w	r8, r8, #1
 80058d2:	e7ec      	b.n	80058ae <_printf_float+0x34e>
 80058d4:	4613      	mov	r3, r2
 80058d6:	4631      	mov	r1, r6
 80058d8:	4642      	mov	r2, r8
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	d1c0      	bne.n	8005864 <_printf_float+0x304>
 80058e2:	e69e      	b.n	8005622 <_printf_float+0xc2>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	9205      	str	r2, [sp, #20]
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f ae97 	beq.w	8005622 <_printf_float+0xc2>
 80058f4:	9a05      	ldr	r2, [sp, #20]
 80058f6:	f10b 0b01 	add.w	fp, fp, #1
 80058fa:	e7b9      	b.n	8005870 <_printf_float+0x310>
 80058fc:	ee18 3a10 	vmov	r3, s16
 8005900:	4652      	mov	r2, sl
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	d1be      	bne.n	800588a <_printf_float+0x32a>
 800590c:	e689      	b.n	8005622 <_printf_float+0xc2>
 800590e:	9a05      	ldr	r2, [sp, #20]
 8005910:	464b      	mov	r3, r9
 8005912:	4442      	add	r2, r8
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	d1c1      	bne.n	80058a2 <_printf_float+0x342>
 800591e:	e680      	b.n	8005622 <_printf_float+0xc2>
 8005920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005922:	2a01      	cmp	r2, #1
 8005924:	dc01      	bgt.n	800592a <_printf_float+0x3ca>
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d538      	bpl.n	800599c <_printf_float+0x43c>
 800592a:	2301      	movs	r3, #1
 800592c:	4642      	mov	r2, r8
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae74 	beq.w	8005622 <_printf_float+0xc2>
 800593a:	ee18 3a10 	vmov	r3, s16
 800593e:	4652      	mov	r2, sl
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f ae6b 	beq.w	8005622 <_printf_float+0xc2>
 800594c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005950:	2200      	movs	r2, #0
 8005952:	2300      	movs	r3, #0
 8005954:	f7fb f8c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005958:	b9d8      	cbnz	r0, 8005992 <_printf_float+0x432>
 800595a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595c:	f108 0201 	add.w	r2, r8, #1
 8005960:	3b01      	subs	r3, #1
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	d10e      	bne.n	800598a <_printf_float+0x42a>
 800596c:	e659      	b.n	8005622 <_printf_float+0xc2>
 800596e:	2301      	movs	r3, #1
 8005970:	4652      	mov	r2, sl
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae52 	beq.w	8005622 <_printf_float+0xc2>
 800597e:	f108 0801 	add.w	r8, r8, #1
 8005982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005984:	3b01      	subs	r3, #1
 8005986:	4543      	cmp	r3, r8
 8005988:	dcf1      	bgt.n	800596e <_printf_float+0x40e>
 800598a:	464b      	mov	r3, r9
 800598c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005990:	e6dc      	b.n	800574c <_printf_float+0x1ec>
 8005992:	f04f 0800 	mov.w	r8, #0
 8005996:	f104 0a1a 	add.w	sl, r4, #26
 800599a:	e7f2      	b.n	8005982 <_printf_float+0x422>
 800599c:	2301      	movs	r3, #1
 800599e:	4642      	mov	r2, r8
 80059a0:	e7df      	b.n	8005962 <_printf_float+0x402>
 80059a2:	2301      	movs	r3, #1
 80059a4:	464a      	mov	r2, r9
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae38 	beq.w	8005622 <_printf_float+0xc2>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ba:	1a5b      	subs	r3, r3, r1
 80059bc:	4543      	cmp	r3, r8
 80059be:	dcf0      	bgt.n	80059a2 <_printf_float+0x442>
 80059c0:	e6fa      	b.n	80057b8 <_printf_float+0x258>
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	f104 0919 	add.w	r9, r4, #25
 80059ca:	e7f4      	b.n	80059b6 <_printf_float+0x456>

080059cc <_printf_common>:
 80059cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	4616      	mov	r6, r2
 80059d2:	4699      	mov	r9, r3
 80059d4:	688a      	ldr	r2, [r1, #8]
 80059d6:	690b      	ldr	r3, [r1, #16]
 80059d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059dc:	4293      	cmp	r3, r2
 80059de:	bfb8      	it	lt
 80059e0:	4613      	movlt	r3, r2
 80059e2:	6033      	str	r3, [r6, #0]
 80059e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e8:	4607      	mov	r7, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b10a      	cbz	r2, 80059f2 <_printf_common+0x26>
 80059ee:	3301      	adds	r3, #1
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	0699      	lsls	r1, r3, #26
 80059f6:	bf42      	ittt	mi
 80059f8:	6833      	ldrmi	r3, [r6, #0]
 80059fa:	3302      	addmi	r3, #2
 80059fc:	6033      	strmi	r3, [r6, #0]
 80059fe:	6825      	ldr	r5, [r4, #0]
 8005a00:	f015 0506 	ands.w	r5, r5, #6
 8005a04:	d106      	bne.n	8005a14 <_printf_common+0x48>
 8005a06:	f104 0a19 	add.w	sl, r4, #25
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	6832      	ldr	r2, [r6, #0]
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	42ab      	cmp	r3, r5
 8005a12:	dc26      	bgt.n	8005a62 <_printf_common+0x96>
 8005a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a18:	1e13      	subs	r3, r2, #0
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	bf18      	it	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	0692      	lsls	r2, r2, #26
 8005a22:	d42b      	bmi.n	8005a7c <_printf_common+0xb0>
 8005a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d01e      	beq.n	8005a70 <_printf_common+0xa4>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	68e5      	ldr	r5, [r4, #12]
 8005a36:	6832      	ldr	r2, [r6, #0]
 8005a38:	f003 0306 	and.w	r3, r3, #6
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	bf08      	it	eq
 8005a40:	1aad      	subeq	r5, r5, r2
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	bf0c      	ite	eq
 8005a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a4c:	2500      	movne	r5, #0
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bfc4      	itt	gt
 8005a52:	1a9b      	subgt	r3, r3, r2
 8005a54:	18ed      	addgt	r5, r5, r3
 8005a56:	2600      	movs	r6, #0
 8005a58:	341a      	adds	r4, #26
 8005a5a:	42b5      	cmp	r5, r6
 8005a5c:	d11a      	bne.n	8005a94 <_printf_common+0xc8>
 8005a5e:	2000      	movs	r0, #0
 8005a60:	e008      	b.n	8005a74 <_printf_common+0xa8>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4652      	mov	r2, sl
 8005a66:	4649      	mov	r1, r9
 8005a68:	4638      	mov	r0, r7
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d103      	bne.n	8005a78 <_printf_common+0xac>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7c6      	b.n	8005a0a <_printf_common+0x3e>
 8005a7c:	18e1      	adds	r1, r4, r3
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	2030      	movs	r0, #48	; 0x30
 8005a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a86:	4422      	add	r2, r4
 8005a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a90:	3302      	adds	r3, #2
 8005a92:	e7c7      	b.n	8005a24 <_printf_common+0x58>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4622      	mov	r2, r4
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d0e6      	beq.n	8005a70 <_printf_common+0xa4>
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7d9      	b.n	8005a5a <_printf_common+0x8e>
	...

08005aa8 <_printf_i>:
 8005aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aac:	7e0f      	ldrb	r7, [r1, #24]
 8005aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab0:	2f78      	cmp	r7, #120	; 0x78
 8005ab2:	4691      	mov	r9, r2
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005abe:	d807      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ac0:	2f62      	cmp	r7, #98	; 0x62
 8005ac2:	d80a      	bhi.n	8005ada <_printf_i+0x32>
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	f000 80d8 	beq.w	8005c7a <_printf_i+0x1d2>
 8005aca:	2f58      	cmp	r7, #88	; 0x58
 8005acc:	f000 80a3 	beq.w	8005c16 <_printf_i+0x16e>
 8005ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad8:	e03a      	b.n	8005b50 <_printf_i+0xa8>
 8005ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ade:	2b15      	cmp	r3, #21
 8005ae0:	d8f6      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ae2:	a101      	add	r1, pc, #4	; (adr r1, 8005ae8 <_printf_i+0x40>)
 8005ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005ad1 	.word	0x08005ad1
 8005af4:	08005ad1 	.word	0x08005ad1
 8005af8:	08005ad1 	.word	0x08005ad1
 8005afc:	08005ad1 	.word	0x08005ad1
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005ad1 	.word	0x08005ad1
 8005b08:	08005ad1 	.word	0x08005ad1
 8005b0c:	08005ad1 	.word	0x08005ad1
 8005b10:	08005ad1 	.word	0x08005ad1
 8005b14:	08005c61 	.word	0x08005c61
 8005b18:	08005b85 	.word	0x08005b85
 8005b1c:	08005c43 	.word	0x08005c43
 8005b20:	08005ad1 	.word	0x08005ad1
 8005b24:	08005ad1 	.word	0x08005ad1
 8005b28:	08005c83 	.word	0x08005c83
 8005b2c:	08005ad1 	.word	0x08005ad1
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005ad1 	.word	0x08005ad1
 8005b38:	08005ad1 	.word	0x08005ad1
 8005b3c:	08005c4b 	.word	0x08005c4b
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	1d1a      	adds	r2, r3, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	602a      	str	r2, [r5, #0]
 8005b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0a3      	b.n	8005c9c <_printf_i+0x1f4>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	6829      	ldr	r1, [r5, #0]
 8005b58:	0606      	lsls	r6, r0, #24
 8005b5a:	f101 0304 	add.w	r3, r1, #4
 8005b5e:	d50a      	bpl.n	8005b76 <_printf_i+0xce>
 8005b60:	680e      	ldr	r6, [r1, #0]
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	da03      	bge.n	8005b70 <_printf_i+0xc8>
 8005b68:	232d      	movs	r3, #45	; 0x2d
 8005b6a:	4276      	negs	r6, r6
 8005b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b70:	485e      	ldr	r0, [pc, #376]	; (8005cec <_printf_i+0x244>)
 8005b72:	230a      	movs	r3, #10
 8005b74:	e019      	b.n	8005baa <_printf_i+0x102>
 8005b76:	680e      	ldr	r6, [r1, #0]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b7e:	bf18      	it	ne
 8005b80:	b236      	sxthne	r6, r6
 8005b82:	e7ef      	b.n	8005b64 <_printf_i+0xbc>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	6029      	str	r1, [r5, #0]
 8005b8c:	0601      	lsls	r1, r0, #24
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0xec>
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0xf2>
 8005b94:	0646      	lsls	r6, r0, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0xe8>
 8005b98:	881e      	ldrh	r6, [r3, #0]
 8005b9a:	4854      	ldr	r0, [pc, #336]	; (8005cec <_printf_i+0x244>)
 8005b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2308      	moveq	r3, #8
 8005ba2:	230a      	movne	r3, #10
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005baa:	6865      	ldr	r5, [r4, #4]
 8005bac:	60a5      	str	r5, [r4, #8]
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	bfa2      	ittt	ge
 8005bb2:	6821      	ldrge	r1, [r4, #0]
 8005bb4:	f021 0104 	bicge.w	r1, r1, #4
 8005bb8:	6021      	strge	r1, [r4, #0]
 8005bba:	b90e      	cbnz	r6, 8005bc0 <_printf_i+0x118>
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	d04d      	beq.n	8005c5c <_printf_i+0x1b4>
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bca:	5dc7      	ldrb	r7, [r0, r7]
 8005bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd0:	4637      	mov	r7, r6
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	d9f4      	bls.n	8005bc2 <_printf_i+0x11a>
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10b      	bne.n	8005bf4 <_printf_i+0x14c>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07de      	lsls	r6, r3, #31
 8005be0:	d508      	bpl.n	8005bf4 <_printf_i+0x14c>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bfde      	ittt	le
 8005bea:	2330      	movle	r3, #48	; 0x30
 8005bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bf4:	1b52      	subs	r2, r2, r5
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	f8cd a000 	str.w	sl, [sp]
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	aa03      	add	r2, sp, #12
 8005c00:	4621      	mov	r1, r4
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7ff fee2 	bl	80059cc <_printf_common>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d14c      	bne.n	8005ca6 <_printf_i+0x1fe>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	4835      	ldr	r0, [pc, #212]	; (8005cec <_printf_i+0x244>)
 8005c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c24:	6029      	str	r1, [r5, #0]
 8005c26:	061d      	lsls	r5, r3, #24
 8005c28:	d514      	bpl.n	8005c54 <_printf_i+0x1ac>
 8005c2a:	07df      	lsls	r7, r3, #31
 8005c2c:	bf44      	itt	mi
 8005c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c32:	6023      	strmi	r3, [r4, #0]
 8005c34:	b91e      	cbnz	r6, 8005c3e <_printf_i+0x196>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f023 0320 	bic.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	2310      	movs	r3, #16
 8005c40:	e7b0      	b.n	8005ba4 <_printf_i+0xfc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f043 0320 	orr.w	r3, r3, #32
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2378      	movs	r3, #120	; 0x78
 8005c4c:	4828      	ldr	r0, [pc, #160]	; (8005cf0 <_printf_i+0x248>)
 8005c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c52:	e7e3      	b.n	8005c1c <_printf_i+0x174>
 8005c54:	0659      	lsls	r1, r3, #25
 8005c56:	bf48      	it	mi
 8005c58:	b2b6      	uxthmi	r6, r6
 8005c5a:	e7e6      	b.n	8005c2a <_printf_i+0x182>
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	e7bb      	b.n	8005bd8 <_printf_i+0x130>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	6826      	ldr	r6, [r4, #0]
 8005c64:	6961      	ldr	r1, [r4, #20]
 8005c66:	1d18      	adds	r0, r3, #4
 8005c68:	6028      	str	r0, [r5, #0]
 8005c6a:	0635      	lsls	r5, r6, #24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0x1cc>
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0x1d2>
 8005c74:	0670      	lsls	r0, r6, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0x1c8>
 8005c78:	8019      	strh	r1, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	4615      	mov	r5, r2
 8005c80:	e7ba      	b.n	8005bf8 <_printf_i+0x150>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7fa faae 	bl	80001f0 <memchr>
 8005c94:	b108      	cbz	r0, 8005c9a <_printf_i+0x1f2>
 8005c96:	1b40      	subs	r0, r0, r5
 8005c98:	6060      	str	r0, [r4, #4]
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	e7a8      	b.n	8005bf8 <_printf_i+0x150>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4649      	mov	r1, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	47d0      	blx	sl
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0ab      	beq.n	8005c0c <_printf_i+0x164>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d413      	bmi.n	8005ce2 <_printf_i+0x23a>
 8005cba:	68e0      	ldr	r0, [r4, #12]
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bfb8      	it	lt
 8005cc2:	4618      	movlt	r0, r3
 8005cc4:	e7a4      	b.n	8005c10 <_printf_i+0x168>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	47d0      	blx	sl
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d09b      	beq.n	8005c0c <_printf_i+0x164>
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	9903      	ldr	r1, [sp, #12]
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dcf2      	bgt.n	8005cc6 <_printf_i+0x21e>
 8005ce0:	e7eb      	b.n	8005cba <_printf_i+0x212>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	f104 0619 	add.w	r6, r4, #25
 8005ce8:	e7f5      	b.n	8005cd6 <_printf_i+0x22e>
 8005cea:	bf00      	nop
 8005cec:	0800824a 	.word	0x0800824a
 8005cf0:	0800825b 	.word	0x0800825b

08005cf4 <siprintf>:
 8005cf4:	b40e      	push	{r1, r2, r3}
 8005cf6:	b500      	push	{lr}
 8005cf8:	b09c      	sub	sp, #112	; 0x70
 8005cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8005cfc:	9002      	str	r0, [sp, #8]
 8005cfe:	9006      	str	r0, [sp, #24]
 8005d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d04:	4809      	ldr	r0, [pc, #36]	; (8005d2c <siprintf+0x38>)
 8005d06:	9107      	str	r1, [sp, #28]
 8005d08:	9104      	str	r1, [sp, #16]
 8005d0a:	4909      	ldr	r1, [pc, #36]	; (8005d30 <siprintf+0x3c>)
 8005d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d10:	9105      	str	r1, [sp, #20]
 8005d12:	6800      	ldr	r0, [r0, #0]
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	a902      	add	r1, sp, #8
 8005d18:	f001 fb78 	bl	800740c <_svfiprintf_r>
 8005d1c:	9b02      	ldr	r3, [sp, #8]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	b01c      	add	sp, #112	; 0x70
 8005d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d28:	b003      	add	sp, #12
 8005d2a:	4770      	bx	lr
 8005d2c:	2000004c 	.word	0x2000004c
 8005d30:	ffff0208 	.word	0xffff0208

08005d34 <quorem>:
 8005d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	6903      	ldr	r3, [r0, #16]
 8005d3a:	690c      	ldr	r4, [r1, #16]
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	4607      	mov	r7, r0
 8005d40:	f2c0 8081 	blt.w	8005e46 <quorem+0x112>
 8005d44:	3c01      	subs	r4, #1
 8005d46:	f101 0814 	add.w	r8, r1, #20
 8005d4a:	f100 0514 	add.w	r5, r0, #20
 8005d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d6c:	d331      	bcc.n	8005dd2 <quorem+0x9e>
 8005d6e:	f04f 0e00 	mov.w	lr, #0
 8005d72:	4640      	mov	r0, r8
 8005d74:	46ac      	mov	ip, r5
 8005d76:	46f2      	mov	sl, lr
 8005d78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d7c:	b293      	uxth	r3, r2
 8005d7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005d82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ebaa 0303 	sub.w	r3, sl, r3
 8005d8c:	f8dc a000 	ldr.w	sl, [ip]
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	fa13 f38a 	uxtah	r3, r3, sl
 8005d96:	fb06 e202 	mla	r2, r6, r2, lr
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	9b00      	ldr	r3, [sp, #0]
 8005d9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005da2:	b292      	uxth	r2, r2
 8005da4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dac:	f8bd 3000 	ldrh.w	r3, [sp]
 8005db0:	4581      	cmp	r9, r0
 8005db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005db6:	f84c 3b04 	str.w	r3, [ip], #4
 8005dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dbe:	d2db      	bcs.n	8005d78 <quorem+0x44>
 8005dc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005dc4:	b92b      	cbnz	r3, 8005dd2 <quorem+0x9e>
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	d32e      	bcc.n	8005e2e <quorem+0xfa>
 8005dd0:	613c      	str	r4, [r7, #16]
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f001 f8c6 	bl	8006f64 <__mcmp>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	db24      	blt.n	8005e26 <quorem+0xf2>
 8005ddc:	3601      	adds	r6, #1
 8005dde:	4628      	mov	r0, r5
 8005de0:	f04f 0c00 	mov.w	ip, #0
 8005de4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005de8:	f8d0 e000 	ldr.w	lr, [r0]
 8005dec:	b293      	uxth	r3, r2
 8005dee:	ebac 0303 	sub.w	r3, ip, r3
 8005df2:	0c12      	lsrs	r2, r2, #16
 8005df4:	fa13 f38e 	uxtah	r3, r3, lr
 8005df8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e06:	45c1      	cmp	r9, r8
 8005e08:	f840 3b04 	str.w	r3, [r0], #4
 8005e0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e10:	d2e8      	bcs.n	8005de4 <quorem+0xb0>
 8005e12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e1a:	b922      	cbnz	r2, 8005e26 <quorem+0xf2>
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	d30a      	bcc.n	8005e3a <quorem+0x106>
 8005e24:	613c      	str	r4, [r7, #16]
 8005e26:	4630      	mov	r0, r6
 8005e28:	b003      	add	sp, #12
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	3b04      	subs	r3, #4
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	d1cc      	bne.n	8005dd0 <quorem+0x9c>
 8005e36:	3c01      	subs	r4, #1
 8005e38:	e7c7      	b.n	8005dca <quorem+0x96>
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	d1f0      	bne.n	8005e24 <quorem+0xf0>
 8005e42:	3c01      	subs	r4, #1
 8005e44:	e7eb      	b.n	8005e1e <quorem+0xea>
 8005e46:	2000      	movs	r0, #0
 8005e48:	e7ee      	b.n	8005e28 <quorem+0xf4>
 8005e4a:	0000      	movs	r0, r0
 8005e4c:	0000      	movs	r0, r0
	...

08005e50 <_dtoa_r>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	ed2d 8b04 	vpush	{d8-d9}
 8005e58:	ec57 6b10 	vmov	r6, r7, d0
 8005e5c:	b093      	sub	sp, #76	; 0x4c
 8005e5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e64:	9106      	str	r1, [sp, #24]
 8005e66:	ee10 aa10 	vmov	sl, s0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e70:	46bb      	mov	fp, r7
 8005e72:	b975      	cbnz	r5, 8005e92 <_dtoa_r+0x42>
 8005e74:	2010      	movs	r0, #16
 8005e76:	f000 fddd 	bl	8006a34 <malloc>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8005e7e:	b920      	cbnz	r0, 8005e8a <_dtoa_r+0x3a>
 8005e80:	4ba7      	ldr	r3, [pc, #668]	; (8006120 <_dtoa_r+0x2d0>)
 8005e82:	21ea      	movs	r1, #234	; 0xea
 8005e84:	48a7      	ldr	r0, [pc, #668]	; (8006124 <_dtoa_r+0x2d4>)
 8005e86:	f001 fbd1 	bl	800762c <__assert_func>
 8005e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e8e:	6005      	str	r5, [r0, #0]
 8005e90:	60c5      	str	r5, [r0, #12]
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	b151      	cbz	r1, 8005eae <_dtoa_r+0x5e>
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	604a      	str	r2, [r1, #4]
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4093      	lsls	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fe1c 	bl	8006ae0 <_Bfree>
 8005ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	1e3b      	subs	r3, r7, #0
 8005eb0:	bfaa      	itet	ge
 8005eb2:	2300      	movge	r3, #0
 8005eb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005eb8:	f8c8 3000 	strge.w	r3, [r8]
 8005ebc:	4b9a      	ldr	r3, [pc, #616]	; (8006128 <_dtoa_r+0x2d8>)
 8005ebe:	bfbc      	itt	lt
 8005ec0:	2201      	movlt	r2, #1
 8005ec2:	f8c8 2000 	strlt.w	r2, [r8]
 8005ec6:	ea33 030b 	bics.w	r3, r3, fp
 8005eca:	d11b      	bne.n	8005f04 <_dtoa_r+0xb4>
 8005ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ece:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ed8:	4333      	orrs	r3, r6
 8005eda:	f000 8592 	beq.w	8006a02 <_dtoa_r+0xbb2>
 8005ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee0:	b963      	cbnz	r3, 8005efc <_dtoa_r+0xac>
 8005ee2:	4b92      	ldr	r3, [pc, #584]	; (800612c <_dtoa_r+0x2dc>)
 8005ee4:	e022      	b.n	8005f2c <_dtoa_r+0xdc>
 8005ee6:	4b92      	ldr	r3, [pc, #584]	; (8006130 <_dtoa_r+0x2e0>)
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	3308      	adds	r3, #8
 8005eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	9801      	ldr	r0, [sp, #4]
 8005ef2:	b013      	add	sp, #76	; 0x4c
 8005ef4:	ecbd 8b04 	vpop	{d8-d9}
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	4b8b      	ldr	r3, [pc, #556]	; (800612c <_dtoa_r+0x2dc>)
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	3303      	adds	r3, #3
 8005f02:	e7f3      	b.n	8005eec <_dtoa_r+0x9c>
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	f7fa fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f10:	ec4b ab19 	vmov	d9, sl, fp
 8005f14:	4680      	mov	r8, r0
 8005f16:	b158      	cbz	r0, 8005f30 <_dtoa_r+0xe0>
 8005f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 856b 	beq.w	80069fc <_dtoa_r+0xbac>
 8005f26:	4883      	ldr	r0, [pc, #524]	; (8006134 <_dtoa_r+0x2e4>)
 8005f28:	6018      	str	r0, [r3, #0]
 8005f2a:	1e43      	subs	r3, r0, #1
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	e7df      	b.n	8005ef0 <_dtoa_r+0xa0>
 8005f30:	ec4b ab10 	vmov	d0, sl, fp
 8005f34:	aa10      	add	r2, sp, #64	; 0x40
 8005f36:	a911      	add	r1, sp, #68	; 0x44
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f001 f8b9 	bl	80070b0 <__d2b>
 8005f3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f42:	ee08 0a10 	vmov	s16, r0
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	f000 8084 	beq.w	8006054 <_dtoa_r+0x204>
 8005f4c:	ee19 3a90 	vmov	r3, s19
 8005f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f58:	4656      	mov	r6, sl
 8005f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f66:	4b74      	ldr	r3, [pc, #464]	; (8006138 <_dtoa_r+0x2e8>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	f7fa f993 	bl	8000298 <__aeabi_dsub>
 8005f72:	a365      	add	r3, pc, #404	; (adr r3, 8006108 <_dtoa_r+0x2b8>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa fb46 	bl	8000608 <__aeabi_dmul>
 8005f7c:	a364      	add	r3, pc, #400	; (adr r3, 8006110 <_dtoa_r+0x2c0>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f98b 	bl	800029c <__adddf3>
 8005f86:	4606      	mov	r6, r0
 8005f88:	4628      	mov	r0, r5
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	f7fa fad2 	bl	8000534 <__aeabi_i2d>
 8005f90:	a361      	add	r3, pc, #388	; (adr r3, 8006118 <_dtoa_r+0x2c8>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fb37 	bl	8000608 <__aeabi_dmul>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa f97b 	bl	800029c <__adddf3>
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	f7fa fddd 	bl	8000b68 <__aeabi_d2iz>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9000      	str	r0, [sp, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa fd98 	bl	8000aec <__aeabi_dcmplt>
 8005fbc:	b150      	cbz	r0, 8005fd4 <_dtoa_r+0x184>
 8005fbe:	9800      	ldr	r0, [sp, #0]
 8005fc0:	f7fa fab8 	bl	8000534 <__aeabi_i2d>
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f7fa fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fcc:	b910      	cbnz	r0, 8005fd4 <_dtoa_r+0x184>
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	9b00      	ldr	r3, [sp, #0]
 8005fd6:	2b16      	cmp	r3, #22
 8005fd8:	d85a      	bhi.n	8006090 <_dtoa_r+0x240>
 8005fda:	9a00      	ldr	r2, [sp, #0]
 8005fdc:	4b57      	ldr	r3, [pc, #348]	; (800613c <_dtoa_r+0x2ec>)
 8005fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	ec51 0b19 	vmov	r0, r1, d9
 8005fea:	f7fa fd7f 	bl	8000aec <__aeabi_dcmplt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d050      	beq.n	8006094 <_dtoa_r+0x244>
 8005ff2:	9b00      	ldr	r3, [sp, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ffe:	1b5d      	subs	r5, r3, r5
 8006000:	1e6b      	subs	r3, r5, #1
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	bf45      	ittet	mi
 8006006:	f1c5 0301 	rsbmi	r3, r5, #1
 800600a:	9304      	strmi	r3, [sp, #16]
 800600c:	2300      	movpl	r3, #0
 800600e:	2300      	movmi	r3, #0
 8006010:	bf4c      	ite	mi
 8006012:	9305      	strmi	r3, [sp, #20]
 8006014:	9304      	strpl	r3, [sp, #16]
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	db3d      	blt.n	8006098 <_dtoa_r+0x248>
 800601c:	9b05      	ldr	r3, [sp, #20]
 800601e:	9a00      	ldr	r2, [sp, #0]
 8006020:	920a      	str	r2, [sp, #40]	; 0x28
 8006022:	4413      	add	r3, r2
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	2300      	movs	r3, #0
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	2b09      	cmp	r3, #9
 800602e:	f200 8089 	bhi.w	8006144 <_dtoa_r+0x2f4>
 8006032:	2b05      	cmp	r3, #5
 8006034:	bfc4      	itt	gt
 8006036:	3b04      	subgt	r3, #4
 8006038:	9306      	strgt	r3, [sp, #24]
 800603a:	9b06      	ldr	r3, [sp, #24]
 800603c:	f1a3 0302 	sub.w	r3, r3, #2
 8006040:	bfcc      	ite	gt
 8006042:	2500      	movgt	r5, #0
 8006044:	2501      	movle	r5, #1
 8006046:	2b03      	cmp	r3, #3
 8006048:	f200 8087 	bhi.w	800615a <_dtoa_r+0x30a>
 800604c:	e8df f003 	tbb	[pc, r3]
 8006050:	59383a2d 	.word	0x59383a2d
 8006054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006058:	441d      	add	r5, r3
 800605a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800605e:	2b20      	cmp	r3, #32
 8006060:	bfc1      	itttt	gt
 8006062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800606a:	fa0b f303 	lslgt.w	r3, fp, r3
 800606e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006072:	bfda      	itte	le
 8006074:	f1c3 0320 	rsble	r3, r3, #32
 8006078:	fa06 f003 	lslle.w	r0, r6, r3
 800607c:	4318      	orrgt	r0, r3
 800607e:	f7fa fa49 	bl	8000514 <__aeabi_ui2d>
 8006082:	2301      	movs	r3, #1
 8006084:	4606      	mov	r6, r0
 8006086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800608a:	3d01      	subs	r5, #1
 800608c:	930e      	str	r3, [sp, #56]	; 0x38
 800608e:	e76a      	b.n	8005f66 <_dtoa_r+0x116>
 8006090:	2301      	movs	r3, #1
 8006092:	e7b2      	b.n	8005ffa <_dtoa_r+0x1aa>
 8006094:	900b      	str	r0, [sp, #44]	; 0x2c
 8006096:	e7b1      	b.n	8005ffc <_dtoa_r+0x1ac>
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	9a00      	ldr	r2, [sp, #0]
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	4253      	negs	r3, r2
 80060a2:	9307      	str	r3, [sp, #28]
 80060a4:	2300      	movs	r3, #0
 80060a6:	930a      	str	r3, [sp, #40]	; 0x28
 80060a8:	e7bf      	b.n	800602a <_dtoa_r+0x1da>
 80060aa:	2300      	movs	r3, #0
 80060ac:	9308      	str	r3, [sp, #32]
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dc55      	bgt.n	8006160 <_dtoa_r+0x310>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ba:	461a      	mov	r2, r3
 80060bc:	9209      	str	r2, [sp, #36]	; 0x24
 80060be:	e00c      	b.n	80060da <_dtoa_r+0x28a>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7f3      	b.n	80060ac <_dtoa_r+0x25c>
 80060c4:	2300      	movs	r3, #0
 80060c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	4413      	add	r3, r2
 80060ce:	9302      	str	r3, [sp, #8]
 80060d0:	3301      	adds	r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	9303      	str	r3, [sp, #12]
 80060d6:	bfb8      	it	lt
 80060d8:	2301      	movlt	r3, #1
 80060da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80060dc:	2200      	movs	r2, #0
 80060de:	6042      	str	r2, [r0, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	f102 0614 	add.w	r6, r2, #20
 80060e6:	429e      	cmp	r6, r3
 80060e8:	6841      	ldr	r1, [r0, #4]
 80060ea:	d93d      	bls.n	8006168 <_dtoa_r+0x318>
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fcb7 	bl	8006a60 <_Balloc>
 80060f2:	9001      	str	r0, [sp, #4]
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d13b      	bne.n	8006170 <_dtoa_r+0x320>
 80060f8:	4b11      	ldr	r3, [pc, #68]	; (8006140 <_dtoa_r+0x2f0>)
 80060fa:	4602      	mov	r2, r0
 80060fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006100:	e6c0      	b.n	8005e84 <_dtoa_r+0x34>
 8006102:	2301      	movs	r3, #1
 8006104:	e7df      	b.n	80060c6 <_dtoa_r+0x276>
 8006106:	bf00      	nop
 8006108:	636f4361 	.word	0x636f4361
 800610c:	3fd287a7 	.word	0x3fd287a7
 8006110:	8b60c8b3 	.word	0x8b60c8b3
 8006114:	3fc68a28 	.word	0x3fc68a28
 8006118:	509f79fb 	.word	0x509f79fb
 800611c:	3fd34413 	.word	0x3fd34413
 8006120:	08008279 	.word	0x08008279
 8006124:	08008290 	.word	0x08008290
 8006128:	7ff00000 	.word	0x7ff00000
 800612c:	08008275 	.word	0x08008275
 8006130:	0800826c 	.word	0x0800826c
 8006134:	08008249 	.word	0x08008249
 8006138:	3ff80000 	.word	0x3ff80000
 800613c:	08008380 	.word	0x08008380
 8006140:	080082eb 	.word	0x080082eb
 8006144:	2501      	movs	r5, #1
 8006146:	2300      	movs	r3, #0
 8006148:	9306      	str	r3, [sp, #24]
 800614a:	9508      	str	r5, [sp, #32]
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006154:	2200      	movs	r2, #0
 8006156:	2312      	movs	r3, #18
 8006158:	e7b0      	b.n	80060bc <_dtoa_r+0x26c>
 800615a:	2301      	movs	r3, #1
 800615c:	9308      	str	r3, [sp, #32]
 800615e:	e7f5      	b.n	800614c <_dtoa_r+0x2fc>
 8006160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006166:	e7b8      	b.n	80060da <_dtoa_r+0x28a>
 8006168:	3101      	adds	r1, #1
 800616a:	6041      	str	r1, [r0, #4]
 800616c:	0052      	lsls	r2, r2, #1
 800616e:	e7b8      	b.n	80060e2 <_dtoa_r+0x292>
 8006170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006172:	9a01      	ldr	r2, [sp, #4]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	2b0e      	cmp	r3, #14
 800617a:	f200 809d 	bhi.w	80062b8 <_dtoa_r+0x468>
 800617e:	2d00      	cmp	r5, #0
 8006180:	f000 809a 	beq.w	80062b8 <_dtoa_r+0x468>
 8006184:	9b00      	ldr	r3, [sp, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dd32      	ble.n	80061f0 <_dtoa_r+0x3a0>
 800618a:	4ab7      	ldr	r2, [pc, #732]	; (8006468 <_dtoa_r+0x618>)
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006198:	9b00      	ldr	r3, [sp, #0]
 800619a:	05d8      	lsls	r0, r3, #23
 800619c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061a0:	d516      	bpl.n	80061d0 <_dtoa_r+0x380>
 80061a2:	4bb2      	ldr	r3, [pc, #712]	; (800646c <_dtoa_r+0x61c>)
 80061a4:	ec51 0b19 	vmov	r0, r1, d9
 80061a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061ac:	f7fa fb56 	bl	800085c <__aeabi_ddiv>
 80061b0:	f007 070f 	and.w	r7, r7, #15
 80061b4:	4682      	mov	sl, r0
 80061b6:	468b      	mov	fp, r1
 80061b8:	2503      	movs	r5, #3
 80061ba:	4eac      	ldr	r6, [pc, #688]	; (800646c <_dtoa_r+0x61c>)
 80061bc:	b957      	cbnz	r7, 80061d4 <_dtoa_r+0x384>
 80061be:	4642      	mov	r2, r8
 80061c0:	464b      	mov	r3, r9
 80061c2:	4650      	mov	r0, sl
 80061c4:	4659      	mov	r1, fp
 80061c6:	f7fa fb49 	bl	800085c <__aeabi_ddiv>
 80061ca:	4682      	mov	sl, r0
 80061cc:	468b      	mov	fp, r1
 80061ce:	e028      	b.n	8006222 <_dtoa_r+0x3d2>
 80061d0:	2502      	movs	r5, #2
 80061d2:	e7f2      	b.n	80061ba <_dtoa_r+0x36a>
 80061d4:	07f9      	lsls	r1, r7, #31
 80061d6:	d508      	bpl.n	80061ea <_dtoa_r+0x39a>
 80061d8:	4640      	mov	r0, r8
 80061da:	4649      	mov	r1, r9
 80061dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	3501      	adds	r5, #1
 80061e6:	4680      	mov	r8, r0
 80061e8:	4689      	mov	r9, r1
 80061ea:	107f      	asrs	r7, r7, #1
 80061ec:	3608      	adds	r6, #8
 80061ee:	e7e5      	b.n	80061bc <_dtoa_r+0x36c>
 80061f0:	f000 809b 	beq.w	800632a <_dtoa_r+0x4da>
 80061f4:	9b00      	ldr	r3, [sp, #0]
 80061f6:	4f9d      	ldr	r7, [pc, #628]	; (800646c <_dtoa_r+0x61c>)
 80061f8:	425e      	negs	r6, r3
 80061fa:	4b9b      	ldr	r3, [pc, #620]	; (8006468 <_dtoa_r+0x618>)
 80061fc:	f006 020f 	and.w	r2, r6, #15
 8006200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	ec51 0b19 	vmov	r0, r1, d9
 800620c:	f7fa f9fc 	bl	8000608 <__aeabi_dmul>
 8006210:	1136      	asrs	r6, r6, #4
 8006212:	4682      	mov	sl, r0
 8006214:	468b      	mov	fp, r1
 8006216:	2300      	movs	r3, #0
 8006218:	2502      	movs	r5, #2
 800621a:	2e00      	cmp	r6, #0
 800621c:	d17a      	bne.n	8006314 <_dtoa_r+0x4c4>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1d3      	bne.n	80061ca <_dtoa_r+0x37a>
 8006222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8082 	beq.w	800632e <_dtoa_r+0x4de>
 800622a:	4b91      	ldr	r3, [pc, #580]	; (8006470 <_dtoa_r+0x620>)
 800622c:	2200      	movs	r2, #0
 800622e:	4650      	mov	r0, sl
 8006230:	4659      	mov	r1, fp
 8006232:	f7fa fc5b 	bl	8000aec <__aeabi_dcmplt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d079      	beq.n	800632e <_dtoa_r+0x4de>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d076      	beq.n	800632e <_dtoa_r+0x4de>
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd36      	ble.n	80062b4 <_dtoa_r+0x464>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	4650      	mov	r0, sl
 800624a:	4659      	mov	r1, fp
 800624c:	1e5f      	subs	r7, r3, #1
 800624e:	2200      	movs	r2, #0
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <_dtoa_r+0x624>)
 8006252:	f7fa f9d9 	bl	8000608 <__aeabi_dmul>
 8006256:	9e02      	ldr	r6, [sp, #8]
 8006258:	4682      	mov	sl, r0
 800625a:	468b      	mov	fp, r1
 800625c:	3501      	adds	r5, #1
 800625e:	4628      	mov	r0, r5
 8006260:	f7fa f968 	bl	8000534 <__aeabi_i2d>
 8006264:	4652      	mov	r2, sl
 8006266:	465b      	mov	r3, fp
 8006268:	f7fa f9ce 	bl	8000608 <__aeabi_dmul>
 800626c:	4b82      	ldr	r3, [pc, #520]	; (8006478 <_dtoa_r+0x628>)
 800626e:	2200      	movs	r2, #0
 8006270:	f7fa f814 	bl	800029c <__adddf3>
 8006274:	46d0      	mov	r8, sl
 8006276:	46d9      	mov	r9, fp
 8006278:	4682      	mov	sl, r0
 800627a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800627e:	2e00      	cmp	r6, #0
 8006280:	d158      	bne.n	8006334 <_dtoa_r+0x4e4>
 8006282:	4b7e      	ldr	r3, [pc, #504]	; (800647c <_dtoa_r+0x62c>)
 8006284:	2200      	movs	r2, #0
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7fa f805 	bl	8000298 <__aeabi_dsub>
 800628e:	4652      	mov	r2, sl
 8006290:	465b      	mov	r3, fp
 8006292:	4680      	mov	r8, r0
 8006294:	4689      	mov	r9, r1
 8006296:	f7fa fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 8295 	bne.w	80067ca <_dtoa_r+0x97a>
 80062a0:	4652      	mov	r2, sl
 80062a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062a6:	4640      	mov	r0, r8
 80062a8:	4649      	mov	r1, r9
 80062aa:	f7fa fc1f 	bl	8000aec <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f040 8289 	bne.w	80067c6 <_dtoa_r+0x976>
 80062b4:	ec5b ab19 	vmov	sl, fp, d9
 80062b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f2c0 8148 	blt.w	8006550 <_dtoa_r+0x700>
 80062c0:	9a00      	ldr	r2, [sp, #0]
 80062c2:	2a0e      	cmp	r2, #14
 80062c4:	f300 8144 	bgt.w	8006550 <_dtoa_r+0x700>
 80062c8:	4b67      	ldr	r3, [pc, #412]	; (8006468 <_dtoa_r+0x618>)
 80062ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f280 80d5 	bge.w	8006484 <_dtoa_r+0x634>
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f300 80d1 	bgt.w	8006484 <_dtoa_r+0x634>
 80062e2:	f040 826f 	bne.w	80067c4 <_dtoa_r+0x974>
 80062e6:	4b65      	ldr	r3, [pc, #404]	; (800647c <_dtoa_r+0x62c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7fa f98b 	bl	8000608 <__aeabi_dmul>
 80062f2:	4652      	mov	r2, sl
 80062f4:	465b      	mov	r3, fp
 80062f6:	f7fa fc0d 	bl	8000b14 <__aeabi_dcmpge>
 80062fa:	9e03      	ldr	r6, [sp, #12]
 80062fc:	4637      	mov	r7, r6
 80062fe:	2800      	cmp	r0, #0
 8006300:	f040 8245 	bne.w	800678e <_dtoa_r+0x93e>
 8006304:	9d01      	ldr	r5, [sp, #4]
 8006306:	2331      	movs	r3, #49	; 0x31
 8006308:	f805 3b01 	strb.w	r3, [r5], #1
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	e240      	b.n	8006796 <_dtoa_r+0x946>
 8006314:	07f2      	lsls	r2, r6, #31
 8006316:	d505      	bpl.n	8006324 <_dtoa_r+0x4d4>
 8006318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	3501      	adds	r5, #1
 8006322:	2301      	movs	r3, #1
 8006324:	1076      	asrs	r6, r6, #1
 8006326:	3708      	adds	r7, #8
 8006328:	e777      	b.n	800621a <_dtoa_r+0x3ca>
 800632a:	2502      	movs	r5, #2
 800632c:	e779      	b.n	8006222 <_dtoa_r+0x3d2>
 800632e:	9f00      	ldr	r7, [sp, #0]
 8006330:	9e03      	ldr	r6, [sp, #12]
 8006332:	e794      	b.n	800625e <_dtoa_r+0x40e>
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	4b4c      	ldr	r3, [pc, #304]	; (8006468 <_dtoa_r+0x618>)
 8006338:	4431      	add	r1, r6
 800633a:	910d      	str	r1, [sp, #52]	; 0x34
 800633c:	9908      	ldr	r1, [sp, #32]
 800633e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006346:	2900      	cmp	r1, #0
 8006348:	d043      	beq.n	80063d2 <_dtoa_r+0x582>
 800634a:	494d      	ldr	r1, [pc, #308]	; (8006480 <_dtoa_r+0x630>)
 800634c:	2000      	movs	r0, #0
 800634e:	f7fa fa85 	bl	800085c <__aeabi_ddiv>
 8006352:	4652      	mov	r2, sl
 8006354:	465b      	mov	r3, fp
 8006356:	f7f9 ff9f 	bl	8000298 <__aeabi_dsub>
 800635a:	9d01      	ldr	r5, [sp, #4]
 800635c:	4682      	mov	sl, r0
 800635e:	468b      	mov	fp, r1
 8006360:	4649      	mov	r1, r9
 8006362:	4640      	mov	r0, r8
 8006364:	f7fa fc00 	bl	8000b68 <__aeabi_d2iz>
 8006368:	4606      	mov	r6, r0
 800636a:	f7fa f8e3 	bl	8000534 <__aeabi_i2d>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4640      	mov	r0, r8
 8006374:	4649      	mov	r1, r9
 8006376:	f7f9 ff8f 	bl	8000298 <__aeabi_dsub>
 800637a:	3630      	adds	r6, #48	; 0x30
 800637c:	f805 6b01 	strb.w	r6, [r5], #1
 8006380:	4652      	mov	r2, sl
 8006382:	465b      	mov	r3, fp
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	f7fa fbb0 	bl	8000aec <__aeabi_dcmplt>
 800638c:	2800      	cmp	r0, #0
 800638e:	d163      	bne.n	8006458 <_dtoa_r+0x608>
 8006390:	4642      	mov	r2, r8
 8006392:	464b      	mov	r3, r9
 8006394:	4936      	ldr	r1, [pc, #216]	; (8006470 <_dtoa_r+0x620>)
 8006396:	2000      	movs	r0, #0
 8006398:	f7f9 ff7e 	bl	8000298 <__aeabi_dsub>
 800639c:	4652      	mov	r2, sl
 800639e:	465b      	mov	r3, fp
 80063a0:	f7fa fba4 	bl	8000aec <__aeabi_dcmplt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 80b5 	bne.w	8006514 <_dtoa_r+0x6c4>
 80063aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ac:	429d      	cmp	r5, r3
 80063ae:	d081      	beq.n	80062b4 <_dtoa_r+0x464>
 80063b0:	4b30      	ldr	r3, [pc, #192]	; (8006474 <_dtoa_r+0x624>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	4650      	mov	r0, sl
 80063b6:	4659      	mov	r1, fp
 80063b8:	f7fa f926 	bl	8000608 <__aeabi_dmul>
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <_dtoa_r+0x624>)
 80063be:	4682      	mov	sl, r0
 80063c0:	468b      	mov	fp, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	2200      	movs	r2, #0
 80063c8:	f7fa f91e 	bl	8000608 <__aeabi_dmul>
 80063cc:	4680      	mov	r8, r0
 80063ce:	4689      	mov	r9, r1
 80063d0:	e7c6      	b.n	8006360 <_dtoa_r+0x510>
 80063d2:	4650      	mov	r0, sl
 80063d4:	4659      	mov	r1, fp
 80063d6:	f7fa f917 	bl	8000608 <__aeabi_dmul>
 80063da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063dc:	9d01      	ldr	r5, [sp, #4]
 80063de:	930f      	str	r3, [sp, #60]	; 0x3c
 80063e0:	4682      	mov	sl, r0
 80063e2:	468b      	mov	fp, r1
 80063e4:	4649      	mov	r1, r9
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7fa fbbe 	bl	8000b68 <__aeabi_d2iz>
 80063ec:	4606      	mov	r6, r0
 80063ee:	f7fa f8a1 	bl	8000534 <__aeabi_i2d>
 80063f2:	3630      	adds	r6, #48	; 0x30
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7f9 ff4c 	bl	8000298 <__aeabi_dsub>
 8006400:	f805 6b01 	strb.w	r6, [r5], #1
 8006404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006406:	429d      	cmp	r5, r3
 8006408:	4680      	mov	r8, r0
 800640a:	4689      	mov	r9, r1
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	d124      	bne.n	800645c <_dtoa_r+0x60c>
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <_dtoa_r+0x630>)
 8006414:	4650      	mov	r0, sl
 8006416:	4659      	mov	r1, fp
 8006418:	f7f9 ff40 	bl	800029c <__adddf3>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4640      	mov	r0, r8
 8006422:	4649      	mov	r1, r9
 8006424:	f7fa fb80 	bl	8000b28 <__aeabi_dcmpgt>
 8006428:	2800      	cmp	r0, #0
 800642a:	d173      	bne.n	8006514 <_dtoa_r+0x6c4>
 800642c:	4652      	mov	r2, sl
 800642e:	465b      	mov	r3, fp
 8006430:	4913      	ldr	r1, [pc, #76]	; (8006480 <_dtoa_r+0x630>)
 8006432:	2000      	movs	r0, #0
 8006434:	f7f9 ff30 	bl	8000298 <__aeabi_dsub>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4640      	mov	r0, r8
 800643e:	4649      	mov	r1, r9
 8006440:	f7fa fb54 	bl	8000aec <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	f43f af35 	beq.w	80062b4 <_dtoa_r+0x464>
 800644a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800644c:	1e6b      	subs	r3, r5, #1
 800644e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006454:	2b30      	cmp	r3, #48	; 0x30
 8006456:	d0f8      	beq.n	800644a <_dtoa_r+0x5fa>
 8006458:	9700      	str	r7, [sp, #0]
 800645a:	e049      	b.n	80064f0 <_dtoa_r+0x6a0>
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <_dtoa_r+0x624>)
 800645e:	f7fa f8d3 	bl	8000608 <__aeabi_dmul>
 8006462:	4680      	mov	r8, r0
 8006464:	4689      	mov	r9, r1
 8006466:	e7bd      	b.n	80063e4 <_dtoa_r+0x594>
 8006468:	08008380 	.word	0x08008380
 800646c:	08008358 	.word	0x08008358
 8006470:	3ff00000 	.word	0x3ff00000
 8006474:	40240000 	.word	0x40240000
 8006478:	401c0000 	.word	0x401c0000
 800647c:	40140000 	.word	0x40140000
 8006480:	3fe00000 	.word	0x3fe00000
 8006484:	9d01      	ldr	r5, [sp, #4]
 8006486:	4656      	mov	r6, sl
 8006488:	465f      	mov	r7, fp
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	4630      	mov	r0, r6
 8006490:	4639      	mov	r1, r7
 8006492:	f7fa f9e3 	bl	800085c <__aeabi_ddiv>
 8006496:	f7fa fb67 	bl	8000b68 <__aeabi_d2iz>
 800649a:	4682      	mov	sl, r0
 800649c:	f7fa f84a 	bl	8000534 <__aeabi_i2d>
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	f7fa f8b0 	bl	8000608 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064b4:	f7f9 fef0 	bl	8000298 <__aeabi_dsub>
 80064b8:	f805 6b01 	strb.w	r6, [r5], #1
 80064bc:	9e01      	ldr	r6, [sp, #4]
 80064be:	9f03      	ldr	r7, [sp, #12]
 80064c0:	1bae      	subs	r6, r5, r6
 80064c2:	42b7      	cmp	r7, r6
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	d135      	bne.n	8006536 <_dtoa_r+0x6e6>
 80064ca:	f7f9 fee7 	bl	800029c <__adddf3>
 80064ce:	4642      	mov	r2, r8
 80064d0:	464b      	mov	r3, r9
 80064d2:	4606      	mov	r6, r0
 80064d4:	460f      	mov	r7, r1
 80064d6:	f7fa fb27 	bl	8000b28 <__aeabi_dcmpgt>
 80064da:	b9d0      	cbnz	r0, 8006512 <_dtoa_r+0x6c2>
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	4630      	mov	r0, r6
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7fa faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e8:	b110      	cbz	r0, 80064f0 <_dtoa_r+0x6a0>
 80064ea:	f01a 0f01 	tst.w	sl, #1
 80064ee:	d110      	bne.n	8006512 <_dtoa_r+0x6c2>
 80064f0:	4620      	mov	r0, r4
 80064f2:	ee18 1a10 	vmov	r1, s16
 80064f6:	f000 faf3 	bl	8006ae0 <_Bfree>
 80064fa:	2300      	movs	r3, #0
 80064fc:	9800      	ldr	r0, [sp, #0]
 80064fe:	702b      	strb	r3, [r5, #0]
 8006500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006502:	3001      	adds	r0, #1
 8006504:	6018      	str	r0, [r3, #0]
 8006506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006508:	2b00      	cmp	r3, #0
 800650a:	f43f acf1 	beq.w	8005ef0 <_dtoa_r+0xa0>
 800650e:	601d      	str	r5, [r3, #0]
 8006510:	e4ee      	b.n	8005ef0 <_dtoa_r+0xa0>
 8006512:	9f00      	ldr	r7, [sp, #0]
 8006514:	462b      	mov	r3, r5
 8006516:	461d      	mov	r5, r3
 8006518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800651c:	2a39      	cmp	r2, #57	; 0x39
 800651e:	d106      	bne.n	800652e <_dtoa_r+0x6de>
 8006520:	9a01      	ldr	r2, [sp, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d1f7      	bne.n	8006516 <_dtoa_r+0x6c6>
 8006526:	9901      	ldr	r1, [sp, #4]
 8006528:	2230      	movs	r2, #48	; 0x30
 800652a:	3701      	adds	r7, #1
 800652c:	700a      	strb	r2, [r1, #0]
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	3201      	adds	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	e790      	b.n	8006458 <_dtoa_r+0x608>
 8006536:	4ba6      	ldr	r3, [pc, #664]	; (80067d0 <_dtoa_r+0x980>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7fa f865 	bl	8000608 <__aeabi_dmul>
 800653e:	2200      	movs	r2, #0
 8006540:	2300      	movs	r3, #0
 8006542:	4606      	mov	r6, r0
 8006544:	460f      	mov	r7, r1
 8006546:	f7fa fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800654a:	2800      	cmp	r0, #0
 800654c:	d09d      	beq.n	800648a <_dtoa_r+0x63a>
 800654e:	e7cf      	b.n	80064f0 <_dtoa_r+0x6a0>
 8006550:	9a08      	ldr	r2, [sp, #32]
 8006552:	2a00      	cmp	r2, #0
 8006554:	f000 80d7 	beq.w	8006706 <_dtoa_r+0x8b6>
 8006558:	9a06      	ldr	r2, [sp, #24]
 800655a:	2a01      	cmp	r2, #1
 800655c:	f300 80ba 	bgt.w	80066d4 <_dtoa_r+0x884>
 8006560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006562:	2a00      	cmp	r2, #0
 8006564:	f000 80b2 	beq.w	80066cc <_dtoa_r+0x87c>
 8006568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800656c:	9e07      	ldr	r6, [sp, #28]
 800656e:	9d04      	ldr	r5, [sp, #16]
 8006570:	9a04      	ldr	r2, [sp, #16]
 8006572:	441a      	add	r2, r3
 8006574:	9204      	str	r2, [sp, #16]
 8006576:	9a05      	ldr	r2, [sp, #20]
 8006578:	2101      	movs	r1, #1
 800657a:	441a      	add	r2, r3
 800657c:	4620      	mov	r0, r4
 800657e:	9205      	str	r2, [sp, #20]
 8006580:	f000 fb66 	bl	8006c50 <__i2b>
 8006584:	4607      	mov	r7, r0
 8006586:	2d00      	cmp	r5, #0
 8006588:	dd0c      	ble.n	80065a4 <_dtoa_r+0x754>
 800658a:	9b05      	ldr	r3, [sp, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	dd09      	ble.n	80065a4 <_dtoa_r+0x754>
 8006590:	42ab      	cmp	r3, r5
 8006592:	9a04      	ldr	r2, [sp, #16]
 8006594:	bfa8      	it	ge
 8006596:	462b      	movge	r3, r5
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	9204      	str	r2, [sp, #16]
 800659c:	9a05      	ldr	r2, [sp, #20]
 800659e:	1aed      	subs	r5, r5, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	9b07      	ldr	r3, [sp, #28]
 80065a6:	b31b      	cbz	r3, 80065f0 <_dtoa_r+0x7a0>
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80af 	beq.w	800670e <_dtoa_r+0x8be>
 80065b0:	2e00      	cmp	r6, #0
 80065b2:	dd13      	ble.n	80065dc <_dtoa_r+0x78c>
 80065b4:	4639      	mov	r1, r7
 80065b6:	4632      	mov	r2, r6
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fc09 	bl	8006dd0 <__pow5mult>
 80065be:	ee18 2a10 	vmov	r2, s16
 80065c2:	4601      	mov	r1, r0
 80065c4:	4607      	mov	r7, r0
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fb58 	bl	8006c7c <__multiply>
 80065cc:	ee18 1a10 	vmov	r1, s16
 80065d0:	4680      	mov	r8, r0
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 fa84 	bl	8006ae0 <_Bfree>
 80065d8:	ee08 8a10 	vmov	s16, r8
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	1b9a      	subs	r2, r3, r6
 80065e0:	d006      	beq.n	80065f0 <_dtoa_r+0x7a0>
 80065e2:	ee18 1a10 	vmov	r1, s16
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 fbf2 	bl	8006dd0 <__pow5mult>
 80065ec:	ee08 0a10 	vmov	s16, r0
 80065f0:	2101      	movs	r1, #1
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fb2c 	bl	8006c50 <__i2b>
 80065f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	4606      	mov	r6, r0
 80065fe:	f340 8088 	ble.w	8006712 <_dtoa_r+0x8c2>
 8006602:	461a      	mov	r2, r3
 8006604:	4601      	mov	r1, r0
 8006606:	4620      	mov	r0, r4
 8006608:	f000 fbe2 	bl	8006dd0 <__pow5mult>
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	2b01      	cmp	r3, #1
 8006610:	4606      	mov	r6, r0
 8006612:	f340 8081 	ble.w	8006718 <_dtoa_r+0x8c8>
 8006616:	f04f 0800 	mov.w	r8, #0
 800661a:	6933      	ldr	r3, [r6, #16]
 800661c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006620:	6918      	ldr	r0, [r3, #16]
 8006622:	f000 fac5 	bl	8006bb0 <__hi0bits>
 8006626:	f1c0 0020 	rsb	r0, r0, #32
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	4418      	add	r0, r3
 800662e:	f010 001f 	ands.w	r0, r0, #31
 8006632:	f000 8092 	beq.w	800675a <_dtoa_r+0x90a>
 8006636:	f1c0 0320 	rsb	r3, r0, #32
 800663a:	2b04      	cmp	r3, #4
 800663c:	f340 808a 	ble.w	8006754 <_dtoa_r+0x904>
 8006640:	f1c0 001c 	rsb	r0, r0, #28
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	4403      	add	r3, r0
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	9b05      	ldr	r3, [sp, #20]
 800664c:	4403      	add	r3, r0
 800664e:	4405      	add	r5, r0
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd07      	ble.n	8006668 <_dtoa_r+0x818>
 8006658:	ee18 1a10 	vmov	r1, s16
 800665c:	461a      	mov	r2, r3
 800665e:	4620      	mov	r0, r4
 8006660:	f000 fc10 	bl	8006e84 <__lshift>
 8006664:	ee08 0a10 	vmov	s16, r0
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd05      	ble.n	800667a <_dtoa_r+0x82a>
 800666e:	4631      	mov	r1, r6
 8006670:	461a      	mov	r2, r3
 8006672:	4620      	mov	r0, r4
 8006674:	f000 fc06 	bl	8006e84 <__lshift>
 8006678:	4606      	mov	r6, r0
 800667a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d06e      	beq.n	800675e <_dtoa_r+0x90e>
 8006680:	ee18 0a10 	vmov	r0, s16
 8006684:	4631      	mov	r1, r6
 8006686:	f000 fc6d 	bl	8006f64 <__mcmp>
 800668a:	2800      	cmp	r0, #0
 800668c:	da67      	bge.n	800675e <_dtoa_r+0x90e>
 800668e:	9b00      	ldr	r3, [sp, #0]
 8006690:	3b01      	subs	r3, #1
 8006692:	ee18 1a10 	vmov	r1, s16
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	220a      	movs	r2, #10
 800669a:	2300      	movs	r3, #0
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fa41 	bl	8006b24 <__multadd>
 80066a2:	9b08      	ldr	r3, [sp, #32]
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 81b1 	beq.w	8006a10 <_dtoa_r+0xbc0>
 80066ae:	2300      	movs	r3, #0
 80066b0:	4639      	mov	r1, r7
 80066b2:	220a      	movs	r2, #10
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 fa35 	bl	8006b24 <__multadd>
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	4607      	mov	r7, r0
 80066c0:	f300 808e 	bgt.w	80067e0 <_dtoa_r+0x990>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	dc51      	bgt.n	800676e <_dtoa_r+0x91e>
 80066ca:	e089      	b.n	80067e0 <_dtoa_r+0x990>
 80066cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066d2:	e74b      	b.n	800656c <_dtoa_r+0x71c>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	1e5e      	subs	r6, r3, #1
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	42b3      	cmp	r3, r6
 80066dc:	bfbf      	itttt	lt
 80066de:	9b07      	ldrlt	r3, [sp, #28]
 80066e0:	9607      	strlt	r6, [sp, #28]
 80066e2:	1af2      	sublt	r2, r6, r3
 80066e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80066e6:	bfb6      	itet	lt
 80066e8:	189b      	addlt	r3, r3, r2
 80066ea:	1b9e      	subge	r6, r3, r6
 80066ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	bfb8      	it	lt
 80066f2:	2600      	movlt	r6, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfb7      	itett	lt
 80066f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80066fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006700:	1a9d      	sublt	r5, r3, r2
 8006702:	2300      	movlt	r3, #0
 8006704:	e734      	b.n	8006570 <_dtoa_r+0x720>
 8006706:	9e07      	ldr	r6, [sp, #28]
 8006708:	9d04      	ldr	r5, [sp, #16]
 800670a:	9f08      	ldr	r7, [sp, #32]
 800670c:	e73b      	b.n	8006586 <_dtoa_r+0x736>
 800670e:	9a07      	ldr	r2, [sp, #28]
 8006710:	e767      	b.n	80065e2 <_dtoa_r+0x792>
 8006712:	9b06      	ldr	r3, [sp, #24]
 8006714:	2b01      	cmp	r3, #1
 8006716:	dc18      	bgt.n	800674a <_dtoa_r+0x8fa>
 8006718:	f1ba 0f00 	cmp.w	sl, #0
 800671c:	d115      	bne.n	800674a <_dtoa_r+0x8fa>
 800671e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006722:	b993      	cbnz	r3, 800674a <_dtoa_r+0x8fa>
 8006724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006728:	0d1b      	lsrs	r3, r3, #20
 800672a:	051b      	lsls	r3, r3, #20
 800672c:	b183      	cbz	r3, 8006750 <_dtoa_r+0x900>
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	3301      	adds	r3, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	3301      	adds	r3, #1
 8006738:	9305      	str	r3, [sp, #20]
 800673a:	f04f 0801 	mov.w	r8, #1
 800673e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006740:	2b00      	cmp	r3, #0
 8006742:	f47f af6a 	bne.w	800661a <_dtoa_r+0x7ca>
 8006746:	2001      	movs	r0, #1
 8006748:	e76f      	b.n	800662a <_dtoa_r+0x7da>
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	e7f6      	b.n	800673e <_dtoa_r+0x8ee>
 8006750:	4698      	mov	r8, r3
 8006752:	e7f4      	b.n	800673e <_dtoa_r+0x8ee>
 8006754:	f43f af7d 	beq.w	8006652 <_dtoa_r+0x802>
 8006758:	4618      	mov	r0, r3
 800675a:	301c      	adds	r0, #28
 800675c:	e772      	b.n	8006644 <_dtoa_r+0x7f4>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc37      	bgt.n	80067d4 <_dtoa_r+0x984>
 8006764:	9b06      	ldr	r3, [sp, #24]
 8006766:	2b02      	cmp	r3, #2
 8006768:	dd34      	ble.n	80067d4 <_dtoa_r+0x984>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	b96b      	cbnz	r3, 800678e <_dtoa_r+0x93e>
 8006772:	4631      	mov	r1, r6
 8006774:	2205      	movs	r2, #5
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f9d4 	bl	8006b24 <__multadd>
 800677c:	4601      	mov	r1, r0
 800677e:	4606      	mov	r6, r0
 8006780:	ee18 0a10 	vmov	r0, s16
 8006784:	f000 fbee 	bl	8006f64 <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	f73f adbb 	bgt.w	8006304 <_dtoa_r+0x4b4>
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	9d01      	ldr	r5, [sp, #4]
 8006792:	43db      	mvns	r3, r3
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	4631      	mov	r1, r6
 800679c:	4620      	mov	r0, r4
 800679e:	f000 f99f 	bl	8006ae0 <_Bfree>
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	f43f aea4 	beq.w	80064f0 <_dtoa_r+0x6a0>
 80067a8:	f1b8 0f00 	cmp.w	r8, #0
 80067ac:	d005      	beq.n	80067ba <_dtoa_r+0x96a>
 80067ae:	45b8      	cmp	r8, r7
 80067b0:	d003      	beq.n	80067ba <_dtoa_r+0x96a>
 80067b2:	4641      	mov	r1, r8
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 f993 	bl	8006ae0 <_Bfree>
 80067ba:	4639      	mov	r1, r7
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 f98f 	bl	8006ae0 <_Bfree>
 80067c2:	e695      	b.n	80064f0 <_dtoa_r+0x6a0>
 80067c4:	2600      	movs	r6, #0
 80067c6:	4637      	mov	r7, r6
 80067c8:	e7e1      	b.n	800678e <_dtoa_r+0x93e>
 80067ca:	9700      	str	r7, [sp, #0]
 80067cc:	4637      	mov	r7, r6
 80067ce:	e599      	b.n	8006304 <_dtoa_r+0x4b4>
 80067d0:	40240000 	.word	0x40240000
 80067d4:	9b08      	ldr	r3, [sp, #32]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80ca 	beq.w	8006970 <_dtoa_r+0xb20>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	9302      	str	r3, [sp, #8]
 80067e0:	2d00      	cmp	r5, #0
 80067e2:	dd05      	ble.n	80067f0 <_dtoa_r+0x9a0>
 80067e4:	4639      	mov	r1, r7
 80067e6:	462a      	mov	r2, r5
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fb4b 	bl	8006e84 <__lshift>
 80067ee:	4607      	mov	r7, r0
 80067f0:	f1b8 0f00 	cmp.w	r8, #0
 80067f4:	d05b      	beq.n	80068ae <_dtoa_r+0xa5e>
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 f931 	bl	8006a60 <_Balloc>
 80067fe:	4605      	mov	r5, r0
 8006800:	b928      	cbnz	r0, 800680e <_dtoa_r+0x9be>
 8006802:	4b87      	ldr	r3, [pc, #540]	; (8006a20 <_dtoa_r+0xbd0>)
 8006804:	4602      	mov	r2, r0
 8006806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800680a:	f7ff bb3b 	b.w	8005e84 <_dtoa_r+0x34>
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	3202      	adds	r2, #2
 8006812:	0092      	lsls	r2, r2, #2
 8006814:	f107 010c 	add.w	r1, r7, #12
 8006818:	300c      	adds	r0, #12
 800681a:	f000 f913 	bl	8006a44 <memcpy>
 800681e:	2201      	movs	r2, #1
 8006820:	4629      	mov	r1, r5
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fb2e 	bl	8006e84 <__lshift>
 8006828:	9b01      	ldr	r3, [sp, #4]
 800682a:	f103 0901 	add.w	r9, r3, #1
 800682e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006832:	4413      	add	r3, r2
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	f00a 0301 	and.w	r3, sl, #1
 800683a:	46b8      	mov	r8, r7
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	4607      	mov	r7, r0
 8006840:	4631      	mov	r1, r6
 8006842:	ee18 0a10 	vmov	r0, s16
 8006846:	f7ff fa75 	bl	8005d34 <quorem>
 800684a:	4641      	mov	r1, r8
 800684c:	9002      	str	r0, [sp, #8]
 800684e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006852:	ee18 0a10 	vmov	r0, s16
 8006856:	f000 fb85 	bl	8006f64 <__mcmp>
 800685a:	463a      	mov	r2, r7
 800685c:	9003      	str	r0, [sp, #12]
 800685e:	4631      	mov	r1, r6
 8006860:	4620      	mov	r0, r4
 8006862:	f000 fb9b 	bl	8006f9c <__mdiff>
 8006866:	68c2      	ldr	r2, [r0, #12]
 8006868:	f109 3bff 	add.w	fp, r9, #4294967295
 800686c:	4605      	mov	r5, r0
 800686e:	bb02      	cbnz	r2, 80068b2 <_dtoa_r+0xa62>
 8006870:	4601      	mov	r1, r0
 8006872:	ee18 0a10 	vmov	r0, s16
 8006876:	f000 fb75 	bl	8006f64 <__mcmp>
 800687a:	4602      	mov	r2, r0
 800687c:	4629      	mov	r1, r5
 800687e:	4620      	mov	r0, r4
 8006880:	9207      	str	r2, [sp, #28]
 8006882:	f000 f92d 	bl	8006ae0 <_Bfree>
 8006886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800688a:	ea43 0102 	orr.w	r1, r3, r2
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	430b      	orrs	r3, r1
 8006892:	464d      	mov	r5, r9
 8006894:	d10f      	bne.n	80068b6 <_dtoa_r+0xa66>
 8006896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800689a:	d02a      	beq.n	80068f2 <_dtoa_r+0xaa2>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dd02      	ble.n	80068a8 <_dtoa_r+0xa58>
 80068a2:	9b02      	ldr	r3, [sp, #8]
 80068a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068a8:	f88b a000 	strb.w	sl, [fp]
 80068ac:	e775      	b.n	800679a <_dtoa_r+0x94a>
 80068ae:	4638      	mov	r0, r7
 80068b0:	e7ba      	b.n	8006828 <_dtoa_r+0x9d8>
 80068b2:	2201      	movs	r2, #1
 80068b4:	e7e2      	b.n	800687c <_dtoa_r+0xa2c>
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	db04      	blt.n	80068c6 <_dtoa_r+0xa76>
 80068bc:	9906      	ldr	r1, [sp, #24]
 80068be:	430b      	orrs	r3, r1
 80068c0:	9904      	ldr	r1, [sp, #16]
 80068c2:	430b      	orrs	r3, r1
 80068c4:	d122      	bne.n	800690c <_dtoa_r+0xabc>
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	ddee      	ble.n	80068a8 <_dtoa_r+0xa58>
 80068ca:	ee18 1a10 	vmov	r1, s16
 80068ce:	2201      	movs	r2, #1
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fad7 	bl	8006e84 <__lshift>
 80068d6:	4631      	mov	r1, r6
 80068d8:	ee08 0a10 	vmov	s16, r0
 80068dc:	f000 fb42 	bl	8006f64 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	dc03      	bgt.n	80068ec <_dtoa_r+0xa9c>
 80068e4:	d1e0      	bne.n	80068a8 <_dtoa_r+0xa58>
 80068e6:	f01a 0f01 	tst.w	sl, #1
 80068ea:	d0dd      	beq.n	80068a8 <_dtoa_r+0xa58>
 80068ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068f0:	d1d7      	bne.n	80068a2 <_dtoa_r+0xa52>
 80068f2:	2339      	movs	r3, #57	; 0x39
 80068f4:	f88b 3000 	strb.w	r3, [fp]
 80068f8:	462b      	mov	r3, r5
 80068fa:	461d      	mov	r5, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006902:	2a39      	cmp	r2, #57	; 0x39
 8006904:	d071      	beq.n	80069ea <_dtoa_r+0xb9a>
 8006906:	3201      	adds	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e746      	b.n	800679a <_dtoa_r+0x94a>
 800690c:	2a00      	cmp	r2, #0
 800690e:	dd07      	ble.n	8006920 <_dtoa_r+0xad0>
 8006910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006914:	d0ed      	beq.n	80068f2 <_dtoa_r+0xaa2>
 8006916:	f10a 0301 	add.w	r3, sl, #1
 800691a:	f88b 3000 	strb.w	r3, [fp]
 800691e:	e73c      	b.n	800679a <_dtoa_r+0x94a>
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006926:	4599      	cmp	r9, r3
 8006928:	d047      	beq.n	80069ba <_dtoa_r+0xb6a>
 800692a:	ee18 1a10 	vmov	r1, s16
 800692e:	2300      	movs	r3, #0
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f8f6 	bl	8006b24 <__multadd>
 8006938:	45b8      	cmp	r8, r7
 800693a:	ee08 0a10 	vmov	s16, r0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	f04f 020a 	mov.w	r2, #10
 8006946:	4641      	mov	r1, r8
 8006948:	4620      	mov	r0, r4
 800694a:	d106      	bne.n	800695a <_dtoa_r+0xb0a>
 800694c:	f000 f8ea 	bl	8006b24 <__multadd>
 8006950:	4680      	mov	r8, r0
 8006952:	4607      	mov	r7, r0
 8006954:	f109 0901 	add.w	r9, r9, #1
 8006958:	e772      	b.n	8006840 <_dtoa_r+0x9f0>
 800695a:	f000 f8e3 	bl	8006b24 <__multadd>
 800695e:	4639      	mov	r1, r7
 8006960:	4680      	mov	r8, r0
 8006962:	2300      	movs	r3, #0
 8006964:	220a      	movs	r2, #10
 8006966:	4620      	mov	r0, r4
 8006968:	f000 f8dc 	bl	8006b24 <__multadd>
 800696c:	4607      	mov	r7, r0
 800696e:	e7f1      	b.n	8006954 <_dtoa_r+0xb04>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	9d01      	ldr	r5, [sp, #4]
 8006976:	ee18 0a10 	vmov	r0, s16
 800697a:	4631      	mov	r1, r6
 800697c:	f7ff f9da 	bl	8005d34 <quorem>
 8006980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	f805 ab01 	strb.w	sl, [r5], #1
 800698a:	1aea      	subs	r2, r5, r3
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	4293      	cmp	r3, r2
 8006990:	dd09      	ble.n	80069a6 <_dtoa_r+0xb56>
 8006992:	ee18 1a10 	vmov	r1, s16
 8006996:	2300      	movs	r3, #0
 8006998:	220a      	movs	r2, #10
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f8c2 	bl	8006b24 <__multadd>
 80069a0:	ee08 0a10 	vmov	s16, r0
 80069a4:	e7e7      	b.n	8006976 <_dtoa_r+0xb26>
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfc8      	it	gt
 80069ac:	461d      	movgt	r5, r3
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	bfd8      	it	le
 80069b2:	2501      	movle	r5, #1
 80069b4:	441d      	add	r5, r3
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	ee18 1a10 	vmov	r1, s16
 80069be:	2201      	movs	r2, #1
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fa5f 	bl	8006e84 <__lshift>
 80069c6:	4631      	mov	r1, r6
 80069c8:	ee08 0a10 	vmov	s16, r0
 80069cc:	f000 faca 	bl	8006f64 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	dc91      	bgt.n	80068f8 <_dtoa_r+0xaa8>
 80069d4:	d102      	bne.n	80069dc <_dtoa_r+0xb8c>
 80069d6:	f01a 0f01 	tst.w	sl, #1
 80069da:	d18d      	bne.n	80068f8 <_dtoa_r+0xaa8>
 80069dc:	462b      	mov	r3, r5
 80069de:	461d      	mov	r5, r3
 80069e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e4:	2a30      	cmp	r2, #48	; 0x30
 80069e6:	d0fa      	beq.n	80069de <_dtoa_r+0xb8e>
 80069e8:	e6d7      	b.n	800679a <_dtoa_r+0x94a>
 80069ea:	9a01      	ldr	r2, [sp, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d184      	bne.n	80068fa <_dtoa_r+0xaaa>
 80069f0:	9b00      	ldr	r3, [sp, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	2331      	movs	r3, #49	; 0x31
 80069f8:	7013      	strb	r3, [r2, #0]
 80069fa:	e6ce      	b.n	800679a <_dtoa_r+0x94a>
 80069fc:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <_dtoa_r+0xbd4>)
 80069fe:	f7ff ba95 	b.w	8005f2c <_dtoa_r+0xdc>
 8006a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f aa6e 	bne.w	8005ee6 <_dtoa_r+0x96>
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <_dtoa_r+0xbd8>)
 8006a0c:	f7ff ba8e 	b.w	8005f2c <_dtoa_r+0xdc>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dcae      	bgt.n	8006974 <_dtoa_r+0xb24>
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f73f aea8 	bgt.w	800676e <_dtoa_r+0x91e>
 8006a1e:	e7a9      	b.n	8006974 <_dtoa_r+0xb24>
 8006a20:	080082eb 	.word	0x080082eb
 8006a24:	08008248 	.word	0x08008248
 8006a28:	0800826c 	.word	0x0800826c

08006a2c <_localeconv_r>:
 8006a2c:	4800      	ldr	r0, [pc, #0]	; (8006a30 <_localeconv_r+0x4>)
 8006a2e:	4770      	bx	lr
 8006a30:	200001a0 	.word	0x200001a0

08006a34 <malloc>:
 8006a34:	4b02      	ldr	r3, [pc, #8]	; (8006a40 <malloc+0xc>)
 8006a36:	4601      	mov	r1, r0
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f000 bc17 	b.w	800726c <_malloc_r>
 8006a3e:	bf00      	nop
 8006a40:	2000004c 	.word	0x2000004c

08006a44 <memcpy>:
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a4c:	d100      	bne.n	8006a50 <memcpy+0xc>
 8006a4e:	4770      	bx	lr
 8006a50:	b510      	push	{r4, lr}
 8006a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d1f9      	bne.n	8006a52 <memcpy+0xe>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <_Balloc>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Balloc+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ffe2 	bl	8006a34 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	6260      	str	r0, [r4, #36]	; 0x24
 8006a74:	b920      	cbnz	r0, 8006a80 <_Balloc+0x20>
 8006a76:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <_Balloc+0x78>)
 8006a78:	4818      	ldr	r0, [pc, #96]	; (8006adc <_Balloc+0x7c>)
 8006a7a:	2166      	movs	r1, #102	; 0x66
 8006a7c:	f000 fdd6 	bl	800762c <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a8a:	68f3      	ldr	r3, [r6, #12]
 8006a8c:	b183      	cbz	r3, 8006ab0 <_Balloc+0x50>
 8006a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a96:	b9b8      	cbnz	r0, 8006ac8 <_Balloc+0x68>
 8006a98:	2101      	movs	r1, #1
 8006a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a9e:	1d72      	adds	r2, r6, #5
 8006aa0:	0092      	lsls	r2, r2, #2
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fb60 	bl	8007168 <_calloc_r>
 8006aa8:	b160      	cbz	r0, 8006ac4 <_Balloc+0x64>
 8006aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006aae:	e00e      	b.n	8006ace <_Balloc+0x6e>
 8006ab0:	2221      	movs	r2, #33	; 0x21
 8006ab2:	2104      	movs	r1, #4
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fb57 	bl	8007168 <_calloc_r>
 8006aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006abc:	60f0      	str	r0, [r6, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e4      	bne.n	8006a8e <_Balloc+0x2e>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	6802      	ldr	r2, [r0, #0]
 8006aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ad4:	e7f7      	b.n	8006ac6 <_Balloc+0x66>
 8006ad6:	bf00      	nop
 8006ad8:	08008279 	.word	0x08008279
 8006adc:	080082fc 	.word	0x080082fc

08006ae0 <_Bfree>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	b976      	cbnz	r6, 8006b08 <_Bfree+0x28>
 8006aea:	2010      	movs	r0, #16
 8006aec:	f7ff ffa2 	bl	8006a34 <malloc>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6268      	str	r0, [r5, #36]	; 0x24
 8006af4:	b920      	cbnz	r0, 8006b00 <_Bfree+0x20>
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <_Bfree+0x3c>)
 8006af8:	4809      	ldr	r0, [pc, #36]	; (8006b20 <_Bfree+0x40>)
 8006afa:	218a      	movs	r1, #138	; 0x8a
 8006afc:	f000 fd96 	bl	800762c <__assert_func>
 8006b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b04:	6006      	str	r6, [r0, #0]
 8006b06:	60c6      	str	r6, [r0, #12]
 8006b08:	b13c      	cbz	r4, 8006b1a <_Bfree+0x3a>
 8006b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b14:	6021      	str	r1, [r4, #0]
 8006b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	08008279 	.word	0x08008279
 8006b20:	080082fc 	.word	0x080082fc

08006b24 <__multadd>:
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	690d      	ldr	r5, [r1, #16]
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	461e      	mov	r6, r3
 8006b30:	f101 0c14 	add.w	ip, r1, #20
 8006b34:	2000      	movs	r0, #0
 8006b36:	f8dc 3000 	ldr.w	r3, [ip]
 8006b3a:	b299      	uxth	r1, r3
 8006b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b40:	0c1e      	lsrs	r6, r3, #16
 8006b42:	0c0b      	lsrs	r3, r1, #16
 8006b44:	fb02 3306 	mla	r3, r2, r6, r3
 8006b48:	b289      	uxth	r1, r1
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b50:	4285      	cmp	r5, r0
 8006b52:	f84c 1b04 	str.w	r1, [ip], #4
 8006b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b5a:	dcec      	bgt.n	8006b36 <__multadd+0x12>
 8006b5c:	b30e      	cbz	r6, 8006ba2 <__multadd+0x7e>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc19      	bgt.n	8006b98 <__multadd+0x74>
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	4638      	mov	r0, r7
 8006b68:	3101      	adds	r1, #1
 8006b6a:	f7ff ff79 	bl	8006a60 <_Balloc>
 8006b6e:	4680      	mov	r8, r0
 8006b70:	b928      	cbnz	r0, 8006b7e <__multadd+0x5a>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <__multadd+0x84>)
 8006b76:	480d      	ldr	r0, [pc, #52]	; (8006bac <__multadd+0x88>)
 8006b78:	21b5      	movs	r1, #181	; 0xb5
 8006b7a:	f000 fd57 	bl	800762c <__assert_func>
 8006b7e:	6922      	ldr	r2, [r4, #16]
 8006b80:	3202      	adds	r2, #2
 8006b82:	f104 010c 	add.w	r1, r4, #12
 8006b86:	0092      	lsls	r2, r2, #2
 8006b88:	300c      	adds	r0, #12
 8006b8a:	f7ff ff5b 	bl	8006a44 <memcpy>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4638      	mov	r0, r7
 8006b92:	f7ff ffa5 	bl	8006ae0 <_Bfree>
 8006b96:	4644      	mov	r4, r8
 8006b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	615e      	str	r6, [r3, #20]
 8006ba0:	6125      	str	r5, [r4, #16]
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba8:	080082eb 	.word	0x080082eb
 8006bac:	080082fc 	.word	0x080082fc

08006bb0 <__hi0bits>:
 8006bb0:	0c03      	lsrs	r3, r0, #16
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	b9d3      	cbnz	r3, 8006bec <__hi0bits+0x3c>
 8006bb6:	0400      	lsls	r0, r0, #16
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bbe:	bf04      	itt	eq
 8006bc0:	0200      	lsleq	r0, r0, #8
 8006bc2:	3308      	addeq	r3, #8
 8006bc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bc8:	bf04      	itt	eq
 8006bca:	0100      	lsleq	r0, r0, #4
 8006bcc:	3304      	addeq	r3, #4
 8006bce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bd2:	bf04      	itt	eq
 8006bd4:	0080      	lsleq	r0, r0, #2
 8006bd6:	3302      	addeq	r3, #2
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	db05      	blt.n	8006be8 <__hi0bits+0x38>
 8006bdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006be0:	f103 0301 	add.w	r3, r3, #1
 8006be4:	bf08      	it	eq
 8006be6:	2320      	moveq	r3, #32
 8006be8:	4618      	mov	r0, r3
 8006bea:	4770      	bx	lr
 8006bec:	2300      	movs	r3, #0
 8006bee:	e7e4      	b.n	8006bba <__hi0bits+0xa>

08006bf0 <__lo0bits>:
 8006bf0:	6803      	ldr	r3, [r0, #0]
 8006bf2:	f013 0207 	ands.w	r2, r3, #7
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	d00b      	beq.n	8006c12 <__lo0bits+0x22>
 8006bfa:	07da      	lsls	r2, r3, #31
 8006bfc:	d423      	bmi.n	8006c46 <__lo0bits+0x56>
 8006bfe:	0798      	lsls	r0, r3, #30
 8006c00:	bf49      	itett	mi
 8006c02:	085b      	lsrmi	r3, r3, #1
 8006c04:	089b      	lsrpl	r3, r3, #2
 8006c06:	2001      	movmi	r0, #1
 8006c08:	600b      	strmi	r3, [r1, #0]
 8006c0a:	bf5c      	itt	pl
 8006c0c:	600b      	strpl	r3, [r1, #0]
 8006c0e:	2002      	movpl	r0, #2
 8006c10:	4770      	bx	lr
 8006c12:	b298      	uxth	r0, r3
 8006c14:	b9a8      	cbnz	r0, 8006c42 <__lo0bits+0x52>
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	2010      	movs	r0, #16
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	b90a      	cbnz	r2, 8006c22 <__lo0bits+0x32>
 8006c1e:	3008      	adds	r0, #8
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	071a      	lsls	r2, r3, #28
 8006c24:	bf04      	itt	eq
 8006c26:	091b      	lsreq	r3, r3, #4
 8006c28:	3004      	addeq	r0, #4
 8006c2a:	079a      	lsls	r2, r3, #30
 8006c2c:	bf04      	itt	eq
 8006c2e:	089b      	lsreq	r3, r3, #2
 8006c30:	3002      	addeq	r0, #2
 8006c32:	07da      	lsls	r2, r3, #31
 8006c34:	d403      	bmi.n	8006c3e <__lo0bits+0x4e>
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	f100 0001 	add.w	r0, r0, #1
 8006c3c:	d005      	beq.n	8006c4a <__lo0bits+0x5a>
 8006c3e:	600b      	str	r3, [r1, #0]
 8006c40:	4770      	bx	lr
 8006c42:	4610      	mov	r0, r2
 8006c44:	e7e9      	b.n	8006c1a <__lo0bits+0x2a>
 8006c46:	2000      	movs	r0, #0
 8006c48:	4770      	bx	lr
 8006c4a:	2020      	movs	r0, #32
 8006c4c:	4770      	bx	lr
	...

08006c50 <__i2b>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	2101      	movs	r1, #1
 8006c56:	f7ff ff03 	bl	8006a60 <_Balloc>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	b928      	cbnz	r0, 8006c6a <__i2b+0x1a>
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <__i2b+0x24>)
 8006c60:	4805      	ldr	r0, [pc, #20]	; (8006c78 <__i2b+0x28>)
 8006c62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c66:	f000 fce1 	bl	800762c <__assert_func>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	6144      	str	r4, [r0, #20]
 8006c6e:	6103      	str	r3, [r0, #16]
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	080082eb 	.word	0x080082eb
 8006c78:	080082fc 	.word	0x080082fc

08006c7c <__multiply>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	4691      	mov	r9, r2
 8006c82:	690a      	ldr	r2, [r1, #16]
 8006c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bfb8      	it	lt
 8006c8c:	460b      	movlt	r3, r1
 8006c8e:	460c      	mov	r4, r1
 8006c90:	bfbc      	itt	lt
 8006c92:	464c      	movlt	r4, r9
 8006c94:	4699      	movlt	r9, r3
 8006c96:	6927      	ldr	r7, [r4, #16]
 8006c98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c9c:	68a3      	ldr	r3, [r4, #8]
 8006c9e:	6861      	ldr	r1, [r4, #4]
 8006ca0:	eb07 060a 	add.w	r6, r7, sl
 8006ca4:	42b3      	cmp	r3, r6
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	bfb8      	it	lt
 8006caa:	3101      	addlt	r1, #1
 8006cac:	f7ff fed8 	bl	8006a60 <_Balloc>
 8006cb0:	b930      	cbnz	r0, 8006cc0 <__multiply+0x44>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4b44      	ldr	r3, [pc, #272]	; (8006dc8 <__multiply+0x14c>)
 8006cb6:	4845      	ldr	r0, [pc, #276]	; (8006dcc <__multiply+0x150>)
 8006cb8:	f240 115d 	movw	r1, #349	; 0x15d
 8006cbc:	f000 fcb6 	bl	800762c <__assert_func>
 8006cc0:	f100 0514 	add.w	r5, r0, #20
 8006cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cc8:	462b      	mov	r3, r5
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4543      	cmp	r3, r8
 8006cce:	d321      	bcc.n	8006d14 <__multiply+0x98>
 8006cd0:	f104 0314 	add.w	r3, r4, #20
 8006cd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cd8:	f109 0314 	add.w	r3, r9, #20
 8006cdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ce0:	9202      	str	r2, [sp, #8]
 8006ce2:	1b3a      	subs	r2, r7, r4
 8006ce4:	3a15      	subs	r2, #21
 8006ce6:	f022 0203 	bic.w	r2, r2, #3
 8006cea:	3204      	adds	r2, #4
 8006cec:	f104 0115 	add.w	r1, r4, #21
 8006cf0:	428f      	cmp	r7, r1
 8006cf2:	bf38      	it	cc
 8006cf4:	2204      	movcc	r2, #4
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	9a02      	ldr	r2, [sp, #8]
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d80c      	bhi.n	8006d1a <__multiply+0x9e>
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	dd03      	ble.n	8006d0c <__multiply+0x90>
 8006d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d05a      	beq.n	8006dc2 <__multiply+0x146>
 8006d0c:	6106      	str	r6, [r0, #16]
 8006d0e:	b005      	add	sp, #20
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	f843 2b04 	str.w	r2, [r3], #4
 8006d18:	e7d8      	b.n	8006ccc <__multiply+0x50>
 8006d1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d1e:	f1ba 0f00 	cmp.w	sl, #0
 8006d22:	d024      	beq.n	8006d6e <__multiply+0xf2>
 8006d24:	f104 0e14 	add.w	lr, r4, #20
 8006d28:	46a9      	mov	r9, r5
 8006d2a:	f04f 0c00 	mov.w	ip, #0
 8006d2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d32:	f8d9 1000 	ldr.w	r1, [r9]
 8006d36:	fa1f fb82 	uxth.w	fp, r2
 8006d3a:	b289      	uxth	r1, r1
 8006d3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d44:	f8d9 2000 	ldr.w	r2, [r9]
 8006d48:	4461      	add	r1, ip
 8006d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d56:	b289      	uxth	r1, r1
 8006d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d5c:	4577      	cmp	r7, lr
 8006d5e:	f849 1b04 	str.w	r1, [r9], #4
 8006d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d66:	d8e2      	bhi.n	8006d2e <__multiply+0xb2>
 8006d68:	9a01      	ldr	r2, [sp, #4]
 8006d6a:	f845 c002 	str.w	ip, [r5, r2]
 8006d6e:	9a03      	ldr	r2, [sp, #12]
 8006d70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d74:	3304      	adds	r3, #4
 8006d76:	f1b9 0f00 	cmp.w	r9, #0
 8006d7a:	d020      	beq.n	8006dbe <__multiply+0x142>
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	f104 0c14 	add.w	ip, r4, #20
 8006d82:	46ae      	mov	lr, r5
 8006d84:	f04f 0a00 	mov.w	sl, #0
 8006d88:	f8bc b000 	ldrh.w	fp, [ip]
 8006d8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d90:	fb09 220b 	mla	r2, r9, fp, r2
 8006d94:	4492      	add	sl, r2
 8006d96:	b289      	uxth	r1, r1
 8006d98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d9c:	f84e 1b04 	str.w	r1, [lr], #4
 8006da0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006da4:	f8be 1000 	ldrh.w	r1, [lr]
 8006da8:	0c12      	lsrs	r2, r2, #16
 8006daa:	fb09 1102 	mla	r1, r9, r2, r1
 8006dae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006db2:	4567      	cmp	r7, ip
 8006db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006db8:	d8e6      	bhi.n	8006d88 <__multiply+0x10c>
 8006dba:	9a01      	ldr	r2, [sp, #4]
 8006dbc:	50a9      	str	r1, [r5, r2]
 8006dbe:	3504      	adds	r5, #4
 8006dc0:	e79a      	b.n	8006cf8 <__multiply+0x7c>
 8006dc2:	3e01      	subs	r6, #1
 8006dc4:	e79c      	b.n	8006d00 <__multiply+0x84>
 8006dc6:	bf00      	nop
 8006dc8:	080082eb 	.word	0x080082eb
 8006dcc:	080082fc 	.word	0x080082fc

08006dd0 <__pow5mult>:
 8006dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd4:	4615      	mov	r5, r2
 8006dd6:	f012 0203 	ands.w	r2, r2, #3
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	d007      	beq.n	8006df0 <__pow5mult+0x20>
 8006de0:	4c25      	ldr	r4, [pc, #148]	; (8006e78 <__pow5mult+0xa8>)
 8006de2:	3a01      	subs	r2, #1
 8006de4:	2300      	movs	r3, #0
 8006de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dea:	f7ff fe9b 	bl	8006b24 <__multadd>
 8006dee:	4607      	mov	r7, r0
 8006df0:	10ad      	asrs	r5, r5, #2
 8006df2:	d03d      	beq.n	8006e70 <__pow5mult+0xa0>
 8006df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006df6:	b97c      	cbnz	r4, 8006e18 <__pow5mult+0x48>
 8006df8:	2010      	movs	r0, #16
 8006dfa:	f7ff fe1b 	bl	8006a34 <malloc>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6270      	str	r0, [r6, #36]	; 0x24
 8006e02:	b928      	cbnz	r0, 8006e10 <__pow5mult+0x40>
 8006e04:	4b1d      	ldr	r3, [pc, #116]	; (8006e7c <__pow5mult+0xac>)
 8006e06:	481e      	ldr	r0, [pc, #120]	; (8006e80 <__pow5mult+0xb0>)
 8006e08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e0c:	f000 fc0e 	bl	800762c <__assert_func>
 8006e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e14:	6004      	str	r4, [r0, #0]
 8006e16:	60c4      	str	r4, [r0, #12]
 8006e18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e20:	b94c      	cbnz	r4, 8006e36 <__pow5mult+0x66>
 8006e22:	f240 2171 	movw	r1, #625	; 0x271
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7ff ff12 	bl	8006c50 <__i2b>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e32:	4604      	mov	r4, r0
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	f04f 0900 	mov.w	r9, #0
 8006e3a:	07eb      	lsls	r3, r5, #31
 8006e3c:	d50a      	bpl.n	8006e54 <__pow5mult+0x84>
 8006e3e:	4639      	mov	r1, r7
 8006e40:	4622      	mov	r2, r4
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff ff1a 	bl	8006c7c <__multiply>
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff fe47 	bl	8006ae0 <_Bfree>
 8006e52:	4647      	mov	r7, r8
 8006e54:	106d      	asrs	r5, r5, #1
 8006e56:	d00b      	beq.n	8006e70 <__pow5mult+0xa0>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	b938      	cbnz	r0, 8006e6c <__pow5mult+0x9c>
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff ff0b 	bl	8006c7c <__multiply>
 8006e66:	6020      	str	r0, [r4, #0]
 8006e68:	f8c0 9000 	str.w	r9, [r0]
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	e7e4      	b.n	8006e3a <__pow5mult+0x6a>
 8006e70:	4638      	mov	r0, r7
 8006e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e76:	bf00      	nop
 8006e78:	08008448 	.word	0x08008448
 8006e7c:	08008279 	.word	0x08008279
 8006e80:	080082fc 	.word	0x080082fc

08006e84 <__lshift>:
 8006e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e88:	460c      	mov	r4, r1
 8006e8a:	6849      	ldr	r1, [r1, #4]
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	4607      	mov	r7, r0
 8006e96:	4691      	mov	r9, r2
 8006e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e9c:	f108 0601 	add.w	r6, r8, #1
 8006ea0:	42b3      	cmp	r3, r6
 8006ea2:	db0b      	blt.n	8006ebc <__lshift+0x38>
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff fddb 	bl	8006a60 <_Balloc>
 8006eaa:	4605      	mov	r5, r0
 8006eac:	b948      	cbnz	r0, 8006ec2 <__lshift+0x3e>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	; (8006f5c <__lshift+0xd8>)
 8006eb2:	482b      	ldr	r0, [pc, #172]	; (8006f60 <__lshift+0xdc>)
 8006eb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006eb8:	f000 fbb8 	bl	800762c <__assert_func>
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	e7ee      	b.n	8006ea0 <__lshift+0x1c>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f100 0114 	add.w	r1, r0, #20
 8006ec8:	f100 0210 	add.w	r2, r0, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	4553      	cmp	r3, sl
 8006ed0:	db37      	blt.n	8006f42 <__lshift+0xbe>
 8006ed2:	6920      	ldr	r0, [r4, #16]
 8006ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ed8:	f104 0314 	add.w	r3, r4, #20
 8006edc:	f019 091f 	ands.w	r9, r9, #31
 8006ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ee8:	d02f      	beq.n	8006f4a <__lshift+0xc6>
 8006eea:	f1c9 0e20 	rsb	lr, r9, #32
 8006eee:	468a      	mov	sl, r1
 8006ef0:	f04f 0c00 	mov.w	ip, #0
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	fa02 f209 	lsl.w	r2, r2, r9
 8006efa:	ea42 020c 	orr.w	r2, r2, ip
 8006efe:	f84a 2b04 	str.w	r2, [sl], #4
 8006f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f06:	4298      	cmp	r0, r3
 8006f08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f0c:	d8f2      	bhi.n	8006ef4 <__lshift+0x70>
 8006f0e:	1b03      	subs	r3, r0, r4
 8006f10:	3b15      	subs	r3, #21
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	3304      	adds	r3, #4
 8006f18:	f104 0215 	add.w	r2, r4, #21
 8006f1c:	4290      	cmp	r0, r2
 8006f1e:	bf38      	it	cc
 8006f20:	2304      	movcc	r3, #4
 8006f22:	f841 c003 	str.w	ip, [r1, r3]
 8006f26:	f1bc 0f00 	cmp.w	ip, #0
 8006f2a:	d001      	beq.n	8006f30 <__lshift+0xac>
 8006f2c:	f108 0602 	add.w	r6, r8, #2
 8006f30:	3e01      	subs	r6, #1
 8006f32:	4638      	mov	r0, r7
 8006f34:	612e      	str	r6, [r5, #16]
 8006f36:	4621      	mov	r1, r4
 8006f38:	f7ff fdd2 	bl	8006ae0 <_Bfree>
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f46:	3301      	adds	r3, #1
 8006f48:	e7c1      	b.n	8006ece <__lshift+0x4a>
 8006f4a:	3904      	subs	r1, #4
 8006f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f54:	4298      	cmp	r0, r3
 8006f56:	d8f9      	bhi.n	8006f4c <__lshift+0xc8>
 8006f58:	e7ea      	b.n	8006f30 <__lshift+0xac>
 8006f5a:	bf00      	nop
 8006f5c:	080082eb 	.word	0x080082eb
 8006f60:	080082fc 	.word	0x080082fc

08006f64 <__mcmp>:
 8006f64:	b530      	push	{r4, r5, lr}
 8006f66:	6902      	ldr	r2, [r0, #16]
 8006f68:	690c      	ldr	r4, [r1, #16]
 8006f6a:	1b12      	subs	r2, r2, r4
 8006f6c:	d10e      	bne.n	8006f8c <__mcmp+0x28>
 8006f6e:	f100 0314 	add.w	r3, r0, #20
 8006f72:	3114      	adds	r1, #20
 8006f74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f84:	42a5      	cmp	r5, r4
 8006f86:	d003      	beq.n	8006f90 <__mcmp+0x2c>
 8006f88:	d305      	bcc.n	8006f96 <__mcmp+0x32>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	bd30      	pop	{r4, r5, pc}
 8006f90:	4283      	cmp	r3, r0
 8006f92:	d3f3      	bcc.n	8006f7c <__mcmp+0x18>
 8006f94:	e7fa      	b.n	8006f8c <__mcmp+0x28>
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	e7f7      	b.n	8006f8c <__mcmp+0x28>

08006f9c <__mdiff>:
 8006f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4690      	mov	r8, r2
 8006faa:	f7ff ffdb 	bl	8006f64 <__mcmp>
 8006fae:	1e05      	subs	r5, r0, #0
 8006fb0:	d110      	bne.n	8006fd4 <__mdiff+0x38>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff fd53 	bl	8006a60 <_Balloc>
 8006fba:	b930      	cbnz	r0, 8006fca <__mdiff+0x2e>
 8006fbc:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <__mdiff+0x10c>)
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f240 2132 	movw	r1, #562	; 0x232
 8006fc4:	4839      	ldr	r0, [pc, #228]	; (80070ac <__mdiff+0x110>)
 8006fc6:	f000 fb31 	bl	800762c <__assert_func>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd4:	bfa4      	itt	ge
 8006fd6:	4643      	movge	r3, r8
 8006fd8:	46a0      	movge	r8, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fe0:	bfa6      	itte	ge
 8006fe2:	461c      	movge	r4, r3
 8006fe4:	2500      	movge	r5, #0
 8006fe6:	2501      	movlt	r5, #1
 8006fe8:	f7ff fd3a 	bl	8006a60 <_Balloc>
 8006fec:	b920      	cbnz	r0, 8006ff8 <__mdiff+0x5c>
 8006fee:	4b2e      	ldr	r3, [pc, #184]	; (80070a8 <__mdiff+0x10c>)
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ff6:	e7e5      	b.n	8006fc4 <__mdiff+0x28>
 8006ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ffc:	6926      	ldr	r6, [r4, #16]
 8006ffe:	60c5      	str	r5, [r0, #12]
 8007000:	f104 0914 	add.w	r9, r4, #20
 8007004:	f108 0514 	add.w	r5, r8, #20
 8007008:	f100 0e14 	add.w	lr, r0, #20
 800700c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007014:	f108 0210 	add.w	r2, r8, #16
 8007018:	46f2      	mov	sl, lr
 800701a:	2100      	movs	r1, #0
 800701c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007024:	fa1f f883 	uxth.w	r8, r3
 8007028:	fa11 f18b 	uxtah	r1, r1, fp
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	eba1 0808 	sub.w	r8, r1, r8
 8007032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800703a:	fa1f f888 	uxth.w	r8, r8
 800703e:	1419      	asrs	r1, r3, #16
 8007040:	454e      	cmp	r6, r9
 8007042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007046:	f84a 3b04 	str.w	r3, [sl], #4
 800704a:	d8e7      	bhi.n	800701c <__mdiff+0x80>
 800704c:	1b33      	subs	r3, r6, r4
 800704e:	3b15      	subs	r3, #21
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	3304      	adds	r3, #4
 8007056:	3415      	adds	r4, #21
 8007058:	42a6      	cmp	r6, r4
 800705a:	bf38      	it	cc
 800705c:	2304      	movcc	r3, #4
 800705e:	441d      	add	r5, r3
 8007060:	4473      	add	r3, lr
 8007062:	469e      	mov	lr, r3
 8007064:	462e      	mov	r6, r5
 8007066:	4566      	cmp	r6, ip
 8007068:	d30e      	bcc.n	8007088 <__mdiff+0xec>
 800706a:	f10c 0203 	add.w	r2, ip, #3
 800706e:	1b52      	subs	r2, r2, r5
 8007070:	f022 0203 	bic.w	r2, r2, #3
 8007074:	3d03      	subs	r5, #3
 8007076:	45ac      	cmp	ip, r5
 8007078:	bf38      	it	cc
 800707a:	2200      	movcc	r2, #0
 800707c:	441a      	add	r2, r3
 800707e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007082:	b17b      	cbz	r3, 80070a4 <__mdiff+0x108>
 8007084:	6107      	str	r7, [r0, #16]
 8007086:	e7a3      	b.n	8006fd0 <__mdiff+0x34>
 8007088:	f856 8b04 	ldr.w	r8, [r6], #4
 800708c:	fa11 f288 	uxtah	r2, r1, r8
 8007090:	1414      	asrs	r4, r2, #16
 8007092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007096:	b292      	uxth	r2, r2
 8007098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800709c:	f84e 2b04 	str.w	r2, [lr], #4
 80070a0:	1421      	asrs	r1, r4, #16
 80070a2:	e7e0      	b.n	8007066 <__mdiff+0xca>
 80070a4:	3f01      	subs	r7, #1
 80070a6:	e7ea      	b.n	800707e <__mdiff+0xe2>
 80070a8:	080082eb 	.word	0x080082eb
 80070ac:	080082fc 	.word	0x080082fc

080070b0 <__d2b>:
 80070b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4689      	mov	r9, r1
 80070b6:	2101      	movs	r1, #1
 80070b8:	ec57 6b10 	vmov	r6, r7, d0
 80070bc:	4690      	mov	r8, r2
 80070be:	f7ff fccf 	bl	8006a60 <_Balloc>
 80070c2:	4604      	mov	r4, r0
 80070c4:	b930      	cbnz	r0, 80070d4 <__d2b+0x24>
 80070c6:	4602      	mov	r2, r0
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <__d2b+0xb0>)
 80070ca:	4826      	ldr	r0, [pc, #152]	; (8007164 <__d2b+0xb4>)
 80070cc:	f240 310a 	movw	r1, #778	; 0x30a
 80070d0:	f000 faac 	bl	800762c <__assert_func>
 80070d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070dc:	bb35      	cbnz	r5, 800712c <__d2b+0x7c>
 80070de:	2e00      	cmp	r6, #0
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	d028      	beq.n	8007136 <__d2b+0x86>
 80070e4:	4668      	mov	r0, sp
 80070e6:	9600      	str	r6, [sp, #0]
 80070e8:	f7ff fd82 	bl	8006bf0 <__lo0bits>
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	b300      	cbz	r0, 8007132 <__d2b+0x82>
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	f1c0 0320 	rsb	r3, r0, #32
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	430b      	orrs	r3, r1
 80070fc:	40c2      	lsrs	r2, r0
 80070fe:	6163      	str	r3, [r4, #20]
 8007100:	9201      	str	r2, [sp, #4]
 8007102:	9b01      	ldr	r3, [sp, #4]
 8007104:	61a3      	str	r3, [r4, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	bf14      	ite	ne
 800710a:	2202      	movne	r2, #2
 800710c:	2201      	moveq	r2, #1
 800710e:	6122      	str	r2, [r4, #16]
 8007110:	b1d5      	cbz	r5, 8007148 <__d2b+0x98>
 8007112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007116:	4405      	add	r5, r0
 8007118:	f8c9 5000 	str.w	r5, [r9]
 800711c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007120:	f8c8 0000 	str.w	r0, [r8]
 8007124:	4620      	mov	r0, r4
 8007126:	b003      	add	sp, #12
 8007128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800712c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007130:	e7d5      	b.n	80070de <__d2b+0x2e>
 8007132:	6161      	str	r1, [r4, #20]
 8007134:	e7e5      	b.n	8007102 <__d2b+0x52>
 8007136:	a801      	add	r0, sp, #4
 8007138:	f7ff fd5a 	bl	8006bf0 <__lo0bits>
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	2201      	movs	r2, #1
 8007142:	6122      	str	r2, [r4, #16]
 8007144:	3020      	adds	r0, #32
 8007146:	e7e3      	b.n	8007110 <__d2b+0x60>
 8007148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800714c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007150:	f8c9 0000 	str.w	r0, [r9]
 8007154:	6918      	ldr	r0, [r3, #16]
 8007156:	f7ff fd2b 	bl	8006bb0 <__hi0bits>
 800715a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800715e:	e7df      	b.n	8007120 <__d2b+0x70>
 8007160:	080082eb 	.word	0x080082eb
 8007164:	080082fc 	.word	0x080082fc

08007168 <_calloc_r>:
 8007168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800716a:	fba1 2402 	umull	r2, r4, r1, r2
 800716e:	b94c      	cbnz	r4, 8007184 <_calloc_r+0x1c>
 8007170:	4611      	mov	r1, r2
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	f000 f87a 	bl	800726c <_malloc_r>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	4605      	mov	r5, r0
 800717c:	b930      	cbnz	r0, 800718c <_calloc_r+0x24>
 800717e:	4628      	mov	r0, r5
 8007180:	b003      	add	sp, #12
 8007182:	bd30      	pop	{r4, r5, pc}
 8007184:	220c      	movs	r2, #12
 8007186:	6002      	str	r2, [r0, #0]
 8007188:	2500      	movs	r5, #0
 800718a:	e7f8      	b.n	800717e <_calloc_r+0x16>
 800718c:	4621      	mov	r1, r4
 800718e:	f7fe f93f 	bl	8005410 <memset>
 8007192:	e7f4      	b.n	800717e <_calloc_r+0x16>

08007194 <_free_r>:
 8007194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007196:	2900      	cmp	r1, #0
 8007198:	d044      	beq.n	8007224 <_free_r+0x90>
 800719a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800719e:	9001      	str	r0, [sp, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f1a1 0404 	sub.w	r4, r1, #4
 80071a6:	bfb8      	it	lt
 80071a8:	18e4      	addlt	r4, r4, r3
 80071aa:	f000 fa9b 	bl	80076e4 <__malloc_lock>
 80071ae:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <_free_r+0x94>)
 80071b0:	9801      	ldr	r0, [sp, #4]
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	b933      	cbnz	r3, 80071c4 <_free_r+0x30>
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	6014      	str	r4, [r2, #0]
 80071ba:	b003      	add	sp, #12
 80071bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c0:	f000 ba96 	b.w	80076f0 <__malloc_unlock>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d908      	bls.n	80071da <_free_r+0x46>
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	1961      	adds	r1, r4, r5
 80071cc:	428b      	cmp	r3, r1
 80071ce:	bf01      	itttt	eq
 80071d0:	6819      	ldreq	r1, [r3, #0]
 80071d2:	685b      	ldreq	r3, [r3, #4]
 80071d4:	1949      	addeq	r1, r1, r5
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	e7ed      	b.n	80071b6 <_free_r+0x22>
 80071da:	461a      	mov	r2, r3
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	b10b      	cbz	r3, 80071e4 <_free_r+0x50>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d9fa      	bls.n	80071da <_free_r+0x46>
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	1855      	adds	r5, r2, r1
 80071e8:	42a5      	cmp	r5, r4
 80071ea:	d10b      	bne.n	8007204 <_free_r+0x70>
 80071ec:	6824      	ldr	r4, [r4, #0]
 80071ee:	4421      	add	r1, r4
 80071f0:	1854      	adds	r4, r2, r1
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	d1e0      	bne.n	80071ba <_free_r+0x26>
 80071f8:	681c      	ldr	r4, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	6053      	str	r3, [r2, #4]
 80071fe:	4421      	add	r1, r4
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	e7da      	b.n	80071ba <_free_r+0x26>
 8007204:	d902      	bls.n	800720c <_free_r+0x78>
 8007206:	230c      	movs	r3, #12
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	e7d6      	b.n	80071ba <_free_r+0x26>
 800720c:	6825      	ldr	r5, [r4, #0]
 800720e:	1961      	adds	r1, r4, r5
 8007210:	428b      	cmp	r3, r1
 8007212:	bf04      	itt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	6063      	str	r3, [r4, #4]
 800721a:	bf04      	itt	eq
 800721c:	1949      	addeq	r1, r1, r5
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	6054      	str	r4, [r2, #4]
 8007222:	e7ca      	b.n	80071ba <_free_r+0x26>
 8007224:	b003      	add	sp, #12
 8007226:	bd30      	pop	{r4, r5, pc}
 8007228:	20000374 	.word	0x20000374

0800722c <sbrk_aligned>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4e0e      	ldr	r6, [pc, #56]	; (8007268 <sbrk_aligned+0x3c>)
 8007230:	460c      	mov	r4, r1
 8007232:	6831      	ldr	r1, [r6, #0]
 8007234:	4605      	mov	r5, r0
 8007236:	b911      	cbnz	r1, 800723e <sbrk_aligned+0x12>
 8007238:	f000 f9e8 	bl	800760c <_sbrk_r>
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f9e3 	bl	800760c <_sbrk_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d00a      	beq.n	8007260 <sbrk_aligned+0x34>
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	f024 0403 	bic.w	r4, r4, #3
 8007250:	42a0      	cmp	r0, r4
 8007252:	d007      	beq.n	8007264 <sbrk_aligned+0x38>
 8007254:	1a21      	subs	r1, r4, r0
 8007256:	4628      	mov	r0, r5
 8007258:	f000 f9d8 	bl	800760c <_sbrk_r>
 800725c:	3001      	adds	r0, #1
 800725e:	d101      	bne.n	8007264 <sbrk_aligned+0x38>
 8007260:	f04f 34ff 	mov.w	r4, #4294967295
 8007264:	4620      	mov	r0, r4
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	20000378 	.word	0x20000378

0800726c <_malloc_r>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	1ccd      	adds	r5, r1, #3
 8007272:	f025 0503 	bic.w	r5, r5, #3
 8007276:	3508      	adds	r5, #8
 8007278:	2d0c      	cmp	r5, #12
 800727a:	bf38      	it	cc
 800727c:	250c      	movcc	r5, #12
 800727e:	2d00      	cmp	r5, #0
 8007280:	4607      	mov	r7, r0
 8007282:	db01      	blt.n	8007288 <_malloc_r+0x1c>
 8007284:	42a9      	cmp	r1, r5
 8007286:	d905      	bls.n	8007294 <_malloc_r+0x28>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2600      	movs	r6, #0
 800728e:	4630      	mov	r0, r6
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	4e2e      	ldr	r6, [pc, #184]	; (8007350 <_malloc_r+0xe4>)
 8007296:	f000 fa25 	bl	80076e4 <__malloc_lock>
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	461c      	mov	r4, r3
 800729e:	bb34      	cbnz	r4, 80072ee <_malloc_r+0x82>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff ffc2 	bl	800722c <sbrk_aligned>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	4604      	mov	r4, r0
 80072ac:	d14d      	bne.n	800734a <_malloc_r+0xde>
 80072ae:	6834      	ldr	r4, [r6, #0]
 80072b0:	4626      	mov	r6, r4
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	d140      	bne.n	8007338 <_malloc_r+0xcc>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	4631      	mov	r1, r6
 80072ba:	4638      	mov	r0, r7
 80072bc:	eb04 0803 	add.w	r8, r4, r3
 80072c0:	f000 f9a4 	bl	800760c <_sbrk_r>
 80072c4:	4580      	cmp	r8, r0
 80072c6:	d13a      	bne.n	800733e <_malloc_r+0xd2>
 80072c8:	6821      	ldr	r1, [r4, #0]
 80072ca:	3503      	adds	r5, #3
 80072cc:	1a6d      	subs	r5, r5, r1
 80072ce:	f025 0503 	bic.w	r5, r5, #3
 80072d2:	3508      	adds	r5, #8
 80072d4:	2d0c      	cmp	r5, #12
 80072d6:	bf38      	it	cc
 80072d8:	250c      	movcc	r5, #12
 80072da:	4629      	mov	r1, r5
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff ffa5 	bl	800722c <sbrk_aligned>
 80072e2:	3001      	adds	r0, #1
 80072e4:	d02b      	beq.n	800733e <_malloc_r+0xd2>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	442b      	add	r3, r5
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	e00e      	b.n	800730c <_malloc_r+0xa0>
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	1b52      	subs	r2, r2, r5
 80072f2:	d41e      	bmi.n	8007332 <_malloc_r+0xc6>
 80072f4:	2a0b      	cmp	r2, #11
 80072f6:	d916      	bls.n	8007326 <_malloc_r+0xba>
 80072f8:	1961      	adds	r1, r4, r5
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	6025      	str	r5, [r4, #0]
 80072fe:	bf18      	it	ne
 8007300:	6059      	strne	r1, [r3, #4]
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	bf08      	it	eq
 8007306:	6031      	streq	r1, [r6, #0]
 8007308:	5162      	str	r2, [r4, r5]
 800730a:	604b      	str	r3, [r1, #4]
 800730c:	4638      	mov	r0, r7
 800730e:	f104 060b 	add.w	r6, r4, #11
 8007312:	f000 f9ed 	bl	80076f0 <__malloc_unlock>
 8007316:	f026 0607 	bic.w	r6, r6, #7
 800731a:	1d23      	adds	r3, r4, #4
 800731c:	1af2      	subs	r2, r6, r3
 800731e:	d0b6      	beq.n	800728e <_malloc_r+0x22>
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	50a3      	str	r3, [r4, r2]
 8007324:	e7b3      	b.n	800728e <_malloc_r+0x22>
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	42a3      	cmp	r3, r4
 800732a:	bf0c      	ite	eq
 800732c:	6032      	streq	r2, [r6, #0]
 800732e:	605a      	strne	r2, [r3, #4]
 8007330:	e7ec      	b.n	800730c <_malloc_r+0xa0>
 8007332:	4623      	mov	r3, r4
 8007334:	6864      	ldr	r4, [r4, #4]
 8007336:	e7b2      	b.n	800729e <_malloc_r+0x32>
 8007338:	4634      	mov	r4, r6
 800733a:	6876      	ldr	r6, [r6, #4]
 800733c:	e7b9      	b.n	80072b2 <_malloc_r+0x46>
 800733e:	230c      	movs	r3, #12
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	4638      	mov	r0, r7
 8007344:	f000 f9d4 	bl	80076f0 <__malloc_unlock>
 8007348:	e7a1      	b.n	800728e <_malloc_r+0x22>
 800734a:	6025      	str	r5, [r4, #0]
 800734c:	e7de      	b.n	800730c <_malloc_r+0xa0>
 800734e:	bf00      	nop
 8007350:	20000374 	.word	0x20000374

08007354 <__ssputs_r>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	688e      	ldr	r6, [r1, #8]
 800735a:	429e      	cmp	r6, r3
 800735c:	4682      	mov	sl, r0
 800735e:	460c      	mov	r4, r1
 8007360:	4690      	mov	r8, r2
 8007362:	461f      	mov	r7, r3
 8007364:	d838      	bhi.n	80073d8 <__ssputs_r+0x84>
 8007366:	898a      	ldrh	r2, [r1, #12]
 8007368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800736c:	d032      	beq.n	80073d4 <__ssputs_r+0x80>
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	6909      	ldr	r1, [r1, #16]
 8007372:	eba5 0901 	sub.w	r9, r5, r1
 8007376:	6965      	ldr	r5, [r4, #20]
 8007378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800737c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007380:	3301      	adds	r3, #1
 8007382:	444b      	add	r3, r9
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	429d      	cmp	r5, r3
 8007388:	bf38      	it	cc
 800738a:	461d      	movcc	r5, r3
 800738c:	0553      	lsls	r3, r2, #21
 800738e:	d531      	bpl.n	80073f4 <__ssputs_r+0xa0>
 8007390:	4629      	mov	r1, r5
 8007392:	f7ff ff6b 	bl	800726c <_malloc_r>
 8007396:	4606      	mov	r6, r0
 8007398:	b950      	cbnz	r0, 80073b0 <__ssputs_r+0x5c>
 800739a:	230c      	movs	r3, #12
 800739c:	f8ca 3000 	str.w	r3, [sl]
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	6921      	ldr	r1, [r4, #16]
 80073b2:	464a      	mov	r2, r9
 80073b4:	f7ff fb46 	bl	8006a44 <memcpy>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6126      	str	r6, [r4, #16]
 80073c6:	6165      	str	r5, [r4, #20]
 80073c8:	444e      	add	r6, r9
 80073ca:	eba5 0509 	sub.w	r5, r5, r9
 80073ce:	6026      	str	r6, [r4, #0]
 80073d0:	60a5      	str	r5, [r4, #8]
 80073d2:	463e      	mov	r6, r7
 80073d4:	42be      	cmp	r6, r7
 80073d6:	d900      	bls.n	80073da <__ssputs_r+0x86>
 80073d8:	463e      	mov	r6, r7
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	4632      	mov	r2, r6
 80073de:	4641      	mov	r1, r8
 80073e0:	f000 f966 	bl	80076b0 <memmove>
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	1b9b      	subs	r3, r3, r6
 80073e8:	60a3      	str	r3, [r4, #8]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	4433      	add	r3, r6
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	2000      	movs	r0, #0
 80073f2:	e7db      	b.n	80073ac <__ssputs_r+0x58>
 80073f4:	462a      	mov	r2, r5
 80073f6:	f000 f981 	bl	80076fc <_realloc_r>
 80073fa:	4606      	mov	r6, r0
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1e1      	bne.n	80073c4 <__ssputs_r+0x70>
 8007400:	6921      	ldr	r1, [r4, #16]
 8007402:	4650      	mov	r0, sl
 8007404:	f7ff fec6 	bl	8007194 <_free_r>
 8007408:	e7c7      	b.n	800739a <__ssputs_r+0x46>
	...

0800740c <_svfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4698      	mov	r8, r3
 8007412:	898b      	ldrh	r3, [r1, #12]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	b09d      	sub	sp, #116	; 0x74
 8007418:	4607      	mov	r7, r0
 800741a:	460d      	mov	r5, r1
 800741c:	4614      	mov	r4, r2
 800741e:	d50e      	bpl.n	800743e <_svfiprintf_r+0x32>
 8007420:	690b      	ldr	r3, [r1, #16]
 8007422:	b963      	cbnz	r3, 800743e <_svfiprintf_r+0x32>
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	f7ff ff21 	bl	800726c <_malloc_r>
 800742a:	6028      	str	r0, [r5, #0]
 800742c:	6128      	str	r0, [r5, #16]
 800742e:	b920      	cbnz	r0, 800743a <_svfiprintf_r+0x2e>
 8007430:	230c      	movs	r3, #12
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e0d1      	b.n	80075de <_svfiprintf_r+0x1d2>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	616b      	str	r3, [r5, #20]
 800743e:	2300      	movs	r3, #0
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	2320      	movs	r3, #32
 8007444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007448:	f8cd 800c 	str.w	r8, [sp, #12]
 800744c:	2330      	movs	r3, #48	; 0x30
 800744e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075f8 <_svfiprintf_r+0x1ec>
 8007452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007456:	f04f 0901 	mov.w	r9, #1
 800745a:	4623      	mov	r3, r4
 800745c:	469a      	mov	sl, r3
 800745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007462:	b10a      	cbz	r2, 8007468 <_svfiprintf_r+0x5c>
 8007464:	2a25      	cmp	r2, #37	; 0x25
 8007466:	d1f9      	bne.n	800745c <_svfiprintf_r+0x50>
 8007468:	ebba 0b04 	subs.w	fp, sl, r4
 800746c:	d00b      	beq.n	8007486 <_svfiprintf_r+0x7a>
 800746e:	465b      	mov	r3, fp
 8007470:	4622      	mov	r2, r4
 8007472:	4629      	mov	r1, r5
 8007474:	4638      	mov	r0, r7
 8007476:	f7ff ff6d 	bl	8007354 <__ssputs_r>
 800747a:	3001      	adds	r0, #1
 800747c:	f000 80aa 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007482:	445a      	add	r2, fp
 8007484:	9209      	str	r2, [sp, #36]	; 0x24
 8007486:	f89a 3000 	ldrb.w	r3, [sl]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80a2 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007490:	2300      	movs	r3, #0
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800749a:	f10a 0a01 	add.w	sl, sl, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a6:	931a      	str	r3, [sp, #104]	; 0x68
 80074a8:	4654      	mov	r4, sl
 80074aa:	2205      	movs	r2, #5
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	4851      	ldr	r0, [pc, #324]	; (80075f8 <_svfiprintf_r+0x1ec>)
 80074b2:	f7f8 fe9d 	bl	80001f0 <memchr>
 80074b6:	9a04      	ldr	r2, [sp, #16]
 80074b8:	b9d8      	cbnz	r0, 80074f2 <_svfiprintf_r+0xe6>
 80074ba:	06d0      	lsls	r0, r2, #27
 80074bc:	bf44      	itt	mi
 80074be:	2320      	movmi	r3, #32
 80074c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c4:	0711      	lsls	r1, r2, #28
 80074c6:	bf44      	itt	mi
 80074c8:	232b      	movmi	r3, #43	; 0x2b
 80074ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ce:	f89a 3000 	ldrb.w	r3, [sl]
 80074d2:	2b2a      	cmp	r3, #42	; 0x2a
 80074d4:	d015      	beq.n	8007502 <_svfiprintf_r+0xf6>
 80074d6:	9a07      	ldr	r2, [sp, #28]
 80074d8:	4654      	mov	r4, sl
 80074da:	2000      	movs	r0, #0
 80074dc:	f04f 0c0a 	mov.w	ip, #10
 80074e0:	4621      	mov	r1, r4
 80074e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e6:	3b30      	subs	r3, #48	; 0x30
 80074e8:	2b09      	cmp	r3, #9
 80074ea:	d94e      	bls.n	800758a <_svfiprintf_r+0x17e>
 80074ec:	b1b0      	cbz	r0, 800751c <_svfiprintf_r+0x110>
 80074ee:	9207      	str	r2, [sp, #28]
 80074f0:	e014      	b.n	800751c <_svfiprintf_r+0x110>
 80074f2:	eba0 0308 	sub.w	r3, r0, r8
 80074f6:	fa09 f303 	lsl.w	r3, r9, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	46a2      	mov	sl, r4
 8007500:	e7d2      	b.n	80074a8 <_svfiprintf_r+0x9c>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	9103      	str	r1, [sp, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bfbb      	ittet	lt
 800750e:	425b      	neglt	r3, r3
 8007510:	f042 0202 	orrlt.w	r2, r2, #2
 8007514:	9307      	strge	r3, [sp, #28]
 8007516:	9307      	strlt	r3, [sp, #28]
 8007518:	bfb8      	it	lt
 800751a:	9204      	strlt	r2, [sp, #16]
 800751c:	7823      	ldrb	r3, [r4, #0]
 800751e:	2b2e      	cmp	r3, #46	; 0x2e
 8007520:	d10c      	bne.n	800753c <_svfiprintf_r+0x130>
 8007522:	7863      	ldrb	r3, [r4, #1]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d135      	bne.n	8007594 <_svfiprintf_r+0x188>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	1d1a      	adds	r2, r3, #4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	9203      	str	r2, [sp, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfb8      	it	lt
 8007534:	f04f 33ff 	movlt.w	r3, #4294967295
 8007538:	3402      	adds	r4, #2
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007608 <_svfiprintf_r+0x1fc>
 8007540:	7821      	ldrb	r1, [r4, #0]
 8007542:	2203      	movs	r2, #3
 8007544:	4650      	mov	r0, sl
 8007546:	f7f8 fe53 	bl	80001f0 <memchr>
 800754a:	b140      	cbz	r0, 800755e <_svfiprintf_r+0x152>
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	eba0 000a 	sub.w	r0, r0, sl
 8007552:	fa03 f000 	lsl.w	r0, r3, r0
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	4303      	orrs	r3, r0
 800755a:	3401      	adds	r4, #1
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	4826      	ldr	r0, [pc, #152]	; (80075fc <_svfiprintf_r+0x1f0>)
 8007564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007568:	2206      	movs	r2, #6
 800756a:	f7f8 fe41 	bl	80001f0 <memchr>
 800756e:	2800      	cmp	r0, #0
 8007570:	d038      	beq.n	80075e4 <_svfiprintf_r+0x1d8>
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <_svfiprintf_r+0x1f4>)
 8007574:	bb1b      	cbnz	r3, 80075be <_svfiprintf_r+0x1b2>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	3307      	adds	r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	3308      	adds	r3, #8
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007584:	4433      	add	r3, r6
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	e767      	b.n	800745a <_svfiprintf_r+0x4e>
 800758a:	fb0c 3202 	mla	r2, ip, r2, r3
 800758e:	460c      	mov	r4, r1
 8007590:	2001      	movs	r0, #1
 8007592:	e7a5      	b.n	80074e0 <_svfiprintf_r+0xd4>
 8007594:	2300      	movs	r3, #0
 8007596:	3401      	adds	r4, #1
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	4619      	mov	r1, r3
 800759c:	f04f 0c0a 	mov.w	ip, #10
 80075a0:	4620      	mov	r0, r4
 80075a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a6:	3a30      	subs	r2, #48	; 0x30
 80075a8:	2a09      	cmp	r2, #9
 80075aa:	d903      	bls.n	80075b4 <_svfiprintf_r+0x1a8>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0c5      	beq.n	800753c <_svfiprintf_r+0x130>
 80075b0:	9105      	str	r1, [sp, #20]
 80075b2:	e7c3      	b.n	800753c <_svfiprintf_r+0x130>
 80075b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b8:	4604      	mov	r4, r0
 80075ba:	2301      	movs	r3, #1
 80075bc:	e7f0      	b.n	80075a0 <_svfiprintf_r+0x194>
 80075be:	ab03      	add	r3, sp, #12
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <_svfiprintf_r+0x1f8>)
 80075c6:	a904      	add	r1, sp, #16
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7fd ffc9 	bl	8005560 <_printf_float>
 80075ce:	1c42      	adds	r2, r0, #1
 80075d0:	4606      	mov	r6, r0
 80075d2:	d1d6      	bne.n	8007582 <_svfiprintf_r+0x176>
 80075d4:	89ab      	ldrh	r3, [r5, #12]
 80075d6:	065b      	lsls	r3, r3, #25
 80075d8:	f53f af2c 	bmi.w	8007434 <_svfiprintf_r+0x28>
 80075dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075de:	b01d      	add	sp, #116	; 0x74
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	462a      	mov	r2, r5
 80075ea:	4b06      	ldr	r3, [pc, #24]	; (8007604 <_svfiprintf_r+0x1f8>)
 80075ec:	a904      	add	r1, sp, #16
 80075ee:	4638      	mov	r0, r7
 80075f0:	f7fe fa5a 	bl	8005aa8 <_printf_i>
 80075f4:	e7eb      	b.n	80075ce <_svfiprintf_r+0x1c2>
 80075f6:	bf00      	nop
 80075f8:	08008454 	.word	0x08008454
 80075fc:	0800845e 	.word	0x0800845e
 8007600:	08005561 	.word	0x08005561
 8007604:	08007355 	.word	0x08007355
 8007608:	0800845a 	.word	0x0800845a

0800760c <_sbrk_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_sbrk_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7fa f99c 	bl	8001954 <_sbrk>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_sbrk_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_sbrk_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	2000037c 	.word	0x2000037c

0800762c <__assert_func>:
 800762c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800762e:	4614      	mov	r4, r2
 8007630:	461a      	mov	r2, r3
 8007632:	4b09      	ldr	r3, [pc, #36]	; (8007658 <__assert_func+0x2c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4605      	mov	r5, r0
 8007638:	68d8      	ldr	r0, [r3, #12]
 800763a:	b14c      	cbz	r4, 8007650 <__assert_func+0x24>
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <__assert_func+0x30>)
 800763e:	9100      	str	r1, [sp, #0]
 8007640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007644:	4906      	ldr	r1, [pc, #24]	; (8007660 <__assert_func+0x34>)
 8007646:	462b      	mov	r3, r5
 8007648:	f000 f80e 	bl	8007668 <fiprintf>
 800764c:	f000 faac 	bl	8007ba8 <abort>
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <__assert_func+0x38>)
 8007652:	461c      	mov	r4, r3
 8007654:	e7f3      	b.n	800763e <__assert_func+0x12>
 8007656:	bf00      	nop
 8007658:	2000004c 	.word	0x2000004c
 800765c:	08008465 	.word	0x08008465
 8007660:	08008472 	.word	0x08008472
 8007664:	080084a0 	.word	0x080084a0

08007668 <fiprintf>:
 8007668:	b40e      	push	{r1, r2, r3}
 800766a:	b503      	push	{r0, r1, lr}
 800766c:	4601      	mov	r1, r0
 800766e:	ab03      	add	r3, sp, #12
 8007670:	4805      	ldr	r0, [pc, #20]	; (8007688 <fiprintf+0x20>)
 8007672:	f853 2b04 	ldr.w	r2, [r3], #4
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	f000 f897 	bl	80077ac <_vfiprintf_r>
 800767e:	b002      	add	sp, #8
 8007680:	f85d eb04 	ldr.w	lr, [sp], #4
 8007684:	b003      	add	sp, #12
 8007686:	4770      	bx	lr
 8007688:	2000004c 	.word	0x2000004c

0800768c <__ascii_mbtowc>:
 800768c:	b082      	sub	sp, #8
 800768e:	b901      	cbnz	r1, 8007692 <__ascii_mbtowc+0x6>
 8007690:	a901      	add	r1, sp, #4
 8007692:	b142      	cbz	r2, 80076a6 <__ascii_mbtowc+0x1a>
 8007694:	b14b      	cbz	r3, 80076aa <__ascii_mbtowc+0x1e>
 8007696:	7813      	ldrb	r3, [r2, #0]
 8007698:	600b      	str	r3, [r1, #0]
 800769a:	7812      	ldrb	r2, [r2, #0]
 800769c:	1e10      	subs	r0, r2, #0
 800769e:	bf18      	it	ne
 80076a0:	2001      	movne	r0, #1
 80076a2:	b002      	add	sp, #8
 80076a4:	4770      	bx	lr
 80076a6:	4610      	mov	r0, r2
 80076a8:	e7fb      	b.n	80076a2 <__ascii_mbtowc+0x16>
 80076aa:	f06f 0001 	mvn.w	r0, #1
 80076ae:	e7f8      	b.n	80076a2 <__ascii_mbtowc+0x16>

080076b0 <memmove>:
 80076b0:	4288      	cmp	r0, r1
 80076b2:	b510      	push	{r4, lr}
 80076b4:	eb01 0402 	add.w	r4, r1, r2
 80076b8:	d902      	bls.n	80076c0 <memmove+0x10>
 80076ba:	4284      	cmp	r4, r0
 80076bc:	4623      	mov	r3, r4
 80076be:	d807      	bhi.n	80076d0 <memmove+0x20>
 80076c0:	1e43      	subs	r3, r0, #1
 80076c2:	42a1      	cmp	r1, r4
 80076c4:	d008      	beq.n	80076d8 <memmove+0x28>
 80076c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ce:	e7f8      	b.n	80076c2 <memmove+0x12>
 80076d0:	4402      	add	r2, r0
 80076d2:	4601      	mov	r1, r0
 80076d4:	428a      	cmp	r2, r1
 80076d6:	d100      	bne.n	80076da <memmove+0x2a>
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076e2:	e7f7      	b.n	80076d4 <memmove+0x24>

080076e4 <__malloc_lock>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__malloc_lock+0x8>)
 80076e6:	f000 bc1f 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 80076ea:	bf00      	nop
 80076ec:	20000380 	.word	0x20000380

080076f0 <__malloc_unlock>:
 80076f0:	4801      	ldr	r0, [pc, #4]	; (80076f8 <__malloc_unlock+0x8>)
 80076f2:	f000 bc1a 	b.w	8007f2a <__retarget_lock_release_recursive>
 80076f6:	bf00      	nop
 80076f8:	20000380 	.word	0x20000380

080076fc <_realloc_r>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4680      	mov	r8, r0
 8007702:	4614      	mov	r4, r2
 8007704:	460e      	mov	r6, r1
 8007706:	b921      	cbnz	r1, 8007712 <_realloc_r+0x16>
 8007708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4611      	mov	r1, r2
 800770e:	f7ff bdad 	b.w	800726c <_malloc_r>
 8007712:	b92a      	cbnz	r2, 8007720 <_realloc_r+0x24>
 8007714:	f7ff fd3e 	bl	8007194 <_free_r>
 8007718:	4625      	mov	r5, r4
 800771a:	4628      	mov	r0, r5
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007720:	f000 fc6a 	bl	8007ff8 <_malloc_usable_size_r>
 8007724:	4284      	cmp	r4, r0
 8007726:	4607      	mov	r7, r0
 8007728:	d802      	bhi.n	8007730 <_realloc_r+0x34>
 800772a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800772e:	d812      	bhi.n	8007756 <_realloc_r+0x5a>
 8007730:	4621      	mov	r1, r4
 8007732:	4640      	mov	r0, r8
 8007734:	f7ff fd9a 	bl	800726c <_malloc_r>
 8007738:	4605      	mov	r5, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d0ed      	beq.n	800771a <_realloc_r+0x1e>
 800773e:	42bc      	cmp	r4, r7
 8007740:	4622      	mov	r2, r4
 8007742:	4631      	mov	r1, r6
 8007744:	bf28      	it	cs
 8007746:	463a      	movcs	r2, r7
 8007748:	f7ff f97c 	bl	8006a44 <memcpy>
 800774c:	4631      	mov	r1, r6
 800774e:	4640      	mov	r0, r8
 8007750:	f7ff fd20 	bl	8007194 <_free_r>
 8007754:	e7e1      	b.n	800771a <_realloc_r+0x1e>
 8007756:	4635      	mov	r5, r6
 8007758:	e7df      	b.n	800771a <_realloc_r+0x1e>

0800775a <__sfputc_r>:
 800775a:	6893      	ldr	r3, [r2, #8]
 800775c:	3b01      	subs	r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	b410      	push	{r4}
 8007762:	6093      	str	r3, [r2, #8]
 8007764:	da08      	bge.n	8007778 <__sfputc_r+0x1e>
 8007766:	6994      	ldr	r4, [r2, #24]
 8007768:	42a3      	cmp	r3, r4
 800776a:	db01      	blt.n	8007770 <__sfputc_r+0x16>
 800776c:	290a      	cmp	r1, #10
 800776e:	d103      	bne.n	8007778 <__sfputc_r+0x1e>
 8007770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007774:	f000 b94a 	b.w	8007a0c <__swbuf_r>
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	1c58      	adds	r0, r3, #1
 800777c:	6010      	str	r0, [r2, #0]
 800777e:	7019      	strb	r1, [r3, #0]
 8007780:	4608      	mov	r0, r1
 8007782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007786:	4770      	bx	lr

08007788 <__sfputs_r>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	4614      	mov	r4, r2
 8007790:	18d5      	adds	r5, r2, r3
 8007792:	42ac      	cmp	r4, r5
 8007794:	d101      	bne.n	800779a <__sfputs_r+0x12>
 8007796:	2000      	movs	r0, #0
 8007798:	e007      	b.n	80077aa <__sfputs_r+0x22>
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	463a      	mov	r2, r7
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff ffda 	bl	800775a <__sfputc_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d1f3      	bne.n	8007792 <__sfputs_r+0xa>
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077ac <_vfiprintf_r>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	460d      	mov	r5, r1
 80077b2:	b09d      	sub	sp, #116	; 0x74
 80077b4:	4614      	mov	r4, r2
 80077b6:	4698      	mov	r8, r3
 80077b8:	4606      	mov	r6, r0
 80077ba:	b118      	cbz	r0, 80077c4 <_vfiprintf_r+0x18>
 80077bc:	6983      	ldr	r3, [r0, #24]
 80077be:	b90b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x18>
 80077c0:	f000 fb14 	bl	8007dec <__sinit>
 80077c4:	4b89      	ldr	r3, [pc, #548]	; (80079ec <_vfiprintf_r+0x240>)
 80077c6:	429d      	cmp	r5, r3
 80077c8:	d11b      	bne.n	8007802 <_vfiprintf_r+0x56>
 80077ca:	6875      	ldr	r5, [r6, #4]
 80077cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d405      	bmi.n	80077de <_vfiprintf_r+0x32>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d402      	bmi.n	80077de <_vfiprintf_r+0x32>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f000 fba5 	bl	8007f28 <__retarget_lock_acquire_recursive>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	071b      	lsls	r3, r3, #28
 80077e2:	d501      	bpl.n	80077e8 <_vfiprintf_r+0x3c>
 80077e4:	692b      	ldr	r3, [r5, #16]
 80077e6:	b9eb      	cbnz	r3, 8007824 <_vfiprintf_r+0x78>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f000 f96e 	bl	8007acc <__swsetup_r>
 80077f0:	b1c0      	cbz	r0, 8007824 <_vfiprintf_r+0x78>
 80077f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f4:	07dc      	lsls	r4, r3, #31
 80077f6:	d50e      	bpl.n	8007816 <_vfiprintf_r+0x6a>
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	b01d      	add	sp, #116	; 0x74
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007802:	4b7b      	ldr	r3, [pc, #492]	; (80079f0 <_vfiprintf_r+0x244>)
 8007804:	429d      	cmp	r5, r3
 8007806:	d101      	bne.n	800780c <_vfiprintf_r+0x60>
 8007808:	68b5      	ldr	r5, [r6, #8]
 800780a:	e7df      	b.n	80077cc <_vfiprintf_r+0x20>
 800780c:	4b79      	ldr	r3, [pc, #484]	; (80079f4 <_vfiprintf_r+0x248>)
 800780e:	429d      	cmp	r5, r3
 8007810:	bf08      	it	eq
 8007812:	68f5      	ldreq	r5, [r6, #12]
 8007814:	e7da      	b.n	80077cc <_vfiprintf_r+0x20>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	0598      	lsls	r0, r3, #22
 800781a:	d4ed      	bmi.n	80077f8 <_vfiprintf_r+0x4c>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f000 fb84 	bl	8007f2a <__retarget_lock_release_recursive>
 8007822:	e7e9      	b.n	80077f8 <_vfiprintf_r+0x4c>
 8007824:	2300      	movs	r3, #0
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	2320      	movs	r3, #32
 800782a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800782e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007832:	2330      	movs	r3, #48	; 0x30
 8007834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079f8 <_vfiprintf_r+0x24c>
 8007838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800783c:	f04f 0901 	mov.w	r9, #1
 8007840:	4623      	mov	r3, r4
 8007842:	469a      	mov	sl, r3
 8007844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007848:	b10a      	cbz	r2, 800784e <_vfiprintf_r+0xa2>
 800784a:	2a25      	cmp	r2, #37	; 0x25
 800784c:	d1f9      	bne.n	8007842 <_vfiprintf_r+0x96>
 800784e:	ebba 0b04 	subs.w	fp, sl, r4
 8007852:	d00b      	beq.n	800786c <_vfiprintf_r+0xc0>
 8007854:	465b      	mov	r3, fp
 8007856:	4622      	mov	r2, r4
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ff94 	bl	8007788 <__sfputs_r>
 8007860:	3001      	adds	r0, #1
 8007862:	f000 80aa 	beq.w	80079ba <_vfiprintf_r+0x20e>
 8007866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007868:	445a      	add	r2, fp
 800786a:	9209      	str	r2, [sp, #36]	; 0x24
 800786c:	f89a 3000 	ldrb.w	r3, [sl]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a2 	beq.w	80079ba <_vfiprintf_r+0x20e>
 8007876:	2300      	movs	r3, #0
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007880:	f10a 0a01 	add.w	sl, sl, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9307      	str	r3, [sp, #28]
 8007888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800788c:	931a      	str	r3, [sp, #104]	; 0x68
 800788e:	4654      	mov	r4, sl
 8007890:	2205      	movs	r2, #5
 8007892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007896:	4858      	ldr	r0, [pc, #352]	; (80079f8 <_vfiprintf_r+0x24c>)
 8007898:	f7f8 fcaa 	bl	80001f0 <memchr>
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	b9d8      	cbnz	r0, 80078d8 <_vfiprintf_r+0x12c>
 80078a0:	06d1      	lsls	r1, r2, #27
 80078a2:	bf44      	itt	mi
 80078a4:	2320      	movmi	r3, #32
 80078a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078aa:	0713      	lsls	r3, r2, #28
 80078ac:	bf44      	itt	mi
 80078ae:	232b      	movmi	r3, #43	; 0x2b
 80078b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b4:	f89a 3000 	ldrb.w	r3, [sl]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d015      	beq.n	80078e8 <_vfiprintf_r+0x13c>
 80078bc:	9a07      	ldr	r2, [sp, #28]
 80078be:	4654      	mov	r4, sl
 80078c0:	2000      	movs	r0, #0
 80078c2:	f04f 0c0a 	mov.w	ip, #10
 80078c6:	4621      	mov	r1, r4
 80078c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078cc:	3b30      	subs	r3, #48	; 0x30
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d94e      	bls.n	8007970 <_vfiprintf_r+0x1c4>
 80078d2:	b1b0      	cbz	r0, 8007902 <_vfiprintf_r+0x156>
 80078d4:	9207      	str	r2, [sp, #28]
 80078d6:	e014      	b.n	8007902 <_vfiprintf_r+0x156>
 80078d8:	eba0 0308 	sub.w	r3, r0, r8
 80078dc:	fa09 f303 	lsl.w	r3, r9, r3
 80078e0:	4313      	orrs	r3, r2
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	46a2      	mov	sl, r4
 80078e6:	e7d2      	b.n	800788e <_vfiprintf_r+0xe2>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	1d19      	adds	r1, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9103      	str	r1, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbb      	ittet	lt
 80078f4:	425b      	neglt	r3, r3
 80078f6:	f042 0202 	orrlt.w	r2, r2, #2
 80078fa:	9307      	strge	r3, [sp, #28]
 80078fc:	9307      	strlt	r3, [sp, #28]
 80078fe:	bfb8      	it	lt
 8007900:	9204      	strlt	r2, [sp, #16]
 8007902:	7823      	ldrb	r3, [r4, #0]
 8007904:	2b2e      	cmp	r3, #46	; 0x2e
 8007906:	d10c      	bne.n	8007922 <_vfiprintf_r+0x176>
 8007908:	7863      	ldrb	r3, [r4, #1]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d135      	bne.n	800797a <_vfiprintf_r+0x1ce>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	1d1a      	adds	r2, r3, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	9203      	str	r2, [sp, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfb8      	it	lt
 800791a:	f04f 33ff 	movlt.w	r3, #4294967295
 800791e:	3402      	adds	r4, #2
 8007920:	9305      	str	r3, [sp, #20]
 8007922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a08 <_vfiprintf_r+0x25c>
 8007926:	7821      	ldrb	r1, [r4, #0]
 8007928:	2203      	movs	r2, #3
 800792a:	4650      	mov	r0, sl
 800792c:	f7f8 fc60 	bl	80001f0 <memchr>
 8007930:	b140      	cbz	r0, 8007944 <_vfiprintf_r+0x198>
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	eba0 000a 	sub.w	r0, r0, sl
 8007938:	fa03 f000 	lsl.w	r0, r3, r0
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	4303      	orrs	r3, r0
 8007940:	3401      	adds	r4, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007948:	482c      	ldr	r0, [pc, #176]	; (80079fc <_vfiprintf_r+0x250>)
 800794a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794e:	2206      	movs	r2, #6
 8007950:	f7f8 fc4e 	bl	80001f0 <memchr>
 8007954:	2800      	cmp	r0, #0
 8007956:	d03f      	beq.n	80079d8 <_vfiprintf_r+0x22c>
 8007958:	4b29      	ldr	r3, [pc, #164]	; (8007a00 <_vfiprintf_r+0x254>)
 800795a:	bb1b      	cbnz	r3, 80079a4 <_vfiprintf_r+0x1f8>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	3307      	adds	r3, #7
 8007960:	f023 0307 	bic.w	r3, r3, #7
 8007964:	3308      	adds	r3, #8
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796a:	443b      	add	r3, r7
 800796c:	9309      	str	r3, [sp, #36]	; 0x24
 800796e:	e767      	b.n	8007840 <_vfiprintf_r+0x94>
 8007970:	fb0c 3202 	mla	r2, ip, r2, r3
 8007974:	460c      	mov	r4, r1
 8007976:	2001      	movs	r0, #1
 8007978:	e7a5      	b.n	80078c6 <_vfiprintf_r+0x11a>
 800797a:	2300      	movs	r3, #0
 800797c:	3401      	adds	r4, #1
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	4619      	mov	r1, r3
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4620      	mov	r0, r4
 8007988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798c:	3a30      	subs	r2, #48	; 0x30
 800798e:	2a09      	cmp	r2, #9
 8007990:	d903      	bls.n	800799a <_vfiprintf_r+0x1ee>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0c5      	beq.n	8007922 <_vfiprintf_r+0x176>
 8007996:	9105      	str	r1, [sp, #20]
 8007998:	e7c3      	b.n	8007922 <_vfiprintf_r+0x176>
 800799a:	fb0c 2101 	mla	r1, ip, r1, r2
 800799e:	4604      	mov	r4, r0
 80079a0:	2301      	movs	r3, #1
 80079a2:	e7f0      	b.n	8007986 <_vfiprintf_r+0x1da>
 80079a4:	ab03      	add	r3, sp, #12
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	462a      	mov	r2, r5
 80079aa:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <_vfiprintf_r+0x258>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7fd fdd6 	bl	8005560 <_printf_float>
 80079b4:	4607      	mov	r7, r0
 80079b6:	1c78      	adds	r0, r7, #1
 80079b8:	d1d6      	bne.n	8007968 <_vfiprintf_r+0x1bc>
 80079ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	d405      	bmi.n	80079cc <_vfiprintf_r+0x220>
 80079c0:	89ab      	ldrh	r3, [r5, #12]
 80079c2:	059a      	lsls	r2, r3, #22
 80079c4:	d402      	bmi.n	80079cc <_vfiprintf_r+0x220>
 80079c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c8:	f000 faaf 	bl	8007f2a <__retarget_lock_release_recursive>
 80079cc:	89ab      	ldrh	r3, [r5, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	f53f af12 	bmi.w	80077f8 <_vfiprintf_r+0x4c>
 80079d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d6:	e711      	b.n	80077fc <_vfiprintf_r+0x50>
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	462a      	mov	r2, r5
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <_vfiprintf_r+0x258>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7fe f860 	bl	8005aa8 <_printf_i>
 80079e8:	e7e4      	b.n	80079b4 <_vfiprintf_r+0x208>
 80079ea:	bf00      	nop
 80079ec:	080085cc 	.word	0x080085cc
 80079f0:	080085ec 	.word	0x080085ec
 80079f4:	080085ac 	.word	0x080085ac
 80079f8:	08008454 	.word	0x08008454
 80079fc:	0800845e 	.word	0x0800845e
 8007a00:	08005561 	.word	0x08005561
 8007a04:	08007789 	.word	0x08007789
 8007a08:	0800845a 	.word	0x0800845a

08007a0c <__swbuf_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	4605      	mov	r5, r0
 8007a14:	b118      	cbz	r0, 8007a1e <__swbuf_r+0x12>
 8007a16:	6983      	ldr	r3, [r0, #24]
 8007a18:	b90b      	cbnz	r3, 8007a1e <__swbuf_r+0x12>
 8007a1a:	f000 f9e7 	bl	8007dec <__sinit>
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <__swbuf_r+0x98>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d12b      	bne.n	8007a7c <__swbuf_r+0x70>
 8007a24:	686c      	ldr	r4, [r5, #4]
 8007a26:	69a3      	ldr	r3, [r4, #24]
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	071a      	lsls	r2, r3, #28
 8007a2e:	d52f      	bpl.n	8007a90 <__swbuf_r+0x84>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b36b      	cbz	r3, 8007a90 <__swbuf_r+0x84>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	1ac0      	subs	r0, r0, r3
 8007a3a:	6963      	ldr	r3, [r4, #20]
 8007a3c:	b2f6      	uxtb	r6, r6
 8007a3e:	4283      	cmp	r3, r0
 8007a40:	4637      	mov	r7, r6
 8007a42:	dc04      	bgt.n	8007a4e <__swbuf_r+0x42>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f93c 	bl	8007cc4 <_fflush_r>
 8007a4c:	bb30      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	701e      	strb	r6, [r3, #0]
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	3001      	adds	r0, #1
 8007a60:	4283      	cmp	r3, r0
 8007a62:	d004      	beq.n	8007a6e <__swbuf_r+0x62>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d506      	bpl.n	8007a78 <__swbuf_r+0x6c>
 8007a6a:	2e0a      	cmp	r6, #10
 8007a6c:	d104      	bne.n	8007a78 <__swbuf_r+0x6c>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 f927 	bl	8007cc4 <_fflush_r>
 8007a76:	b988      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a78:	4638      	mov	r0, r7
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <__swbuf_r+0x9c>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swbuf_r+0x7a>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7cf      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__swbuf_r+0xa0>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7ca      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 f81a 	bl	8007acc <__swsetup_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0cb      	beq.n	8007a34 <__swbuf_r+0x28>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa0:	e7ea      	b.n	8007a78 <__swbuf_r+0x6c>
 8007aa2:	bf00      	nop
 8007aa4:	080085cc 	.word	0x080085cc
 8007aa8:	080085ec 	.word	0x080085ec
 8007aac:	080085ac 	.word	0x080085ac

08007ab0 <__ascii_wctomb>:
 8007ab0:	b149      	cbz	r1, 8007ac6 <__ascii_wctomb+0x16>
 8007ab2:	2aff      	cmp	r2, #255	; 0xff
 8007ab4:	bf85      	ittet	hi
 8007ab6:	238a      	movhi	r3, #138	; 0x8a
 8007ab8:	6003      	strhi	r3, [r0, #0]
 8007aba:	700a      	strbls	r2, [r1, #0]
 8007abc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ac0:	bf98      	it	ls
 8007ac2:	2001      	movls	r0, #1
 8007ac4:	4770      	bx	lr
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4770      	bx	lr
	...

08007acc <__swsetup_r>:
 8007acc:	4b32      	ldr	r3, [pc, #200]	; (8007b98 <__swsetup_r+0xcc>)
 8007ace:	b570      	push	{r4, r5, r6, lr}
 8007ad0:	681d      	ldr	r5, [r3, #0]
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	b125      	cbz	r5, 8007ae2 <__swsetup_r+0x16>
 8007ad8:	69ab      	ldr	r3, [r5, #24]
 8007ada:	b913      	cbnz	r3, 8007ae2 <__swsetup_r+0x16>
 8007adc:	4628      	mov	r0, r5
 8007ade:	f000 f985 	bl	8007dec <__sinit>
 8007ae2:	4b2e      	ldr	r3, [pc, #184]	; (8007b9c <__swsetup_r+0xd0>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	d10f      	bne.n	8007b08 <__swsetup_r+0x3c>
 8007ae8:	686c      	ldr	r4, [r5, #4]
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af0:	0719      	lsls	r1, r3, #28
 8007af2:	d42c      	bmi.n	8007b4e <__swsetup_r+0x82>
 8007af4:	06dd      	lsls	r5, r3, #27
 8007af6:	d411      	bmi.n	8007b1c <__swsetup_r+0x50>
 8007af8:	2309      	movs	r3, #9
 8007afa:	6033      	str	r3, [r6, #0]
 8007afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	f04f 30ff 	mov.w	r0, #4294967295
 8007b06:	e03e      	b.n	8007b86 <__swsetup_r+0xba>
 8007b08:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <__swsetup_r+0xd4>)
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	d101      	bne.n	8007b12 <__swsetup_r+0x46>
 8007b0e:	68ac      	ldr	r4, [r5, #8]
 8007b10:	e7eb      	b.n	8007aea <__swsetup_r+0x1e>
 8007b12:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <__swsetup_r+0xd8>)
 8007b14:	429c      	cmp	r4, r3
 8007b16:	bf08      	it	eq
 8007b18:	68ec      	ldreq	r4, [r5, #12]
 8007b1a:	e7e6      	b.n	8007aea <__swsetup_r+0x1e>
 8007b1c:	0758      	lsls	r0, r3, #29
 8007b1e:	d512      	bpl.n	8007b46 <__swsetup_r+0x7a>
 8007b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b22:	b141      	cbz	r1, 8007b36 <__swsetup_r+0x6a>
 8007b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b28:	4299      	cmp	r1, r3
 8007b2a:	d002      	beq.n	8007b32 <__swsetup_r+0x66>
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff fb31 	bl	8007194 <_free_r>
 8007b32:	2300      	movs	r3, #0
 8007b34:	6363      	str	r3, [r4, #52]	; 0x34
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f043 0308 	orr.w	r3, r3, #8
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	b94b      	cbnz	r3, 8007b66 <__swsetup_r+0x9a>
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5c:	d003      	beq.n	8007b66 <__swsetup_r+0x9a>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 fa09 	bl	8007f78 <__smakebuf_r>
 8007b66:	89a0      	ldrh	r0, [r4, #12]
 8007b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b6c:	f010 0301 	ands.w	r3, r0, #1
 8007b70:	d00a      	beq.n	8007b88 <__swsetup_r+0xbc>
 8007b72:	2300      	movs	r3, #0
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	6963      	ldr	r3, [r4, #20]
 8007b78:	425b      	negs	r3, r3
 8007b7a:	61a3      	str	r3, [r4, #24]
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	b943      	cbnz	r3, 8007b92 <__swsetup_r+0xc6>
 8007b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b84:	d1ba      	bne.n	8007afc <__swsetup_r+0x30>
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	0781      	lsls	r1, r0, #30
 8007b8a:	bf58      	it	pl
 8007b8c:	6963      	ldrpl	r3, [r4, #20]
 8007b8e:	60a3      	str	r3, [r4, #8]
 8007b90:	e7f4      	b.n	8007b7c <__swsetup_r+0xb0>
 8007b92:	2000      	movs	r0, #0
 8007b94:	e7f7      	b.n	8007b86 <__swsetup_r+0xba>
 8007b96:	bf00      	nop
 8007b98:	2000004c 	.word	0x2000004c
 8007b9c:	080085cc 	.word	0x080085cc
 8007ba0:	080085ec 	.word	0x080085ec
 8007ba4:	080085ac 	.word	0x080085ac

08007ba8 <abort>:
 8007ba8:	b508      	push	{r3, lr}
 8007baa:	2006      	movs	r0, #6
 8007bac:	f000 fa54 	bl	8008058 <raise>
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f7f9 fe57 	bl	8001864 <_exit>
	...

08007bb8 <__sflush_r>:
 8007bb8:	898a      	ldrh	r2, [r1, #12]
 8007bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	0710      	lsls	r0, r2, #28
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	d458      	bmi.n	8007c78 <__sflush_r+0xc0>
 8007bc6:	684b      	ldr	r3, [r1, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc05      	bgt.n	8007bd8 <__sflush_r+0x20>
 8007bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dc02      	bgt.n	8007bd8 <__sflush_r+0x20>
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d0f9      	beq.n	8007bd2 <__sflush_r+0x1a>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007be4:	682f      	ldr	r7, [r5, #0]
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	d032      	beq.n	8007c50 <__sflush_r+0x98>
 8007bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	075a      	lsls	r2, r3, #29
 8007bf0:	d505      	bpl.n	8007bfe <__sflush_r+0x46>
 8007bf2:	6863      	ldr	r3, [r4, #4]
 8007bf4:	1ac0      	subs	r0, r0, r3
 8007bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bf8:	b10b      	cbz	r3, 8007bfe <__sflush_r+0x46>
 8007bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bfc:	1ac0      	subs	r0, r0, r3
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4602      	mov	r2, r0
 8007c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c04:	6a21      	ldr	r1, [r4, #32]
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b0      	blx	r6
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	d106      	bne.n	8007c1e <__sflush_r+0x66>
 8007c10:	6829      	ldr	r1, [r5, #0]
 8007c12:	291d      	cmp	r1, #29
 8007c14:	d82c      	bhi.n	8007c70 <__sflush_r+0xb8>
 8007c16:	4a2a      	ldr	r2, [pc, #168]	; (8007cc0 <__sflush_r+0x108>)
 8007c18:	40ca      	lsrs	r2, r1
 8007c1a:	07d6      	lsls	r6, r2, #31
 8007c1c:	d528      	bpl.n	8007c70 <__sflush_r+0xb8>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	6062      	str	r2, [r4, #4]
 8007c22:	04d9      	lsls	r1, r3, #19
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	d504      	bpl.n	8007c34 <__sflush_r+0x7c>
 8007c2a:	1c42      	adds	r2, r0, #1
 8007c2c:	d101      	bne.n	8007c32 <__sflush_r+0x7a>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b903      	cbnz	r3, 8007c34 <__sflush_r+0x7c>
 8007c32:	6560      	str	r0, [r4, #84]	; 0x54
 8007c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c36:	602f      	str	r7, [r5, #0]
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d0ca      	beq.n	8007bd2 <__sflush_r+0x1a>
 8007c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <__sflush_r+0x92>
 8007c44:	4628      	mov	r0, r5
 8007c46:	f7ff faa5 	bl	8007194 <_free_r>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c4e:	e7c1      	b.n	8007bd4 <__sflush_r+0x1c>
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	2301      	movs	r3, #1
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b0      	blx	r6
 8007c58:	1c41      	adds	r1, r0, #1
 8007c5a:	d1c7      	bne.n	8007bec <__sflush_r+0x34>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0c4      	beq.n	8007bec <__sflush_r+0x34>
 8007c62:	2b1d      	cmp	r3, #29
 8007c64:	d001      	beq.n	8007c6a <__sflush_r+0xb2>
 8007c66:	2b16      	cmp	r3, #22
 8007c68:	d101      	bne.n	8007c6e <__sflush_r+0xb6>
 8007c6a:	602f      	str	r7, [r5, #0]
 8007c6c:	e7b1      	b.n	8007bd2 <__sflush_r+0x1a>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	e7ad      	b.n	8007bd4 <__sflush_r+0x1c>
 8007c78:	690f      	ldr	r7, [r1, #16]
 8007c7a:	2f00      	cmp	r7, #0
 8007c7c:	d0a9      	beq.n	8007bd2 <__sflush_r+0x1a>
 8007c7e:	0793      	lsls	r3, r2, #30
 8007c80:	680e      	ldr	r6, [r1, #0]
 8007c82:	bf08      	it	eq
 8007c84:	694b      	ldreq	r3, [r1, #20]
 8007c86:	600f      	str	r7, [r1, #0]
 8007c88:	bf18      	it	ne
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	eba6 0807 	sub.w	r8, r6, r7
 8007c90:	608b      	str	r3, [r1, #8]
 8007c92:	f1b8 0f00 	cmp.w	r8, #0
 8007c96:	dd9c      	ble.n	8007bd2 <__sflush_r+0x1a>
 8007c98:	6a21      	ldr	r1, [r4, #32]
 8007c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dc06      	bgt.n	8007cb6 <__sflush_r+0xfe>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	e78e      	b.n	8007bd4 <__sflush_r+0x1c>
 8007cb6:	4407      	add	r7, r0
 8007cb8:	eba8 0800 	sub.w	r8, r8, r0
 8007cbc:	e7e9      	b.n	8007c92 <__sflush_r+0xda>
 8007cbe:	bf00      	nop
 8007cc0:	20400001 	.word	0x20400001

08007cc4 <_fflush_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	690b      	ldr	r3, [r1, #16]
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b913      	cbnz	r3, 8007cd4 <_fflush_r+0x10>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	b118      	cbz	r0, 8007cde <_fflush_r+0x1a>
 8007cd6:	6983      	ldr	r3, [r0, #24]
 8007cd8:	b90b      	cbnz	r3, 8007cde <_fflush_r+0x1a>
 8007cda:	f000 f887 	bl	8007dec <__sinit>
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <_fflush_r+0x6c>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	d11b      	bne.n	8007d1c <_fflush_r+0x58>
 8007ce4:	686c      	ldr	r4, [r5, #4]
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0ef      	beq.n	8007cce <_fflush_r+0xa>
 8007cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cf0:	07d0      	lsls	r0, r2, #31
 8007cf2:	d404      	bmi.n	8007cfe <_fflush_r+0x3a>
 8007cf4:	0599      	lsls	r1, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_fflush_r+0x3a>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfa:	f000 f915 	bl	8007f28 <__retarget_lock_acquire_recursive>
 8007cfe:	4628      	mov	r0, r5
 8007d00:	4621      	mov	r1, r4
 8007d02:	f7ff ff59 	bl	8007bb8 <__sflush_r>
 8007d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d08:	07da      	lsls	r2, r3, #31
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	d4e0      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	059b      	lsls	r3, r3, #22
 8007d12:	d4dd      	bmi.n	8007cd0 <_fflush_r+0xc>
 8007d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d16:	f000 f908 	bl	8007f2a <__retarget_lock_release_recursive>
 8007d1a:	e7d9      	b.n	8007cd0 <_fflush_r+0xc>
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <_fflush_r+0x70>)
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d101      	bne.n	8007d26 <_fflush_r+0x62>
 8007d22:	68ac      	ldr	r4, [r5, #8]
 8007d24:	e7df      	b.n	8007ce6 <_fflush_r+0x22>
 8007d26:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <_fflush_r+0x74>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	bf08      	it	eq
 8007d2c:	68ec      	ldreq	r4, [r5, #12]
 8007d2e:	e7da      	b.n	8007ce6 <_fflush_r+0x22>
 8007d30:	080085cc 	.word	0x080085cc
 8007d34:	080085ec 	.word	0x080085ec
 8007d38:	080085ac 	.word	0x080085ac

08007d3c <std>:
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	4604      	mov	r4, r0
 8007d42:	e9c0 3300 	strd	r3, r3, [r0]
 8007d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d4a:	6083      	str	r3, [r0, #8]
 8007d4c:	8181      	strh	r1, [r0, #12]
 8007d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d50:	81c2      	strh	r2, [r0, #14]
 8007d52:	6183      	str	r3, [r0, #24]
 8007d54:	4619      	mov	r1, r3
 8007d56:	2208      	movs	r2, #8
 8007d58:	305c      	adds	r0, #92	; 0x5c
 8007d5a:	f7fd fb59 	bl	8005410 <memset>
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std+0x38>)
 8007d60:	6263      	str	r3, [r4, #36]	; 0x24
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x3c>)
 8007d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <std+0x40>)
 8007d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <std+0x44>)
 8007d6c:	6224      	str	r4, [r4, #32]
 8007d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	bf00      	nop
 8007d74:	08008091 	.word	0x08008091
 8007d78:	080080b3 	.word	0x080080b3
 8007d7c:	080080eb 	.word	0x080080eb
 8007d80:	0800810f 	.word	0x0800810f

08007d84 <_cleanup_r>:
 8007d84:	4901      	ldr	r1, [pc, #4]	; (8007d8c <_cleanup_r+0x8>)
 8007d86:	f000 b8af 	b.w	8007ee8 <_fwalk_reent>
 8007d8a:	bf00      	nop
 8007d8c:	08007cc5 	.word	0x08007cc5

08007d90 <__sfmoreglue>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	2268      	movs	r2, #104	; 0x68
 8007d94:	1e4d      	subs	r5, r1, #1
 8007d96:	4355      	muls	r5, r2
 8007d98:	460e      	mov	r6, r1
 8007d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d9e:	f7ff fa65 	bl	800726c <_malloc_r>
 8007da2:	4604      	mov	r4, r0
 8007da4:	b140      	cbz	r0, 8007db8 <__sfmoreglue+0x28>
 8007da6:	2100      	movs	r1, #0
 8007da8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dac:	300c      	adds	r0, #12
 8007dae:	60a0      	str	r0, [r4, #8]
 8007db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007db4:	f7fd fb2c 	bl	8005410 <memset>
 8007db8:	4620      	mov	r0, r4
 8007dba:	bd70      	pop	{r4, r5, r6, pc}

08007dbc <__sfp_lock_acquire>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <__sfp_lock_acquire+0x8>)
 8007dbe:	f000 b8b3 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20000381 	.word	0x20000381

08007dc8 <__sfp_lock_release>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__sfp_lock_release+0x8>)
 8007dca:	f000 b8ae 	b.w	8007f2a <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20000381 	.word	0x20000381

08007dd4 <__sinit_lock_acquire>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__sinit_lock_acquire+0x8>)
 8007dd6:	f000 b8a7 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20000382 	.word	0x20000382

08007de0 <__sinit_lock_release>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__sinit_lock_release+0x8>)
 8007de2:	f000 b8a2 	b.w	8007f2a <__retarget_lock_release_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000382 	.word	0x20000382

08007dec <__sinit>:
 8007dec:	b510      	push	{r4, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	f7ff fff0 	bl	8007dd4 <__sinit_lock_acquire>
 8007df4:	69a3      	ldr	r3, [r4, #24]
 8007df6:	b11b      	cbz	r3, 8007e00 <__sinit+0x14>
 8007df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfc:	f7ff bff0 	b.w	8007de0 <__sinit_lock_release>
 8007e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e04:	6523      	str	r3, [r4, #80]	; 0x50
 8007e06:	4b13      	ldr	r3, [pc, #76]	; (8007e54 <__sinit+0x68>)
 8007e08:	4a13      	ldr	r2, [pc, #76]	; (8007e58 <__sinit+0x6c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	bf04      	itt	eq
 8007e12:	2301      	moveq	r3, #1
 8007e14:	61a3      	streq	r3, [r4, #24]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f820 	bl	8007e5c <__sfp>
 8007e1c:	6060      	str	r0, [r4, #4]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f81c 	bl	8007e5c <__sfp>
 8007e24:	60a0      	str	r0, [r4, #8]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f818 	bl	8007e5c <__sfp>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	60e0      	str	r0, [r4, #12]
 8007e30:	2104      	movs	r1, #4
 8007e32:	6860      	ldr	r0, [r4, #4]
 8007e34:	f7ff ff82 	bl	8007d3c <std>
 8007e38:	68a0      	ldr	r0, [r4, #8]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	2109      	movs	r1, #9
 8007e3e:	f7ff ff7d 	bl	8007d3c <std>
 8007e42:	68e0      	ldr	r0, [r4, #12]
 8007e44:	2202      	movs	r2, #2
 8007e46:	2112      	movs	r1, #18
 8007e48:	f7ff ff78 	bl	8007d3c <std>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	61a3      	str	r3, [r4, #24]
 8007e50:	e7d2      	b.n	8007df8 <__sinit+0xc>
 8007e52:	bf00      	nop
 8007e54:	08008234 	.word	0x08008234
 8007e58:	08007d85 	.word	0x08007d85

08007e5c <__sfp>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	4607      	mov	r7, r0
 8007e60:	f7ff ffac 	bl	8007dbc <__sfp_lock_acquire>
 8007e64:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <__sfp+0x84>)
 8007e66:	681e      	ldr	r6, [r3, #0]
 8007e68:	69b3      	ldr	r3, [r6, #24]
 8007e6a:	b913      	cbnz	r3, 8007e72 <__sfp+0x16>
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff ffbd 	bl	8007dec <__sinit>
 8007e72:	3648      	adds	r6, #72	; 0x48
 8007e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	d503      	bpl.n	8007e84 <__sfp+0x28>
 8007e7c:	6833      	ldr	r3, [r6, #0]
 8007e7e:	b30b      	cbz	r3, 8007ec4 <__sfp+0x68>
 8007e80:	6836      	ldr	r6, [r6, #0]
 8007e82:	e7f7      	b.n	8007e74 <__sfp+0x18>
 8007e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e88:	b9d5      	cbnz	r5, 8007ec0 <__sfp+0x64>
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <__sfp+0x88>)
 8007e8c:	60e3      	str	r3, [r4, #12]
 8007e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e92:	6665      	str	r5, [r4, #100]	; 0x64
 8007e94:	f000 f847 	bl	8007f26 <__retarget_lock_init_recursive>
 8007e98:	f7ff ff96 	bl	8007dc8 <__sfp_lock_release>
 8007e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ea4:	6025      	str	r5, [r4, #0]
 8007ea6:	61a5      	str	r5, [r4, #24]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eb0:	f7fd faae 	bl	8005410 <memset>
 8007eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec0:	3468      	adds	r4, #104	; 0x68
 8007ec2:	e7d9      	b.n	8007e78 <__sfp+0x1c>
 8007ec4:	2104      	movs	r1, #4
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ff62 	bl	8007d90 <__sfmoreglue>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	6030      	str	r0, [r6, #0]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1d5      	bne.n	8007e80 <__sfp+0x24>
 8007ed4:	f7ff ff78 	bl	8007dc8 <__sfp_lock_release>
 8007ed8:	230c      	movs	r3, #12
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	e7ee      	b.n	8007ebc <__sfp+0x60>
 8007ede:	bf00      	nop
 8007ee0:	08008234 	.word	0x08008234
 8007ee4:	ffff0001 	.word	0xffff0001

08007ee8 <_fwalk_reent>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	4606      	mov	r6, r0
 8007eee:	4688      	mov	r8, r1
 8007ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ef4:	2700      	movs	r7, #0
 8007ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007efa:	f1b9 0901 	subs.w	r9, r9, #1
 8007efe:	d505      	bpl.n	8007f0c <_fwalk_reent+0x24>
 8007f00:	6824      	ldr	r4, [r4, #0]
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d1f7      	bne.n	8007ef6 <_fwalk_reent+0xe>
 8007f06:	4638      	mov	r0, r7
 8007f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0c:	89ab      	ldrh	r3, [r5, #12]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d907      	bls.n	8007f22 <_fwalk_reent+0x3a>
 8007f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f16:	3301      	adds	r3, #1
 8007f18:	d003      	beq.n	8007f22 <_fwalk_reent+0x3a>
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	47c0      	blx	r8
 8007f20:	4307      	orrs	r7, r0
 8007f22:	3568      	adds	r5, #104	; 0x68
 8007f24:	e7e9      	b.n	8007efa <_fwalk_reent+0x12>

08007f26 <__retarget_lock_init_recursive>:
 8007f26:	4770      	bx	lr

08007f28 <__retarget_lock_acquire_recursive>:
 8007f28:	4770      	bx	lr

08007f2a <__retarget_lock_release_recursive>:
 8007f2a:	4770      	bx	lr

08007f2c <__swhatbuf_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	460e      	mov	r6, r1
 8007f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f34:	2900      	cmp	r1, #0
 8007f36:	b096      	sub	sp, #88	; 0x58
 8007f38:	4614      	mov	r4, r2
 8007f3a:	461d      	mov	r5, r3
 8007f3c:	da08      	bge.n	8007f50 <__swhatbuf_r+0x24>
 8007f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	061a      	lsls	r2, r3, #24
 8007f48:	d410      	bmi.n	8007f6c <__swhatbuf_r+0x40>
 8007f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f4e:	e00e      	b.n	8007f6e <__swhatbuf_r+0x42>
 8007f50:	466a      	mov	r2, sp
 8007f52:	f000 f903 	bl	800815c <_fstat_r>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	dbf1      	blt.n	8007f3e <__swhatbuf_r+0x12>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f64:	425a      	negs	r2, r3
 8007f66:	415a      	adcs	r2, r3
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	e7ee      	b.n	8007f4a <__swhatbuf_r+0x1e>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	2000      	movs	r0, #0
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	b016      	add	sp, #88	; 0x58
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f78 <__smakebuf_r>:
 8007f78:	898b      	ldrh	r3, [r1, #12]
 8007f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f7c:	079d      	lsls	r5, r3, #30
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	d507      	bpl.n	8007f94 <__smakebuf_r+0x1c>
 8007f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	6163      	str	r3, [r4, #20]
 8007f90:	b002      	add	sp, #8
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	ab01      	add	r3, sp, #4
 8007f96:	466a      	mov	r2, sp
 8007f98:	f7ff ffc8 	bl	8007f2c <__swhatbuf_r>
 8007f9c:	9900      	ldr	r1, [sp, #0]
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff f963 	bl	800726c <_malloc_r>
 8007fa6:	b948      	cbnz	r0, 8007fbc <__smakebuf_r+0x44>
 8007fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fac:	059a      	lsls	r2, r3, #22
 8007fae:	d4ef      	bmi.n	8007f90 <__smakebuf_r+0x18>
 8007fb0:	f023 0303 	bic.w	r3, r3, #3
 8007fb4:	f043 0302 	orr.w	r3, r3, #2
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	e7e3      	b.n	8007f84 <__smakebuf_r+0xc>
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <__smakebuf_r+0x7c>)
 8007fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	6163      	str	r3, [r4, #20]
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	6120      	str	r0, [r4, #16]
 8007fd2:	b15b      	cbz	r3, 8007fec <__smakebuf_r+0x74>
 8007fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f8d1 	bl	8008180 <_isatty_r>
 8007fde:	b128      	cbz	r0, 8007fec <__smakebuf_r+0x74>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	89a0      	ldrh	r0, [r4, #12]
 8007fee:	4305      	orrs	r5, r0
 8007ff0:	81a5      	strh	r5, [r4, #12]
 8007ff2:	e7cd      	b.n	8007f90 <__smakebuf_r+0x18>
 8007ff4:	08007d85 	.word	0x08007d85

08007ff8 <_malloc_usable_size_r>:
 8007ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffc:	1f18      	subs	r0, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfbc      	itt	lt
 8008002:	580b      	ldrlt	r3, [r1, r0]
 8008004:	18c0      	addlt	r0, r0, r3
 8008006:	4770      	bx	lr

08008008 <_raise_r>:
 8008008:	291f      	cmp	r1, #31
 800800a:	b538      	push	{r3, r4, r5, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	460d      	mov	r5, r1
 8008010:	d904      	bls.n	800801c <_raise_r+0x14>
 8008012:	2316      	movs	r3, #22
 8008014:	6003      	str	r3, [r0, #0]
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800801e:	b112      	cbz	r2, 8008026 <_raise_r+0x1e>
 8008020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008024:	b94b      	cbnz	r3, 800803a <_raise_r+0x32>
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f830 	bl	800808c <_getpid_r>
 800802c:	462a      	mov	r2, r5
 800802e:	4601      	mov	r1, r0
 8008030:	4620      	mov	r0, r4
 8008032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008036:	f000 b817 	b.w	8008068 <_kill_r>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d00a      	beq.n	8008054 <_raise_r+0x4c>
 800803e:	1c59      	adds	r1, r3, #1
 8008040:	d103      	bne.n	800804a <_raise_r+0x42>
 8008042:	2316      	movs	r3, #22
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	2001      	movs	r0, #1
 8008048:	e7e7      	b.n	800801a <_raise_r+0x12>
 800804a:	2400      	movs	r4, #0
 800804c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008050:	4628      	mov	r0, r5
 8008052:	4798      	blx	r3
 8008054:	2000      	movs	r0, #0
 8008056:	e7e0      	b.n	800801a <_raise_r+0x12>

08008058 <raise>:
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <raise+0xc>)
 800805a:	4601      	mov	r1, r0
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f7ff bfd3 	b.w	8008008 <_raise_r>
 8008062:	bf00      	nop
 8008064:	2000004c 	.word	0x2000004c

08008068 <_kill_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d07      	ldr	r5, [pc, #28]	; (8008088 <_kill_r+0x20>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f7f9 fbe5 	bl	8001844 <_kill>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d102      	bne.n	8008084 <_kill_r+0x1c>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b103      	cbz	r3, 8008084 <_kill_r+0x1c>
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	2000037c 	.word	0x2000037c

0800808c <_getpid_r>:
 800808c:	f7f9 bbd2 	b.w	8001834 <_getpid>

08008090 <__sread>:
 8008090:	b510      	push	{r4, lr}
 8008092:	460c      	mov	r4, r1
 8008094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008098:	f000 f894 	bl	80081c4 <_read_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	bfab      	itete	ge
 80080a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080a2:	89a3      	ldrhlt	r3, [r4, #12]
 80080a4:	181b      	addge	r3, r3, r0
 80080a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080aa:	bfac      	ite	ge
 80080ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ae:	81a3      	strhlt	r3, [r4, #12]
 80080b0:	bd10      	pop	{r4, pc}

080080b2 <__swrite>:
 80080b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b6:	461f      	mov	r7, r3
 80080b8:	898b      	ldrh	r3, [r1, #12]
 80080ba:	05db      	lsls	r3, r3, #23
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	4616      	mov	r6, r2
 80080c2:	d505      	bpl.n	80080d0 <__swrite+0x1e>
 80080c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c8:	2302      	movs	r3, #2
 80080ca:	2200      	movs	r2, #0
 80080cc:	f000 f868 	bl	80081a0 <_lseek_r>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	4628      	mov	r0, r5
 80080e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e6:	f000 b817 	b.w	8008118 <_write_r>

080080ea <__sseek>:
 80080ea:	b510      	push	{r4, lr}
 80080ec:	460c      	mov	r4, r1
 80080ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f2:	f000 f855 	bl	80081a0 <_lseek_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	bf15      	itete	ne
 80080fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008106:	81a3      	strheq	r3, [r4, #12]
 8008108:	bf18      	it	ne
 800810a:	81a3      	strhne	r3, [r4, #12]
 800810c:	bd10      	pop	{r4, pc}

0800810e <__sclose>:
 800810e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008112:	f000 b813 	b.w	800813c <_close_r>
	...

08008118 <_write_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_write_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f9 fbc3 	bl	80018b2 <_write>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_write_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_write_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	2000037c 	.word	0x2000037c

0800813c <_close_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_close_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 fbcf 	bl	80018ea <_close>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_close_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_close_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	2000037c 	.word	0x2000037c

0800815c <_fstat_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_fstat_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7f9 fbca 	bl	8001902 <_fstat>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_fstat_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_fstat_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	2000037c 	.word	0x2000037c

08008180 <_isatty_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	; (800819c <_isatty_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7f9 fbc9 	bl	8001922 <_isatty>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_isatty_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_isatty_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	2000037c 	.word	0x2000037c

080081a0 <_lseek_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	; (80081c0 <_lseek_r+0x20>)
 80081a4:	4604      	mov	r4, r0
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	602a      	str	r2, [r5, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f7f9 fbc2 	bl	8001938 <_lseek>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_lseek_r+0x1e>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_lseek_r+0x1e>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	2000037c 	.word	0x2000037c

080081c4 <_read_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d07      	ldr	r5, [pc, #28]	; (80081e4 <_read_r+0x20>)
 80081c8:	4604      	mov	r4, r0
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7f9 fb50 	bl	8001878 <_read>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_read_r+0x1e>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_read_r+0x1e>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	2000037c 	.word	0x2000037c

080081e8 <_init>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr

080081f4 <_fini>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	bf00      	nop
 80081f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fa:	bc08      	pop	{r3}
 80081fc:	469e      	mov	lr, r3
 80081fe:	4770      	bx	lr
